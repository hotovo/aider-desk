This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/**/*, resources/connector/**, scripts/**, electron-builder.yml, electron.vite.config.ts, tailwind.config.js, package.json
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)


================================================================
Directory Structure
================================================================
resources/
  connector/
    connector.py
scripts/
  before-pack.js
  download-uv.mjs
src/
  common/
    locales/
      en.json
      zh.json
    agent.ts
    api.ts
    tools.ts
    types.ts
    utils.ts
  main/
    agent/
      middlewares/
        extract-reasoning-middleware.ts
      tools/
        aider.ts
        approval-manager.ts
        helpers.ts
        power.ts
        subagents.ts
        todo.ts
      agent.ts
      index.ts
      mcp-manager.ts
      optimizer.ts
      prompts.ts
      utils.ts
    connector/
      connector-manager.ts
      connector.ts
      index.ts
    custom-commands/
      custom-command-manager.ts
      index.ts
    data-manager/
      data-manager.ts
      index.ts
    events/
      event-manager.ts
      index.ts
    models/
      providers/
        anthropic.ts
        azure.ts
        bedrock.ts
        cerebras.ts
        deepseek.ts
        gemini.ts
        groq.ts
        lm-studio.ts
        ollama.ts
        openai-compatible.ts
        openai.ts
        openrouter.ts
        requesty.ts
        vertex-ai.ts
        zai-plan.ts
      index.ts
      model-manager.ts
      models.ts
      types.ts
    project/
      index.ts
      project-manager.ts
      project.ts
    server/
      rest-api/
        base-api.ts
        commands-api.ts
        context-api.ts
        index.ts
        mcp-api.ts
        project-api.ts
        prompt-api.ts
        providers-api.ts
        settings-api.ts
        system-api.ts
        todo-api.ts
        usage-api.ts
      cloudflare-tunnel-manager.ts
      index.ts
      server-controller.ts
    session/
      index.ts
      session-manager.ts
    store/
      migrations/
        v0-to-v1.ts
        v1-to-v2.ts
        v10-to-v11.ts
        v11-to-v12.ts
        v12-to-v13.ts
        v13-to-v14.ts
        v14-to-v15.ts
        v2-to-v3.ts
        v3-to-v4.ts
        v4-to-v5.ts
        v5-to-v6.ts
        v6-to-v7.ts
        v7-to-v8.ts
        v8-to-v9.ts
        v9-to-v10.ts
      index.ts
      store.ts
    tasks/
      index.ts
      task-manager.ts
    telemetry/
      index.ts
      langfuse.ts
      open-telemetry.ts
      telemetry-manager.ts
    terminal/
      index.ts
      terminal-manager.ts
    utils/
      environment.ts
      file-system.ts
      index.ts
      python.ts
      web-scrapper.ts
    versions/
      index.ts
      versions-manager.ts
    constants.ts
    events-handler.ts
    index.ts
    ipc-handlers.ts
    logger.ts
    messages.ts
    progress-window.ts
    start-up.ts
  mcp-server/
    aider-desk-mcp-server.ts
  preload/
    index.d.ts
    index.ts
  renderer/
    src/
      api/
        browser-api.ts
      components/
        AgentSelector/
          AgentSelector.tsx
          index.ts
          McpServerSelectorItem.tsx
        common/
          DiffViewer/
            DiffViewer.scss
            DiffViewer.tsx
            index.tsx
            UDiffViewer.tsx
            utils.ts
          Accordion.tsx
          BaseDialog.tsx
          Button.tsx
          Checkbox.tsx
          CodeBlock.tsx
          CodeInline.tsx
          ConfirmDialog.tsx
          DatePicker.css
          DatePicker.tsx
          FileChip.tsx
          HtmlInfoDialog.tsx
          IconButton.tsx
          InfoIcon.tsx
          Input.tsx
          MarkdownInfoDialog.tsx
          ModalOverlayLayout.tsx
          MultiSelect.tsx
          RadioButton.tsx
          Section.tsx
          Select.tsx
          Slider.tsx
          StyledTooltip.tsx
          Table.tsx
          TextArea.tsx
          TriStateCheckbox.tsx
          VirtualTable.tsx
          WarningIcon.tsx
        ContextFiles/
          ContextFiles.css
          ContextFiles.tsx
          index.ts
        message/
          BashToolMessage.tsx
          CommandOutputMessageBlock.tsx
          CopyMessageButton.tsx
          CustomCommandBashBlock.tsx
          ExpandableMessageBlock.tsx
          FetchToolMessage.tsx
          FileEditToolMessage.tsx
          FileReadToolMessage.tsx
          FileWriteToolMessage.tsx
          GlobToolMessage.tsx
          GrepToolMessage.tsx
          GroupMessageBlock.tsx
          index.ts
          LoadingMessageBlock.tsx
          LogMessageBlock.tsx
          MessageBar.tsx
          MessageBlock.tsx
          Messages.tsx
          ReflectedMessageBlock.tsx
          ResponseMessageBlock.tsx
          SemanticSearchToolMessage.tsx
          SubagentToolMessage.tsx
          ThinkingAnswerBlock.tsx
          ToolMessageBlock.tsx
          UsageInfo.tsx
          UserMessageBlock.tsx
          utils.tsx
          VirtualizedMessages.tsx
        ModelLibrary/
          providers/
            AnthropicParameters.tsx
            AzureParameters.tsx
            BedrockParameters.tsx
            CerebrasParameters.tsx
            DeepseekParameters.tsx
            GeminiAdvancedSettings.tsx
            GeminiModelOverrides.tsx
            GeminiParameters.tsx
            GroqParameters.tsx
            index.ts
            LmStudioParameters.tsx
            OllamaParameters.tsx
            OpenAiAdvancedSettings.tsx
            OpenAiCompatibleParameters.tsx
            OpenAiModelOverrides.tsx
            OpenAiParameters.tsx
            OpenRouterAdvancedSettings.tsx
            OpenRouterModelOverrides.tsx
            OpenRouterParameters.tsx
            ProviderModels.tsx
            RequestyAdvancedSettings.tsx
            RequestyModelOverrides.tsx
            RequestyParameters.tsx
            VertexAiAdvancedSettings.tsx
            VertexAiModelOverrides.tsx
            VertexAIParameters.tsx
            ZaiPlanParameters.tsx
          index.ts
          ModelDialog.tsx
          ModelLibrary.tsx
          ModelParameterOverrides.tsx
          ModelTableSection.tsx
          ProviderCard.tsx
          ProviderHeader.tsx
          ProviderProfileCard.tsx
          ProviderProfileForm.tsx
          ProviderSelection.tsx
        onboarding/
          OnboardingProviderSetup.tsx
          OnboardingStepper.tsx
        project/
          AddFileDialog.tsx
          FileFinder.tsx
          MobileSidebar.tsx
          NoProjectsOpen.tsx
          OpenProjectDialog.tsx
          ProjectBar.tsx
          ProjectTabs.tsx
          ProjectView.tsx
          SidebarContent.tsx
          TodoListItem.tsx
          TodoWindow.tsx
        PromptField/
          CommandSuggestion.tsx
          EditFormatSelector.tsx
          index.ts
          InputHistoryMenu.tsx
          ModeSelector.tsx
          PromptField.tsx
        settings/
          agent/
            AgentProfileItem.tsx
            AgentRules.tsx
            AgentSettings.tsx
            GenericToolGroupItem.tsx
            GenericToolItem.tsx
            McpServerForm.tsx
            McpServerItem.tsx
            McpToolItem.tsx
          AboutSettings.tsx
          AiderSettings.tsx
          GeneralSettings.tsx
          LanguageSelector.tsx
          ServerSettings.tsx
          SettingsDialog.tsx
        terminal/
          Terminal.scss
          Terminal.tsx
          TerminalView.tsx
        usage/
          CostBreakdownChart.tsx
          MessageBreakdownChart.tsx
          ModelUsageDistributionChart.tsx
          TokenUsageTrendChart.tsx
          UsageDashboard.tsx
          UsageTable.tsx
          utils.ts
        AgentModelSelector.tsx
        AutocompletionInput.tsx
        CostInfo.tsx
        ModelSelector.tsx
        SessionDialog.tsx
        SessionsPopup.tsx
        TelemetryInfoDialog.tsx
      context/
        ApiContext.tsx
        ContextMenuContext.tsx
        ProjectSettingsContext.tsx
        SettingsContext.tsx
      contexts/
        ModelProviderContext.tsx
      hooks/
        useBooleanState.ts
        useClickOutside.ts
        useCustomCommands.ts
        useEffectiveEnvironmentVariable.ts
        useLmStudioModels.ts
        useOllamaModels.ts
        useOpenRouterModels.ts
        useOS.ts
        useParsedContent.ts
        useRequestyModels.ts
        useResponsive.ts
        useSearchText.tsx
        useVersions.ts
      i18n/
        index.ts
      icons/
        AnthropicIcon.tsx
        AzureIcon.tsx
        BedrockIcon.tsx
        CerebrasIcon.tsx
        DeepseekIcon.tsx
        GeminiIcon.tsx
        GroqIcon.tsx
        index.ts
        LmStudioIcon.tsx
        OllamaIcon.tsx
        OpenAiCompatibleIcon.tsx
        OpenAiIcon.tsx
        OpenRouterIcon.tsx
        RequestyIcon.tsx
        VertexAiIcon.tsx
        ZaiPlanIcon.tsx
      pages/
        Home.tsx
        Onboarding.tsx
        Settings.tsx
      themes/
        theme-aurora.scss
        theme-bw.scss
        theme-cappuccino.scss
        theme-charcoal.scss
        theme-dark.scss
        theme-forest.scss
        theme-lavender.scss
        theme-light.scss
        theme-midnight.scss
        theme-neon.scss
        theme-neopunk.scss
        theme-ocean.scss
        theme-serenity.scss
        themes.scss
      types/
        message.ts
      utils/
        notifications.ts
        routes.ts
        string-utils.ts
      App.tsx
      env.d.ts
      fonts.css
      main.css
      main.tsx
    index.html
    progress.html
electron-builder.yml
electron.vite.config.ts
package.json
tailwind.config.js

================================================================
Files
================================================================

================
File: resources/connector/connector.py
================
#!/usr/bin/env python
⋮----
class PromptContext
⋮----
def __init__(self, id: str, group=None)
⋮----
confirmation_result = None
⋮----
def wait_for_async(connector, coroutine)
⋮----
# Called from the main thread
task = connector.loop.create_task(coroutine)
result = connector.loop.run_until_complete(task)
⋮----
# Called from another thread
future = asyncio.run_coroutine_threadsafe(coroutine, connector.loop)
result = future.result()
⋮----
class PromptExecutor
⋮----
"""Manages prompt execution as concurrent asyncio tasks."""
⋮----
def __init__(self, connector)
⋮----
def get_executor(self)
⋮----
# create a new executor with 100 workers for 100 concurrent prompts
⋮----
async def run_prompt(self, prompt: str, prompt_context: PromptContext, mode=None, architect_model=None, messages=None, files=None, coder=None)
⋮----
prompt_coro = self._run_prompt_task(prompt, prompt_context, mode, architect_model, messages, files, coder)
⋮----
# Submit the coroutine to the executor, which turns it into a background Task.
# If a prompt with the same ID is already running, cancel it first.
⋮----
# Wrap the coroutine in a task that will handle its own cleanup.
task = self.connector.loop.create_task(self._execute_prompt_wrapper(prompt_context, prompt_coro))
⋮----
# This new method contains the logic that used to be in _run_prompt_sync and _run_prompt_async
async def _run_prompt_task(self, prompt: str, prompt_context: PromptContext, mode=None, architect_model=None, messages=None, files=None, coder=None)
⋮----
"""The actual prompt execution logic, designed to be run as a task."""
⋮----
# The core async logic from your old `_run_prompt_async`
# Now you can directly await async functions without any special handling.
⋮----
# This is important! The task must be allowed to handle its own cancellation.
⋮----
# Propagate the cancellation to ensure the wrapper knows about it.
⋮----
async def _stream_and_send_responses(self, coder, prompt_context, prompt_to_run, log_context, extra_response_data=None)
⋮----
extra_response_data = {}
⋮----
whole_content = ""
response_id = str(uuid.uuid4())
⋮----
queue = asyncio.Queue()
executor = self.get_executor()
⋮----
def _sync_worker()
⋮----
# Put chunk into queue, handling potential queue full
fut = asyncio.run_coroutine_threadsafe(queue.put(chunk), self.connector.loop)
fut.result() # Wait for it to be put in queue
asyncio.run_coroutine_threadsafe(queue.put(None), self.connector.loop).result() # Sentinel for end
⋮----
future = self.connector.loop.run_in_executor(executor, _sync_worker)
⋮----
chunk = await queue.get()
⋮----
response_payload = {
⋮----
async def _run_prompt_async(self, prompt: str, prompt_context: PromptContext, mode=None, architect_model=None, messages=None, files=None, coder=None)
⋮----
coder_provided = coder is not None
sequence_number = 0
⋮----
coder_model = self.connector.coder.main_model
running_model = self.connector.coder.main_model
⋮----
running_model = models.Model(architect_model, weak_model=coder_model.weak_model.name, editor_model=coder_model.name)
sequence_number = -1
⋮----
coder = clone_coder(
⋮----
# we are sending all the additional messages after the prompt finishes
⋮----
# we need to disable auto accept as this does not work properly with AiderDesk
⋮----
# setting usage report to None to avoid no attribute error
⋮----
# if there was no content, use the partial_response_content value (case for non streaming models)
whole_content = coder.partial_response_content
⋮----
def get_usage_report()
⋮----
# Send final response with complete data
response_data = {
⋮----
# Add commit info if there was one
⋮----
# Add diff if there was a commit
commits = f"{coder.last_aider_commit_hash}~1"
⋮----
diff = coder.repo.diff_commits(
⋮----
# Check for reflections
⋮----
# send newly added context files
⋮----
current_reflection = 0
⋮----
reflection_prompt = coder.reflected_message
⋮----
# await self.connector.send_update_context_files()
⋮----
# Send prompt-finished message
⋮----
# Send command outputs as context messages
⋮----
async def _execute_prompt_wrapper(self, prompt_context: PromptContext, prompt_coro: Coroutine[Any, Any, Any])
⋮----
"""
    Wrapper that executes the prompt coroutine and handles completion or cancellation.
    """
prompt_id = prompt_context.id
⋮----
# The main logic is now simply awaiting the coroutine
⋮----
# This is the clean way to handle cancellation.
⋮----
# You could add more specific cleanup logic here if needed.
⋮----
# Potentially re-raise or handle as needed
⋮----
# Always clean up the task from the active prompts dict.
⋮----
def _cleanup_prompt(self, prompt_id: str)
⋮----
"""Clean up completed or cancelled prompt."""
⋮----
def get_coder(self, prompt_id: str) -> Optional[Coder]
⋮----
"""Retrieve the coder instance for a given prompt ID."""
⋮----
async def cancel_prompt(self, prompt_id: str) -> bool
⋮----
"""Cancel a specific prompt task."""
⋮----
# Cancel the executor future if it exists
⋮----
future = self.active_futures[prompt_id]
⋮----
# Set the coder's IO to cancelled if it exists
⋮----
coder = self.active_coders[prompt_id]
⋮----
task = self.active_prompts[prompt_id]
⋮----
# The cancel() method schedules the task to be cancelled.
# It will raise CancelledError at the next `await`.
⋮----
# You can optionally wait for it to be fully cancelled.
⋮----
pass # Expected
⋮----
async def interrupt_all_prompts(self)
⋮----
"""Interrupt all active prompts."""
# Create a copy of keys to avoid issues with modifying the dict while iterating
prompt_ids = list(self.active_prompts.keys())
⋮----
def is_prompt_interrupted(self, prompt_id: str) -> bool
⋮----
"""Check if a prompt task has been cancelled."""
⋮----
# If it's not in active_prompts, it's finished or was cancelled.
⋮----
async def shutdown(self)
⋮----
"""Shutdown the executor by cancelling all active tasks."""
⋮----
async def run_editor_coder_stream(architect_coder, connector, prompt_context)
⋮----
# Use the editor_model from the main_model if it exists, otherwise use the main_model itself
editor_model = architect_coder.main_model.editor_model or architect_coder.main_model
# Generate a prompt info for the editor coder
editor_prompt_context = PromptContext(str(uuid.uuid4()), prompt_context.group)
⋮----
editor_coder = clone_coder(
⋮----
# Start the prompt execution (non-blocking)
⋮----
# Wait for completion by awaiting the task
⋮----
task = connector.prompt_executor.active_prompts[editor_prompt_context.id]
⋮----
pass # The task was cancelled, which is an expected way for it to end.
⋮----
class ConnectorInputOutput(InputOutput)
⋮----
def __init__(self, connector=None, prompt_context=None, **kwargs)
⋮----
def add_to_input_history(self, input_text)
⋮----
# handled by AiderDesk
⋮----
def tool_output(self, *messages, log_only=False, bold=False)
⋮----
# Extract current command from "Running" messages
⋮----
async def send_use_command_output()
⋮----
def is_warning_ignored(self, message)
⋮----
def tool_warning(self, message="", strip=True)
⋮----
def is_error_ignored(self, message)
⋮----
def tool_error(self, message="", strip=True)
⋮----
result = None
⋮----
result = "y"
⋮----
result = "n"
⋮----
# Reset the result
⋮----
# Create coroutine for emitting the question
async def ask_question()
⋮----
result = wait_for_async(self.connector, ask_question())
⋮----
# Get the specific coder for this prompt
coder_for_prompt = self.connector.prompt_executor.get_coder(self.prompt_context.id) if self.prompt_context else None
if coder_for_prompt: # Ensure we have a valid coder
# Process architect coder
⋮----
def reset_state(self, add_command_to_context=None)
⋮----
def interrupt_input(self)
⋮----
async def process_changes()
⋮----
# Generate a new prompt ID for file watcher changes
⋮----
# Wait for completion by awaiting the task
⋮----
task = self.connector.prompt_executor.active_prompts[prompt_context.id]
⋮----
pass # The task was cancelled, which is an expected way for it to end.
⋮----
prompt = self.connector.file_watcher.process_changes()
⋮----
changed_files = ", ".join(sorted(self.connector.file_watcher.changed_files))
group = {
prompt_context = PromptContext(str(uuid.uuid4()), group)
⋮----
def clone_coder(connector, coder, prompt_context=None, messages=None, files=None, **kwargs)
⋮----
coder = Coder.create(**kwargs)
⋮----
# Set messages from the provided data
⋮----
# Set files from the provided data
⋮----
file_path = file['path']
⋮----
file_path = os.path.join(connector.base_dir, file_path)
⋮----
def create_base_coder(connector)
⋮----
coder = cli_main(return_coder=True)
⋮----
def create_io(connector, coder, prompt_context=None)
⋮----
io = ConnectorInputOutput(
⋮----
class Connector
⋮----
def __init__(self, base_dir, watch_files=False, server_url="http://localhost:24337", reasoning_effort=None, thinking_tokens=None, confirm_before_edit=False)
⋮----
# Create initial coder for setup and non-prompt operations
⋮----
# Initialize prompt executor
⋮----
ignores = []
⋮----
def monkey_patch_coder_functions(self, coder, prompt_context=None)
⋮----
# self here is the Connector instance
# coder is the Coder instance
⋮----
original_lint_edited = coder.lint_edited
def _patched_lint_edited(coder_instance, fnames)
⋮----
# Add loading message before linting
⋮----
# Call the original Coder.lint_edited logic
result = original_lint_edited(fnames)
# Finish the loading message after linting
⋮----
# Replace the original lint_edited method with the patched version
⋮----
# Monkey patch prepare_to_edit to add confirmation if enabled
original_prepare_to_edit = coder.prepare_to_edit
def _patched_prepare_to_edit(coder_instance, edits)
⋮----
# Replace the original prepare_to_edit method with the patched version
⋮----
original_cmd_test = coder.commands.cmd_test
def _patched_cmd_test(coder_commands_instance, args)
⋮----
# self here is the Connector instance
# coder_commands_instance is the Commands instance (coder.commands)
⋮----
result = original_cmd_test(args)
⋮----
# Replace the original run_test method with the patched version
⋮----
# Initialize command_outputs list if it doesn't exist
⋮----
original_run_shell_commands = coder.run_shell_commands
def _patched_run_shell_commands(coder_instance)
⋮----
# Call the original run_shell_commands method
result = original_run_shell_commands()
# Store the result in command_outputs list
⋮----
# Replace the original run_shell_commands method with the patched version
⋮----
def monkey_patch_repo_functions(self, repo, prompt_context=None)
⋮----
# patch repo.get_commit_message to send a loading message while generating commit message
original_get_commit_message = repo.get_commit_message
⋮----
def _patched_get_commit_message(repo_instance, diffs, context, user_language=None)
⋮----
result = original_get_commit_message(diffs, context, user_language)
⋮----
def _register_events(self)
⋮----
@self.sio.event
    async def connect()
⋮----
@self.sio.on("message")
    async def on_message(data)
⋮----
@self.sio.event
    async def disconnect()
⋮----
async def on_connect(self)
⋮----
"""Handle connection event."""
⋮----
def _tokenize_files_sync(self, root, rel_fnames, addable_rel_fnames, encoding, abs_read_only_fnames)
⋮----
"""Synchronous helper function for file tokenization."""
⋮----
auto_completer = AutoCompleter(
⋮----
# Return tokenized words
⋮----
async def on_message(self, data)
⋮----
async def on_disconnect(self)
⋮----
"""Handle disconnection event."""
⋮----
# Shutdown prompt executor
⋮----
async def connect(self)
⋮----
"""Connect to the server."""
⋮----
async def wait(self)
⋮----
"""Wait for events."""
⋮----
async def start(self)
⋮----
async def send_action(self, action, with_delay = True)
⋮----
async def send_log_message(self, level, message, finished=False, prompt_context=None)
⋮----
payload = {
⋮----
async def process_message(self, message)
⋮----
"""Process incoming message and return response"""
⋮----
action = message.get('action')
⋮----
prompt = message.get('prompt')
mode = message.get('mode')
architect_model = message.get('architectModel')
prompt_context_data = message.get('promptContext')
messages = message.get('messages', [])
files = message.get('files', [])
⋮----
prompt_context = PromptContext(prompt_context_data.get('id'), prompt_context_data.get('group'))
⋮----
confirmation_result = message.get('answer')
⋮----
main_model = message.get('mainModel')
weak_model = message.get('weakModel')
edit_format = message.get('editFormat')
environment_variables = message.get('environmentVariables')
⋮----
model = models.Model(main_model, weak_model=weak_model)
⋮----
edit_format = "diff"
⋮----
command = message.get('command')
⋮----
# Interrupt all active prompts
⋮----
edits = message.get('edits')
⋮----
edit_tuples = [(edit['path'], edit['original'], edit['updated']) for edit in edits]
⋮----
main_model = models.Model(self.coder.main_model.name, weak_model=self.coder.main_model.weak_model.name)
⋮----
messages = message.get('messages')
files = message.get('files')
⋮----
async def update_environment_variables(self, environment_variables)
⋮----
"""Update environment variables for the Aider process"""
⋮----
# Update the environment variables in the current process
⋮----
async def run_command(self, command, messages, files)
⋮----
command_coder = clone_coder(self, self.coder, messages=messages, files=files)
⋮----
repo_map = command_coder.repo_map.get_repo_map(set(), command_coder.get_all_abs_files()) if command_coder.repo_map else None
⋮----
parts = command.split()
valid_values = ['high', 'medium', 'low', 'minimal', 'none']
⋮----
# Safely remove 'reasoning_effort' if it exists
⋮----
# for /reset and /drop, we only need to send the initial context files
⋮----
# run the command
⋮----
# reset flags
⋮----
async def send_autocompletion(self, files)
⋮----
# Use all files from files parameter and convert to relative paths
rel_fnames = []
⋮----
file_path = f['path']
# Convert to relative path if it's an absolute path
⋮----
relative_path = os.path.relpath(file_path, self.base_dir)
⋮----
relative_path = file_path
⋮----
all_models = sorted(set(models.fuzzy_match_models("") + [model_settings.name for model_settings in models.MODEL_SETTINGS]))
⋮----
# Run tokenization in a separate thread
⋮----
# Cancel any previous tokenization task if it's still running
⋮----
async def tokenize_and_send()
⋮----
tokenized_words = await asyncio.to_thread(
⋮----
# Task was cancelled, do nothing.
⋮----
# else: The initial message with just filenames is sufficient if too many files
⋮----
async def send_repo_map(self)
⋮----
repo_map = self.coder.repo_map.get_repo_map(set(), self.coder.get_all_abs_files())
⋮----
# Remove the prefix before sending
prefix = self.coder.gpt_prompts.repo_content_prefix
⋮----
repo_map = repo_map[len(prefix):]
⋮----
def get_context_files(self, coder=None)
⋮----
coder = self.coder
⋮----
def get_rel_fname(fname)
⋮----
editable_files = [get_rel_fname(fname) for fname in coder.abs_fnames]
read_only_files = [get_rel_fname(fname) for fname in coder.abs_read_only_fnames]
⋮----
async def send_add_context_message(self, role, content)
⋮----
async def send_add_context_files(self, coder=None)
⋮----
context_files = self.get_context_files(coder)
⋮----
async def send_update_context_files(self, coder=None)
⋮----
async def send_current_models(self)
⋮----
error = None
info = self.coder.main_model.info
⋮----
error = "Missing keys for the model: " + ", ".join(self.coder.main_model.missing_keys)
⋮----
async def send_tokens_info(self, messages, files)
⋮----
cost_per_token = self.coder.main_model.info.get("input_cost_per_token") or 0
info = {
⋮----
# system messages
main_sys = self.coder.fmt_system_prompt(self.coder.gpt_prompts.main_system)
⋮----
msgs = [
tokens = self.coder.main_model.token_count(msgs)
⋮----
# Convert messages to the format expected by token_count
msgs = [dict(role=msg['role'], content=msg['content']) for msg in messages]
⋮----
tokens = 0
⋮----
# Convert context_files to absolute file paths like coder does
abs_fnames = set()
abs_read_only_fnames = set()
⋮----
file_path = os.path.join(self.base_dir, file_path)
⋮----
all_abs_files = self.coder.get_all_abs_files()
other_files = set(all_abs_files) - abs_fnames
⋮----
repo_content = self.coder.repo_map.get_repo_map(abs_fnames, other_files)
⋮----
tokens = self.coder.main_model.token_count(repo_content)
⋮----
fence = "`" * 3
⋮----
# Process the provided context files
⋮----
# Skip directories
⋮----
relative_fname = self.coder.get_rel_fname(file_path)
content = self.coder.io.read_text(file_path)
⋮----
tokens = self.coder.main_model.token_count_for_image(file_path)
⋮----
# approximate
content = f"{relative_fname}\n{fence}\n" + content + "{fence}\n"
tokens = self.coder.main_model.token_count(content)
⋮----
def main(argv=None)
⋮----
argv = sys.argv[1:]
⋮----
# Parse command line arguments
parser = argparse.ArgumentParser(description="AiderDesk Connector")
⋮----
args, _ = parser.parse_known_args(argv) # Use parse_known_args to ignore unknown args
⋮----
# Get environment variables
server_url = os.getenv("CONNECTOR_SERVER_URL", "http://localhost:24337")
base_dir = os.getenv("BASE_DIR", os.getcwd())
confirm_before_edit = os.getenv("CONNECTOR_CONFIRM_BEFORE_EDIT", "0") == "1"
⋮----
# Telemetry
⋮----
# Create connector instance
connector = Connector(
⋮----
# Start the connector
⋮----
def setup_telemetry()
⋮----
langfuse_public_key = os.getenv("LANGFUSE_PUBLIC_KEY")
langfuse_secret_key = os.getenv("LANGFUSE_SECRET_KEY")
langfuse_host = os.getenv("LANGFUSE_HOST", "https://cloud.langfuse.com")
⋮----
# Set OpenRouter site and app name

================
File: scripts/before-pack.js
================
console.log(`Preparing uv binary for macOS ${arch}...`);
⋮----
const sourceDir = path.join(__dirname, '..', 'resources', `macos-${arch}`);
const targetDir = path.join(__dirname, '..', 'resources', 'macos');
const sourceFile = path.join(sourceDir, 'uv');
const targetFile = path.join(targetDir, 'uv');
⋮----
if (!fs.existsSync(targetDir)) {
fs.mkdirSync(targetDir, { recursive: true });
⋮----
if (fs.existsSync(sourceFile)) {
fs.copyFileSync(sourceFile, targetFile);
console.log(`uv binary for macOS ${arch} copied successfully.`);
⋮----
console.error(`uv binary for macOS ${arch} not found at ${sourceFile}`);

================
File: scripts/download-uv.mjs
================
const streamPipeline = promisify(pipeline);
⋮----
async function downloadAndExtractUVForPlatform(target) {
⋮----
const extractPath = join(RESOURCES_DIR, extractSubdir);
const uvDestinationPath = join(extractPath, uvExeName);
⋮----
// Ensure the specific platform directory exists
if (!existsSync(extractPath)) {
mkdirSync(extractPath, { recursive: true });
⋮----
// Check if uv already exists for this platform
if (existsSync(uvDestinationPath)) {
console.log(`uv executable for ${platform}-${arch} already exists at ${uvDestinationPath}. Skipping download.`);
⋮----
const tempFilePath = join(RESOURCES_DIR, filename);
console.log(`Downloading uv for ${platform}-${arch} from ${url} to ${tempFilePath}`);
⋮----
const response = await fetch(url);
⋮----
throw new Error(`Failed to fetch ${url}: ${response.statusText}`);
⋮----
await streamPipeline(response.body, createWriteStream(tempFilePath));
⋮----
console.log(`Downloaded ${filename}. Extracting...`);
⋮----
if (filename.endsWith('.tar.gz')) {
await extract({
⋮----
strip: 0 // Do not strip any components from the file path initially
⋮----
// The uv executable might be inside a directory like uv-x86_64-unknown-linux-gnu/uv
const extractedDirName = filename.replace('.tar.gz', '');
const uvInExtractedDir = join(extractPath, extractedDirName, uvExeName);
const uvAtTopLevel = join(extractPath, uvExeName);
⋮----
if (existsSync(uvInExtractedDir)) {
⋮----
unlinkSync(uvDestinationPath);
⋮----
renameSync(uvInExtractedDir, uvDestinationPath);
console.log(`Moved ${uvExeName} to ${uvDestinationPath}`);
// Clean up the extracted directory
rmdirSync(join(extractPath, extractedDirName), { recursive: true });
} else if (existsSync(uvAtTopLevel)) {
// If not found in extractedDir, check the top level (for older releases or different structures)
⋮----
renameSync(uvAtTopLevel, uvDestinationPath);
⋮----
throw new Error(`Could not find ${uvExeName} executable in the extracted archive for ${platform}.`);
⋮----
} else if (filename.endsWith('.zip')) {
const zip = new AdmZip(tempFilePath);
zip.extractAllTo(extractPath, true); // Overwrite existing files
⋮----
console.log(`uv for ${platform}-${arch} downloaded and extracted successfully.`);
⋮----
console.error(`Error downloading or extracting uv for ${platform}-${arch}: ${error.message}`);
// Do not exit on error for one platform, try others.
⋮----
// Clean up the temporary archive file
if (existsSync(tempFilePath)) {
unlinkSync(tempFilePath);
⋮----
async function downloadAllUVs() {
// Ensure the base resources directory exists
if (!existsSync(RESOURCES_DIR)) {
mkdirSync(RESOURCES_DIR, { recursive: true });
⋮----
await downloadAndExtractUVForPlatform(target);
⋮----
console.log("All necessary uv executables processed.");
⋮----
// After downloading all, copy the correct one for the current platform if it's macOS
⋮----
const sourceDir = join(RESOURCES_DIR, `macos-${arch}`);
const targetDir = join(RESOURCES_DIR, 'macos');
const sourceFile = join(sourceDir, 'uv');
const targetFile = join(targetDir, 'uv');
⋮----
if (!existsSync(targetDir)) {
mkdirSync(targetDir, { recursive: true });
⋮----
if (existsSync(sourceFile)) {
console.log(`Copying uv for local development on macOS ${arch}...`);
fs.copyFileSync(sourceFile, targetFile);
console.log('uv copied successfully for local development.');
⋮----
console.error(`uv binary for macOS ${arch} not found at ${sourceFile}, skipping copy for local development.`);
⋮----
downloadAllUVs();

================
File: src/common/locales/en.json
================
{
  "languages": {
    "en": "English",
    "zh": "中文"
  },
  "common": {
    "settings": "Settings",
    "cancel": "Cancel",
    "save": "Save",
    "delete": "Delete",
    "edit": "Edit",
    "add": "Add",
    "remove": "Remove",
    "close": "Close",
    "confirm": "Confirm",
    "back": "Back",
    "next": "Next",
    "finish": "Finish",
    "loading": "Loading...",
    "startingUp": "Starting up...",
    "loadingProjectSettings": "Loading project settings...",
    "error": "Error",
    "success": "Success",
    "warning": "Warning",
    "info": "Info",
    "yes": "Yes",
    "no": "No",
    "open": "Open",
    "openProject": "Open Project",
    "lock": "Lock",
    "default": "Default",
    "suffix.billion": "B",
    "suffix.million": "M",
    "suffix.thousand": "K",
    "ok": "OK",
    "collapse": "Collapse"
  },
  "search": {
    "placeholder": "Search...",
    "previousResult": "Previous result (SHIFT + F3)",
    "nextResult": "Next result (F3)"
  },
  "onboarding": {
    "title": "Welcome to AiderDesk",
    "description": "AiderDesk is your desktop companion for AI-assisted coding. This application brings the power of Aider's AI coding assistant to a user-friendly interface, helping you:",
    "skipForNow": "Skip for now",
    "finish": "Finish Setup",
    "features": {
      "1": "Manage multiple coding projects",
      "2": "Track your AI usage and costs",
      "3": "Interact with AI models in a structured way",
      "4": "Visualize and manage your code files",
      "5": "Use agentic flow for automated coding tasks and connection to MCP servers"
    },
    "getStarted": "Let's get started by configuring your Aider settings.",
    "steps": {
      "welcome": "Welcome",
      "connectModel": "Connect AI Model",
      "language": "Language",
      "aider": "Aider",
      "agent": "AI Agent",
      "providers": "Providers",
      "finish": "Finish"
    },
    "language": {
      "title": "Choose Your Language",
      "description": "Select your preferred language for the application interface."
    },
    "aider": {
      "title": "Configure Aider",
      "description": "To get started, please configure your Aider settings. You'll need to:",
      "options": {
        "1": "Add your API keys for the LLM provider you want to use",
        "2": "Set any additional options for Aider",
        "3": ".env and .aider.conf.yaml are also read as they would with Aider"
      },
      "configureLater": "You can also do that later in the Settings.",
      "fineTuneTitle": "Fine-Tune Aider (Optional)",
      "fineTuneDescription": "Advanced users can configure additional Aider settings and environment variables. This step is completely optional and can be safely skipped.",
      "fineTuneNote": "Note: These settings are for advanced users who want to customize Aider's behavior. Most users can skip this step and configure these later in Settings if needed."
    },
    "providers": {
      "title": "Model Providers",
      "description": "Configure your LLM providers for use with both Aider and Agent modes. You can set up API keys and additional settings for various providers.",
      "configureLater": "You can configure these later in the Settings if you prefer.",
      "connectTitle": "Connect Your AI Model",
      "connectDescription": "AiderDesk supports multiple AI providers including OpenAI, Anthropic, Google Gemini, and more. Your API keys are stored securely on your local machine and never shared.",
      "advancedUsersNote": "Advanced users: You can also configure providers using environment variables in the next step's Aider configuration section.",
      "advancedSettings": "Advanced settings",
      "order": "Order",
      "orderDescription": "List of provider slugs to try in order (e.g. [\"anthropic\", \"openai\"]).",
      "allowFallbacks": "Allow Fallbacks",
      "allowFallbacksDescription": "Whether to allow backup providers when the primary is unavailable.",
      "dataCollection": "Data Collection",
      "dataCollectionDescription": "Control whether to use providers that may store data.",
      "only": "Only",
      "onlyDescription": "List of provider slugs to allow.",
      "ignore": "Ignore",
      "ignoreDescription": "List of provider slugs to skip.",
      "quantizations": "Quantizations",
      "quantizationsDescription": "List of quantization levels to filter by (e.g. [\"int4\", \"int8\"]).",
      "sort": "Sort",
      "sortDescription": "Sort providers by price or throughput.",
      "requireParameters": "Require Parameters",
      "requireParametersDescription": "Only use providers that support all parameters in your request.",
      "setupLater": "You can also configure the providers and models in Model Library later."
    },
    "agent": {
      "title": "Meet Your AI Agent",
      "description": "Discover the power of autonomous AI assistance with AiderDesk's Agent mode. Your AI agent can work independently to complete complex tasks.",
      "capabilities": "Agent Capabilities:",
      "autonomousPlanning": "Autonomous Task Planning:",
      "autonomousPlanningDesc": "Breaks down complex requests into manageable steps and executes them systematically.",
      "toolUse": "Tool Use:",
      "toolUseDesc": "Leverages various tools for file operations, web searches, and code analysis.",
      "extensible": "Extensible via MCP:",
      "extensibleDesc": "Connect to Model Context Protocol servers for enhanced capabilities.",
      "configureAgent": "Configure Agent",
      "finishLater": "Finish Setup (Configure Agent Later)",
      "configureTitle": "Configure Your Agent (Optional)",
      "configureDescription": "Customize your default agent profile to match your workflow. You can adjust settings like tool permissions, context preferences, and behavior rules."
    },
    "complete": {
      "title": "Setup Complete!",
      "description": "Congratulations! You've successfully set up AiderDesk. You're now ready to start coding with AI assistance.",
      "ready": "Click 'Finish Setup' to begin your coding journey.",
      "success": "Onboarding completed successfully! Welcome to AiderDesk."
    },
    "errors": {
      "navigationFailed": "Navigation failed. Please try again.",
      "finishFailed": "Failed to complete onboarding. Please try again."
    }
  },
  "noProjectsOpen": {
    "welcome": "Welcome to",
    "description": "To begin, open a project directory. This will enable Aider to work with your code."
  },
  "home": {
    "title": "Home",
    "noProjectsOpen": "No Projects Open",
    "openProject": "Open Project",
    "addFile": "Add File",
    "projectView": "Project View",
    "recentProjects": "Recent projects"
  },
  "tips": {
    "multipleProjects": "Tip: You can open multiple projects and switch between them using the tabs at the top (or CTRL+Tab)."
  },
  "mcpServer": {
    "addServer": "Add MCP Server",
    "editServer": "Edit MCP Server: {{name}}",
    "serverConfigJson": "Server Config JSON",
    "pasteServerAs": "Paste your server as:\n\n{{example}}\n\nor\n\n{{exampleNoParent}}\n\nor\n\n{{exampleBare}}",
    "invalidConfig": "Invalid configuration",
    "emptyConfig": "Configuration cannot be empty",
    "configHint": "You can add multiple servers at once by pasting a JSON object with multiple server configurations.\n\nYou can use ${projectDir} in env and args to reference the current project directory.",
    "viewExamples": "View Examples"
  },
  "model": {
    "label": "Model",
    "labelMultiple": "Models",
    "selectLabel": "Model",
    "placeholder": "e.g. anthropic/claude-sonnet-4-20250514",
    "chooseModelsToAdd": "Choose models to add...",
    "library": {
      "all": "All"
    }
  },
  "modelLibrary": {
    "title": "Model Library",
    "search": "Search Models",
    "providers": "Providers",
    "all": "All",
    "selectProvider": "Select a Provider to Configure",
    "profileForm": {
      "title": "Configure Profile for {{provider}} Provider",
      "name": "Profile Name",
      "id": "Provider ID (prefix)",
      "parameters": "Provider Parameters",
      "headers": "Custom Headers",
      "headerKey": "Header Name",
      "headerValue": "Header Value",
      "addHeader": "Add Header",
      "test": "Test & Load Models"
    },
    "noProvidersConfigured": "No providers configured yet",
    "addProvider": "Add Provider",
    "addFirstProvider": "Add Your First Provider",
    "searchPlaceholder": "Search models...",
    "showingAllModels": "Showing {{count}} models from all providers",
    "showingModelsFromProviders": "Showing {{modelCount}} models from {{providerCount}} providers",
    "noModelsMatchSearch": "No models match your search",
    "selectProvidersToViewModels": "Select provider profiles above to view their models",
    "noModelsFromSelectedProviders": "No models available from selected providers",
    "hidden": "Hidden",
    "deleteProfileTitle": "Delete Profile",
    "deleteProfileConfirm": "Are you sure you want to delete the profile '{{name}}'?",
    "addModel": "Add Model",
    "editModel": "Edit Model",
    "provider": "Provider",
    "modelId": "Model ID",
    "modelIdPlaceholder": "e.g. custom-gpt-4-turbo",
    "maxInputTokens": "Context Window",
    "maxOutputTokens": "Max Output Tokens",
    "cacheWrites": "Cache Writes",
    "cachedInput": "Cached Input",
    "inputCost": "Input",
    "outputCost": "Output",
    "inputTokenCost": "Input Cost per 1M Tokens",
    "outputTokenCost": "Output Cost per 1M Tokens",
    "cacheReadInputTokenCost": "Cache Read Cost per 1M Tokens",
    "cacheWriteInputTokenCost": "Cache Write Cost per 1M Tokens",
    "supportsTools": "Supports Tools",
    "errors": {
      "idRequired": "Model ID is required",
      "providerRequired": "Provider is required",
      "invalidTokenCount": "Token count must be a positive number",
      "invalidCost": "Cost must be a non-negative number",
      "duplicateId": "Provider ID already exists"
    },
    "overrides": {
      "title": "Provider Overrides",
      "resetToDefaults": "Clear overrides",
      "overridesProviderParameters": "Overrides some provider parameters"
    }
  },
  "openai": {
    "apiKey": "API Key",
    "baseUrl": "Base URL",
    "modelName": "Model Name",
    "baseUrlPlaceholder": "e.g. http://localhost:8080/v1",
    "reasoningEffort": "Reasoning Effort",
    "reasoningEffortNone": "None",
    "reasoningEffortMinimal": "Minimal",
    "reasoningEffortLow": "Low",
    "reasoningEffortMedium": "Medium",
    "reasoningEffortHigh": "High"
  },
  "ollama": {
    "baseUrl": "Base URL",
    "baseUrlPlaceholder": "e.g. http://localhost:11434/api"
  },
  "anthropic": {
    "apiKey": "API Key"
  },
  "gemini": {
    "apiKey": "API Key",
    "customBaseUrl": "Custom Base URL",
    "thinkingBudget": "Thinking budget (tokens)",
    "includeThoughts": "Include thoughts",
    "includeThoughtsTooltip": "When enabled, the model's internal thought process will be included in the conversation.",
    "useSearchGrounding": "Use Search grounding",
    "useSearchGroundingTooltip": "When enabled, the model will use search results to ground its responses, improving accuracy and relevance.",
    "useSearchGroundingWarning": "When enabled, Gemini models are not able to use tools, e.g. Power tools, MCP tools, etc."
  },
  "groq": {
    "apiKey": "API Key",
    "modelPlaceholder": "e.g. moonshotai/kimi-k2-instruct"
  },
  "deepseek": {
    "apiKey": "API Key"
  },
  "bedrock": {
    "apiKey": "API Key",
    "region": "Region",
    "regionPlaceholder": "e.g. us-east-1 or AWS_REGION env",
    "accessKeyId": "Access Key ID",
    "accessKeyIdTooltip": "AWS access key ID. Can be left empty if AWS_PROFILE is set in environment.",
    "secretAccessKey": "Secret Access Key",
    "secretAccessKeyTooltip": "AWS secret access key. Can be left empty if AWS_PROFILE is set in environment.",
    "sessionToken": "Session Token",
    "sessionTokenTooltip": "Optional session token for temporary credentials."
  },
  "cerebras": {
    "apiKey": "API Key"
  },
  "openRouter": {
    "apiKey": "API Key",
    "modelPlaceholder": "e.g. anthropic/claude-3.7-sonnet"
  },
  "requesty": {
    "apiKey": "API Key",
    "modelPlaceholder": "e.g. claude-4-sonnet",
    "autoCacheLabel": "Use Auto Cache",
    "autoCacheTooltip": "This will instruct the router to attempt to cache the response from the provider. If a similar request has been cached previously, it might be served from the cache (depending on the provider’s caching strategy and TTL)."
  },
  "lmstudio": {
    "baseUrl": "Base URL",
    "baseUrlPlaceholder": "e.g. http://localhost:1234/v1"
  },
  "zaiPlan": {
    "apiKey": "API Key"
  },
  "azure": {
    "apiKey": "API Key",
    "resourceName": "Resource Name",
    "apiVersion": "API Version",
    "addCustomModelInfo": "Models cannot be loaded automatically for Azure provider and you need to add them manually using ”+ Add Model”, ensuring the model name matches the deployment name."
  },
  "providers": {
    "anthropic": "Anthropic",
    "bedrock": "Bedrock",
    "cerebras": "Cerebras",
    "deepseek": "Deepseek",
    "gemini": "Gemini",
    "groq": "Groq",
    "lmstudio": "LM Studio",
    "ollama": "Ollama",
    "openai": "OpenAI",
    "openai-compatible": "OpenAI Compatible",
    "openrouter": "OpenRouter",
    "requesty": "Requesty",
    "vertex-ai": "Vertex AI",
    "zai-plan": "Z.AI Coding Plan",
    "azure": "Azure"
  },
  "select": {
    "placeholder": "Select an option",
    "loadingSessions": "Loading sessions..."
  },
  "settings": {
    "title": "Settings",
    "tabs": {
      "general": "General",
      "providers": "Providers",
      "aider": "Aider",
      "agent": "Agent",
      "server": "Server",
      "about": "About"
    },
    "gui": "Appearance",
    "startup": {
      "title": "Start Up",
      "emptySession": "Start with empty session",
      "lastSession": "Load last session",
      "specificSession": "Load specific session"
    },
    "language": "Language",
    "notifications": {
      "title": "Notifications"
    },
    "agent": {
      "mcpServers": "MCP Servers",
      "provider": "Provider",
      "providerSettings": "Provider Settings",
      "context": "Context",
      "runSettings": "Parameters",
      "maxIterations": "Max Iterations",
      "minTimeBetweenToolCalls": "Min Time Between Tool Calls (ms)",
      "maxTokens": "Max Tokens",
      "temperature": "Temperature",
      "customInstructions": "Additional Rules",
      "rules": "Rules",
      "rulesInfo": "You can use Rules to add specific instructions for specific MCP servers or to control flow of the agent.",
      "ruleFilesInfo": "Any file in your project's <file>.aider-desk/rules</file> directory is automatically included in the Rules. See example <a>here</a>.",
      "noServersConfigured": "No MCP servers configured.",
      "computationalResources": "Maximum number of iterations for the agent per run. Helps control computational resources.",
      "rateLimiting": "Sets the minimum time between tool calls to prevent rate limiting (e.g. for Brave or other API-constrained services).",
      "temperatureTooltip": "Controls randomness in responses. Lower values (0.0-0.3) make responses more focused and deterministic, higher values (0.7-1.0) make them more creative and varied.",
      "tokensPerResponse": "Maximum number of tokens the agent can use per response.",
      "addMcpServer": "Add",
      "editConfig": "Edit Config",
      "editMcpServersConfig": "Edit MCP Servers Config",
      "reloadServers": "Reload",
      "powerToolsTooltip": "Allows the agent to use tools for direct file operations (read, write, edit), searching (glob, grep, semantic search), and executing shell commands (bash).",
      "aiderToolsTooltip": "Agent can use Aider to perform add/drop context files actions and run prompts.",
      "useAiderTools": "Use Aider tools",
      "usePowerTools": "Use Power tools",
      "useTodoTools": "Use Todo tools",
      "includeContextFiles": "Include context files",
      "includeFilesTooltip": "Adds content of context files into the chat of agent. This will increase token usage.",
      "includeRepoMap": "Include repository map",
      "includeRepoMapTooltip": "Include the repository map from Aider in the agent's context. This can help the agent understand the project structure, but will increase token usage.",
      "autoApprove": "Auto approve",
      "selectOrCreateProfile": "Select or create new agent profile",
      "newProfileName": "New Profile",
      "envVarPlaceholder": "{{envVar}}",
      "envVarFoundPlaceholder": "Found in: {{source}}",
      "createNewProfile": "Create New",
      "genericTools": "Tools",
      "noGenericToolsConfigured": "No tools configured.",
      "todoTools": "Todo tools",
      "includeTodoToolsTooltip": "Allows the agent to manage a list of todo items, including setting, getting, updating, and clearing them.",
      "subagent": {
        "title": "Subagent",
        "enableAsSubagent": "Enable as Subagent",
        "enableAsSubagentInformation": "When enabled, this profile is available as a subagent to other agents.",
        "canUseSubagents": "Can use Subagents",
        "canUseSubagentsInformation": "When enabled, this agent can use subagents.",
        "contextMemory": "Context memory",
        "contextMemoryTooltip": "Controls how much of the previous conversation context is remembered by the subagent. 'Full Context' maintains all previous subagents history, 'Last Message' only uses the final messages from previous subagent runs, and 'Off' starts fresh each time.",
        "contextMemory.off": "Off",
        "contextMemory.fullContext": "Full Context",
        "contextMemory.lastMessage": "Last Message",
        "description": "Description",
        "descriptionPlaceholder": "Describe this subagent's purpose, capabilities, and specialization and when this subagent should be invoked",
        "systemPrompt": "System Prompt",
        "systemPromptPlaceholder": "Your subagent's system prompt goes here. This can be multiple paragraphs and should clearly define the subagent's role, capabilities, and approach to solving problems.",
        "invocationMode": "Invocation",
        "invocationModeOnDemand": "On demand",
        "invocationModeOnDemandInformation": "Subagent is only used when explicitly requested by the user.",
        "invocationModeAutomatic": "Automatic",
        "invocationModeAutomaticInformation": "Subagent can be automatically invoked when appropriate by the agent.",
        "statusDisabled": "Disabled",
        "statusOnDemand": "On-demand",
        "statusAutomatic": "Automatic",
        "descriptionRequiredForAutomatic": "Description needs to be set in order to use this subagent automatically, otherwise the subagent can only be used when explicitly requested by the user.",
        "on-demand": "Used as subagent on user demand",
        "automatic": "Used as subagent automatically"
      }
    },
    "aider": {
      "options": "Options",
      "optionsPlaceholder": "e.g. --no-auto-commits --cache-prompts",
      "autoCommits": "Auto commit of LLM changes",
      "cachingEnabled": "Enable prompt caching",
      "watchFiles": "Watch files for changes",
      "environmentVariables": "Environment Variables",
      "envVarsPlaceholder": "#################\n# LLM parameters:\n#\n# Include xxx_API_KEY parameters and other params needed for your LLMs.\n# See https://aider.chat/docs/llms.html for details.\n\n## OpenAI\n#OPENAI_API_KEY=\n\n## Anthropic\n#ANTHROPIC_API_KEY=",
      "optionsDocumentation": "Check the documentation for available options at",
      "envVarsDocumentation": "Check the documentation for environment variables at",
      "context": "Context",
      "addRuleFiles": "Add rule files from project's <file>.aider-desk/rules</file> directory as read-only files.",
      "confirmBeforeEdit": "Confirm before editing files"
    },
    "common": {
      "showSecrets": "Show Secrets",
      "learnMore": "Learn more"
    },
    "notificationsEnabled": "Notifications enabled",
    "zoom": "Zoom level",
    "theme": "Theme",
    "font": "Font",
    "fontSize": "Font size",
    "fontOptions": {
      "Sono": "Sono (Default)",
      "PlayfairDisplay": "Playfair Display",
      "SpaceGrotesk": "Space Grotesk",
      "GoogleSansCode": "Google Sans Code",
      "JetBrainsMono": "JetBrains Mono",
      "RobotoMono": "Roboto Mono",
      "SourceCodePro": "Source Code Pro",
      "SpaceMono": "Space Mono",
      "UbuntuMono": "Ubuntu Mono"
    },
    "themeOptions": {
      "dark": "Default (Dark)",
      "light": "Default (Light)",
      "ocean": "Ocean",
      "forest": "Forest",
      "lavender": "Lavender",
      "bw": "Black & White",
      "midnight": "Midnight",
      "neon": "Neon",
      "neopunk": "Neopunk",
      "charcoal": "Charcoal",
      "aurora": "Aurora",
      "serenity": "Serenity",
      "cappuccino": "Cappuccino"
    },
    "aiderRestartConfirm": {
      "title": "Restart Required",
      "message": "Changes to Aider options or environment variables require a restart of the Aider session to take effect. Would you like to restart now?",
      "restartNow": "Restart now",
      "later": "I'll do it later"
    },
    "models": {
      "title": "Model Providers",
      "description": "Configure your LLM providers for use with both Aider and Agent modes. Click on a provider card to configure API key and additional settings.",
      "configured": "Configured",
      "notConfigured": "Not configured",
      "agentOnly": "Agent only",
      "showAllProviders": "Show All Providers",
      "additionalProvidersInfo": "You can configure additional LLM providers for Aider by setting environment variables in the <aiderTab>Aider settings</aiderTab>."
    },
    "vertexAi": {
      "project": "Project",
      "projectPlaceholder": "Enter your Google Cloud project ID",
      "location": "Location",
      "locationPlaceholder": "Enter your Google Cloud location",
      "credentials": "Google Cloud Credentials (optional)",
      "credentialsPlaceholder": "Enter your Google Cloud credentials JSON"
    },
    "about": {
      "version": "Version",
      "notAvailable": "N/A",
      "checkForUpdates": "Check for updates",
      "newAiderVersionAvailable": "New Aider version ({{version}}) is available - restart AiderDesk to install.",
      "updateAvailable": "Update is available",
      "downloadUpdate": "Download",
      "downloadingUpdate": "Downloading update",
      "newAiderDeskVersionReady": "A new version is ready. Restart AiderDesk to apply the update.",
      "downloadAutomatically": "Download update automatically",
      "releaseNotes": "Release notes",
      "openLogsDirectory": "Open logs directory",
      "openLogsError": "Error opening a log directory"
    },
    "telemetry": {
      "title": "Telemetry"
    },
    "promptBehavior": {
      "title": "Prompt Behavior",
      "showSuggestions": "Show suggestions",
      "automaticallyWhileTyping": "Automatically while typing",
      "onlyWhenTabPressed": "Only when TAB key is pressed",
      "suggestionsDelay": "Suggestions delay",
      "requireCommandConfirmation": "Require confirmation for commands",
      "addCommand": "/add",
      "readOnlyCommand": "/read-only",
      "modelCommand": "/model",
      "modeSwitchingCommands": "Mode commands (/code, /agent, ...)",
      "keyBindings": "Key bindings",
      "useVimBindings": "Use Vim bindings",
      "useVimBindingsTooltip": "Enable Vim key bindings for navigating and editing text in the prompt field.",
      "modeAtSign": "@ mention mode"
    },
    "server": {
      "description": "Enable server on port 24337 to access AiderDesk from external applications",
      "status": "Status",
      "running": "Running",
      "enableBasicAuth": "Enable Basic Authentication",
      "enableBasicAuthDescription": "Require username and password for browser access and API calls",
      "username": "Username",
      "password": "Password",
      "controlServer": "REST API Server",
      "starting": "Starting...",
      "stopping": "Stopping...",
      "start": "Start",
      "stop": "Stop",
      "stopped": "Stopped",
      "copyUrl": "Copy URL",
      "authentication": "Authentication",
      "serverControl": "Server Control",
      "tunnelManagement": "Tunnel Management",
      "tunnelDescription": "Create a Cloudflare tunnel to securely access your server from external networks. Make sure to use Authentication when exposing the server externally."
    },
    "messages": {
      "title": "Message Display",
      "display": "Display Options",
      "markdownRendering": "Markdown rendering",
      "virtualizedRendering": "Use virtualized rendering (experimental)",
      "virtualizedRenderingTooltip": "Experimental feature that can improve performance when you have many messages in your conversation history by only rendering visible messages."
    }
  },
  "messages": {
    "thinking": "Thinking...",
    "loading": "Loading...",
    "copy": "Copy",
    "copied": "Copied!",
    "interrupted": "Interrupted by user.",
    "delete": "Delete",
    "redo": "Redo",
    "edit": "Edit",
    "editingLastMessage": "Editing last message",
    "cancelEdit": "Cancel",
    "group": "Group",
    "scrollToBottom": "Scroll to bottom",
    "messageBar": "Message Bar"
  },
  "errors": {
    "frozenTitle": "AIDER FROZEN?",
    "frozenMessage": "Aider process seems to be frozen. Would you like to restart the session?"
  },
  "dialogs": {
    "confirm": "Confirm",
    "confirmDelete": "Are you sure you want to delete this?",
    "addFile": "Add File",
    "openProject": "Open Project",
    "recentProjects": "Recent projects",
    "openProjectTitle": "OPEN PROJECT",
    "projectPathPlaceholder": "Type the path to your project or use icon to browse",
    "openButton": "Open",
    "browseFoldersTooltip": "Browse folders",
    "projectAlreadyOpenWarning": "This project is already open.",
    "cantOpenProject": "This project can not be opened."
  },
  "mode": {
    "code": "Code",
    "ask": "Ask",
    "architect": "Architect",
    "context": "Context",
    "agent": "Agent"
  },
  "addFileDialog": {
    "title": "Add context files",
    "browse": "Browse files",
    "readOnly": "Read-Only"
  },
  "fileFinder": {
    "addPathTooltip": "Add path",
    "browseFile": "Browse for files",
    "browseDirectory": "Browse for directories",
    "placeholder": {
      "filesOnly": "Enter file to add",
      "directoriesOnly": "Enter directory to add",
      "filesAndDirectories": "Enter file or directory to add"
    },
    "placeholderFinish": {
      "filesOnly": "Enter file or press Enter to finish",
      "directoriesOnly": "Enter directory or press Enter to finish",
      "filesAndDirectories": "Enter file or directory or press Enter to finish"
    }
  },
  "fileChip": {
    "removeFileTooltip": "Remove file"
  },
  "contextFiles": {
    "title": "Context Files",
    "add": "Add context files",
    "addFileTooltip": "Add file (use Ctrl/Cmd to add as Read-only)",
    "addFileTooltip.ctrl": "Add file (use Ctrl to add as Read-only)",
    "addFileTooltip.cmd": "Add file (use Cmd to add as Read-only)",
    "readOnly": "Read-only file",
    "showAllFiles": "Show all files",
    "hideAllFiles": "Hide all files",
    "expandAll": "Expand all",
    "collapseAll": "Collapse all",
    "dropAll": "Drop all context files"
  },
  "modelSelector": {
    "mainModel": "Main model",
    "editorModel": "Editor model",
    "weakModel": "Weak model",
    "architectModel": "Architect model",
    "agentModel": "Agent model",
    "reasoning": "Reasoning",
    "thinkingTokens": "Thinking tokens",
    "loadingModel": "Loading model...",
    "searchPlaceholder": "Search models...",
    "searchPlaceholderOrCustom": "Search models or enter custom name...",
    "removePreferred": "Remove from preferred models",
    "invalidModelSelection": "Invalid format of the model. Expected format is 'provider/model', e.g. 'openai/gpt-4'.",
    "providerNotSupported": "Provider '{{provider}}' is not supported. Supported providers are: {{providers}}.",
    "selectModel": "Select model..."
  },
  "modelInfo": {
    "noInfo": "No model information available.",
    "maxInputTokens": "Max Input Tokens",
    "maxOutputTokens": "Max Output Tokens",
    "inputCostPerMillion": "Input Cost / 1M Tokens",
    "outputCostPerMillion": "Output Cost / 1M Tokens"
  },
  "mcp": {
    "serverToolStatus": "{{enabledCount}} of {{count}} tools enabled",
    "toolsCount_one": "{{count}} tool",
    "toolsCount_other": "{{count}} tools",
    "loadToolsError": "Failed to load MCP server tools",
    "noToolsFound": "No tools could be found. Check your configuration.",
    "servers": "MCP servers",
    "tools": "Tools"
  },
  "tasks": {
    "title": "Tasks",
    "addTodo": "Add Todo",
    "editTodo": "Edit Todo",
    "deleteTodo": "Delete Todo",
    "todoName": "Todo Name",
    "todoNamePlaceholder": "Enter todo name...",
    "saveTodo": "Save",
    "cancelTodo": "Cancel",
    "noTodos": "No todo items",
    "confirmDelete": "Are you sure you want to delete this todo item?",
    "clearAllTodos": "Clear all tasks"
  },
  "tool": {
    "noDescription": "No description",
    "approval": {
      "never": "Never",
      "always": "Always",
      "ask": "Ask"
    }
  },
  "autocompletion": {
    "placeholder": "Type to search..."
  },
  "session": {
    "edit": "Edit Session",
    "save": "Save Session",
    "name": "Session Name",
    "namePlaceholder": "Enter session name",
    "loadSettings": "Load Settings",
    "loadMessages": "Load messages from this session",
    "loadFiles": "Load context files from this session"
  },
  "costInfo": {
    "files": "Files",
    "repoMap": "Repo map",
    "refreshRepoMap": "Refresh repository map",
    "messages": "Messages",
    "clearMessages": "Clear message history",
    "agent": "Agent",
    "aider": "Aider",
    "total": "Total",
    "restartSession": "Restart session",
    "tokenUsage": "{{usedTokens}} of {{maxTokens}}"
  },
  "sessions": {
    "title": "Sessions",
    "empty": "No saved sessions",
    "loadMessages_one": "Load {{count}} message",
    "loadMessages_other": "Load {{count}} messages",
    "loadFiles_one": "Load {{count}} file",
    "loadFiles_other": "Load {{count}} files",
    "saveAsNew": "Save as new",
    "exportAsMarkdown": "Export as Markdown",
    "exportAsImage": "Export as Image",
    "deleteTitle": "Delete Session",
    "deleteConfirm": "Are you sure you want to delete the session \"{{name}}\"?",
    "deleteWarning": "This action cannot be undone.",
    "save": "Save session",
    "add": "Add new session",
    "newSessionPlaceholder": "Enter session name",
    "sessionSaved": "Session saved."
  },
  "commandOutput": {
    "command": "Command"
  },
  "reflectedMessage": {
    "title": "Reflected Message"
  },
  "responseMessage": {
    "inputTokens": "Input Tokens",
    "outputTokens": "Output Tokens",
    "cacheWriteTokens": "Cache Write Tokens",
    "cacheReadTokens": "Cache Read Tokens"
  },
  "thinkingAnswer": {
    "thinking": "THINKING",
    "answer": "ANSWER"
  },
  "toolMessage": {
    "toolLabel": "{{server}}: {{tool}}",
    "arguments": "Arguments:",
    "executing": "Executing tool...",
    "result": "Result:",
    "error": "Error while executing tool:",
    "denied": "Denied by user.",
    "deniedByReason": "Denied by user:\n{{reason}}",
    "aider": {
      "addContextFiles": "Add file(s) to Aider's context:\n{{paths}}",
      "dropContextFiles": "Drop file(s) from Aider's context:\n{{paths}}",
      "runPrompt": "Run prompt in Aider",
      "working": "Aider is working...",
      "finishedTask": "Aider finished the task.",
      "noChanges": "Aider did not make any changes."
    },
    "power": {
      "fileRead": "Read",
      "fileWrite": {
        "overwrite": "Rewrite",
        "append": "Append to",
        "createOnly": "Create"
      },
      "fileEdit": {
        "title": "Edit",
        "searchTerm": "Search Term",
        "regex": "Regex",
        "replacementText": "Replacement Text",
        "replaceAll": "Replace All"
      },
      "glob": {
        "title": "Find files matching pattern:",
        "foundFiles": "Found {{count}} files",
        "noMatches": "No matches found.",
        "for": "for",
        "contextLines": "({{count}} lines of context)",
        "matchesCount": "({{count}} matches)",
        "lineLabel": "Line {{lineNumber}}:",
        "contextLabel": "Context:"
      },
      "grep": {
        "title": "Search files matching",
        "for": "for",
        "foundMatches": "Found {{count}} matches",
        "noMatches": "No matches found.",
        "contextLines": "({{count}} lines of context)",
        "matchesCount": "({{count}} matches)",
        "lineLabel": "Line {{lineNumber}}:",
        "contextLabel": "Context:"
      },
      "bash": {
        "title": "Run command",
        "exitCode": "Exit Code",
        "stdout": "Stdout",
        "stderr": "Stderr",
        "commandFailed": "Command failed"
      },
      "semanticSearch": {
        "title": "Semantic search:",
        "in": "in",
        "noMatches": "No matches found.",
        "foundMatches": "Found {{count}} matches",
        "score": " (score: {{score}})",
        "resultLabel": "Result {{index}}"
      },
      "fetch": {
        "title": "Fetch",
        "contentTruncated": "Content truncated. Full content available in copy."
      }
    },
    "subagents": {
      "groupRunning": "{{name}}: Subagent is working...",
      "groupCompleted": "{{name}}: Subagent finished the task.",
      "running": "Subagent is working...",
      "completed": "Subagent finished the task.",
      "prompt": "Prompt"
    },
    "errors": {
      "noSuchTool": "Attempted to use unknown tool: {{toolName}}",
      "invalidToolArguments": "Invalid arguments for tool: {{toolName}}"
    }
  },
  "codeBlock": {
    "revertChanges": "Revert changes"
  },
  "diffViewer": {
    "noChanges": "No changes have been made. Content is identical."
  },
  "promptField": {
    "placeholders": {
      "0": "Update the UserValidator class to add email format validation...",
      "1": "Fix the memory leak in DataProcessor.processBatch() by closing...",
      "2": "Add error handling to PaymentService.chargeCard() with proper...",
      "3": "Create a React component UserProfileCard with props interface...",
      "4": "Optimize the SQL query in UserRepository.findByEmail() by adding...",
      "5": "Add unit tests for AuthController.login() using Jest and...",
      "6": "Implement the missing handleResize() method in ChartComponent...",
      "7": "Update package.json to add TypeScript dependency and configure...",
      "8": "Add input validation to ContactForm's handleSubmit function...",
      "9": "Fix the bug in calculateTotal() where decimal values are being...",
      "10": "Add logging to API middleware using Winston for request...",
      "11": "Create a Dockerfile for Node.js application with multi-stage...",
      "12": "Add rate limiting middleware to /api/users endpoint using...",
      "13": "Implement the missing deleteTodo() function in TodoService...",
      "14": "Add TypeScript interfaces for API response objects in...",
      "15": "Fix the CSS issue where mobile menu is not displaying...",
      "16": "Add environment variable validation using dotenv and...",
      "17": "Create database migration to add 'last_login' column to...",
      "18": "Add error boundaries to React app to catch component...",
      "19": "Implement pagination logic in ProductList's fetchProducts..."
    },
    "questionPlaceholder": "...or suggest something else",
    "answers": {
      "yes": "(Y)es",
      "no": "(N)o",
      "always": "(A)lways",
      "dontAsk": "(D)on't ask again"
    },
    "invalidCommand": "Invalid command",
    "stopResponse": "Stop response",
    "sendMessage": "Send message (Enter)",
    "clearChat": "Clear chat",
    "agentModeOnly": "Available in Agent mode only"
  },
  "agentProfiles": {
    "title": "Agent Profiles",
    "profileSettings": "Agent Profile: {{profileName}}",
    "newProfileName": "New Profile",
    "manageProfiles": "Manage Profiles",
    "profiles": "Profiles",
    "createNew": "New Profile",
    "profileName": "Name",
    "profileDescription": "Description",
    "profileDescriptionPlaceholder": "Describe this agent profile (purpose, tools, etc.)",
    "tools": "Tools",
    "model": "Model"
  },
  "projectBar": {
    "editFormatTooltip": "This is the format used for editing code. Changing it might cause the model to not perform as expected.",
    "aider": "Aider",
    "toggleSidebar": "Toggle sidebar",
    "modelLibrary": "Model Library"
  },
  "reasoningEffort": {
    "label": "Reasoning",
    "tooltip": "Reasoning effort determines how much the model will think before taking action. High reasoning effort means the model will think more before taking action, but will also take longer to respond.",
    "none": "None",
    "low": "Low",
    "medium": "Medium",
    "high": "High",
    "max": "Max"
  },
  "commands": {
    "add": "Add files to the context",
    "agent": "Switch to agent mode. If already in agent mode, opens the agent model selector. Any text after the command is used as a prompt",
    "architect": "Switch to architect mode. Architect mode is used to plan changes to the code base and execute them",
    "ask": "Switch to ask mode. Ask questions about the code base without editing any files",
    "clear": "Clear the chat history",
    "clear-logs": "Remove only log messages from chat",
    "code": "Switch to code mode. Ask for changes to your code",
    "commit": "Commit unstaged changes to the repo",
    "context": "Switch to context mode. Ask for changes and Aider will add relevant files to the context",
    "compact": "Summarize the conversation",
    "copy-context": "Copy the current chat context as markdown, suitable to paste into a web UI",
    "drop": "Remove files from the context to free up context space",
    "edit-last": "Edits the last user message",
    "init": "Initializes AGENTS.md rule file with project information",
    "agentModeOnly": "Agent mode only",
    "map": "Print out the current repository map",
    "map-refresh": "Force a refresh of the repository map",
    "model": "Open the model selector",
    "read-only": "Add files to the chat that are for reference only, or turn added files to read-only",
    "redo": "Redoes the last user prompt.",
    "reasoning-effort": "Set the reasoning effort level (values: minimal/low/medium/high depending on model)",
    "reset": "Drop all files and clear the chat history",
    "run": "Run a shell command and optionally add the output to the chat",
    "test": "Run a predefined test command and add the output to the chat on non-zero exit code",
    "think-tokens": "Set the thinking token budget (supports formats like 8096, 8k, 10.5k, 0.5M)",
    "tokens": "Report on the number of tokens used by the current chat context",
    "undo": "Undo the last git commit if it was done by Aider",
    "web": "Scrape a webpage and save it to a file. Use /web url [file] with optional [file]."
  },
  "telemetry": {
    "title": "Telemetry Information",
    "message": "To help us improve AiderDesk, anonymous telemetry data is collected. This includes information like mode usage (agent, code, ask...) and some specifics when Agent mode is used. No personal data or prompts are ever collected.",
    "fullInfo": "Full information about what is collected can be found <a>here</a>.",
    "enabledLabel": "Enable anonymous telemetry"
  },
  "multiselect": {
    "noneSelected": "None selected",
    "allSelected": "All selected",
    "someSelected": "{{count}} selected",
    "selectAll": "Select All"
  },
  "usageDashboard": {
    "title": "Usage Dashboard",
    "refresh": "Refresh",
    "projects": "Projects",
    "models": "Models",
    "dateRange": "Date Range",
    "total": "Total",
    "thisMonth": "This month",
    "today": "Today",
    "all": "All",
    "groupBy": "Group by",
    "periods": {
      "hour": "Hour",
      "day": "Day",
      "month": "Month",
      "year": "Year"
    },
    "tabs": {
      "table": "Table View",
      "charts": "Charts View"
    },
    "charts": {
      "tokenUsageTrend": "Token Usage Trend",
      "costBreakdown": "Cost Breakdown",
      "messageBreakdown": "Message Breakdown",
      "modelUsageDistribution": "Model Usage Distribution",
      "inputTokens": "Input Tokens",
      "outputTokens": "Output Tokens",
      "noData": "No data available for the selected period",
      "tokens": "Tokens",
      "cost": "Cost",
      "share": "Share",
      "moreItems": "+{{count}} more"
    },
    "error": {
      "fetch": "Failed to fetch usage data."
    },
    "table": {
      "date": "Date",
      "project": "Project",
      "model": "Model",
      "input": "Input",
      "output": "Output",
      "cacheRead": "Cache Read",
      "cacheWrite": "Cache Write",
      "totalTokens": "Total Tokens",
      "cost": "Cost"
    }
  },
  "terminal": {
    "copyOutput": "Copy terminal output to prompt",
    "minimize": "Minimize terminal",
    "addTerminal": "Add new terminal"
  },
  "contextMenu": {
    "copy": "Copy",
    "paste": "Paste",
    "close": "Close",
    "closeOtherTabs": "Close other tabs",
    "closeAllTabs": "Close all tabs"
  }
}

================
File: src/common/locales/zh.json
================
{
  "languages": {
    "en": "English",
    "zh": "中文"
  },
  "common": {
    "settings": "设置",
    "cancel": "取消",
    "save": "保存",
    "delete": "删除",
    "edit": "编辑",
    "add": "添加",
    "remove": "移除",
    "close": "关闭",
    "confirm": "确认",
    "back": "返回",
    "next": "下一步",
    "finish": "完成",
    "loading": "加载中...",
    "startingUp": "正在启动...",
    "loadingProjectSettings": "正在加载项目设置...",
    "error": "错误",
    "success": "成功",
    "warning": "警告",
    "info": "信息",
    "yes": "是",
    "no": "否",
    "open": "打开",
    "openProject": "打开项目",
    "lock": "锁定",
    "default": "默认",
    "suffix.billion": "十亿",
    "suffix.million": "百万",
    "suffix.thousand": "千",
    "ok": "确定",
    "collapse": "收起"
  },
  "search": {
    "placeholder": "查找...",
    "previousResult": "上一个结果 (SHIFT + F3)",
    "nextResult": "下一个结果 (F3)"
  },
  "onboarding": {
    "title": "欢迎使用 AiderDesk",
    "description": "AiderDesk 是您的 AI 辅助编程桌面伴侣。本应用将 Aider 的 AI 编程助手功能带到用户友好的界面中，帮助您：",
    "skipForNow": "暂时跳过",
    "finish": "完成设置",
    "features": {
      "1": "管理多个编程项目",
      "2": "跟踪您的 AI 使用情况和成本",
      "3": "以结构化方式与 AI 模型交互",
      "4": "可视化和管理您的代码文件",
      "5": "使用代理流程进行自动化编码任务并连接到 MCP 服务器"
    },
    "getStarted": "让我们从配置您的 Aider 设置开始。",
    "steps": {
      "welcome": "欢迎",
      "connectModel": "连接AI模型",
      "language": "语言",
      "aider": "Aider",
      "agent": "AI代理",
      "providers": "提供商",
      "finish": "完成"
    },
    "language": {
      "title": "选择您的语言",
      "description": "为应用程序界面选择您的首选语言。"
    },
    "aider": {
      "title": "配置 Aider",
      "description": "要开始使用，请配置您的 Aider 设置。您需要：",
      "options": {
        "1": "添加您想要使用的 LLM 提供商的 API 密钥",
        "2": "为 Aider 设置任何其他选项",
        "3": ".env 和 .aider.conf.yaml 文件也会像使用 Aider 一样被读取"
      },
      "configureLater": "您也可以稍后在设置中进行配置。",
      "fineTuneTitle": "微调 Aider（可选）",
      "fineTuneDescription": "高级用户可以配置额外的 Aider 设置和环境变量。此步骤完全可选，可以安全跳过。",
      "fineTuneNote": "注意：这些设置适用于想要自定义 Aider 行为的高级用户。大多数用户可以跳过此步骤，如需要可稍后在设置中配置。"
    },
    "providers": {
      "title": "模型提供商",
      "description": "配置您的 LLM 提供商以在 Aider 和 Agent 模式中使用。您可以为各种提供商设置 API 密钥和其他设置。",
      "configureLater": "如果您愿意，可以稍后在设置中配置这些。",
      "connectTitle": "连接您的AI模型",
      "connectDescription": "AiderDesk 支持多个AI提供商，包括OpenAI、Anthropic、Google Gemini等。您的API密钥安全存储在本地机器上，绝不会被共享。",
      "advancedUsersNote": "高级用户：您也可以在下一步的Aider配置部分使用环境变量配置提供商。",
      "advancedSettings": "高级设置",
      "order": "排序",
      "orderDescription": "按顺序尝试的提供商列表（例如 [\"anthropic\", \"openai\"]）",
      "allowFallbacks": "允许备用选项",
      "allowFallbacksDescription": "当主提供商不可用时是否允许使用备用提供商",
      "dataCollection": "数据收集",
      "dataCollectionDescription": "控制是否使用可能存储数据的提供商",
      "only": "仅限",
      "onlyDescription": "仅允许用于此请求的提供商列表",
      "ignore": "忽略",
      "ignoreDescription": "为此请求跳过的提供商列表",
      "quantizations": "量化",
      "quantizationsDescription": "按量化级别过滤的列表（例如 [\"int4\", \"int8\"]）",
      "sort": "排序",
      "sortDescription": "按价格或吞吐量对提供商进行排序",
      "requireParameters": "要求参数",
      "requireParametersDescription": "是否要求提供商支持模型参数。",
      "setupLater": "您也可以稍后在设置中配置这些。"
    },
    "agent": {
      "title": "认识您的AI代理",
      "description": "通过 AiderDesk 的代理模式发现自主AI辅助的强大功能。您的AI代理可以独立工作来完成复杂任务。",
      "capabilities": "代理功能：",
      "autonomousPlanning": "自主任务规划：",
      "autonomousPlanningDesc": "将复杂请求分解为可管理的步骤并系统性地执行它们。",
      "toolUse": "工具使用：",
      "toolUseDesc": "利用各种工具进行文件操作、网络搜索和代码分析。",
      "extensible": "通过MCP扩展：",
      "extensibleDesc": "连接到模型上下文协议服务器以增强功能。",
      "configureAgent": "配置代理",
      "finishLater": "完成设置（稍后配置代理）",
      "configureTitle": "配置您的代理（可选）",
      "configureDescription": "自定义您的默认代理配置以匹配您的工作流程。您可以调整工具权限、上下文偏好和行为规则等设置。"
    },
    "complete": {
      "title": "设置完成！",
      "description": "恭喜！您已成功设置 AiderDesk。现在您可以开始使用 AI 辅助编程了。",
      "ready": "点击'完成设置'开始您的编程之旅。",
      "success": "引导完成成功！欢迎使用 AiderDesk。"
    },
    "errors": {
      "navigationFailed": "导航失败。请重试。",
      "finishFailed": "完成引导失败。请重试。"
    }
  },
  "noProjectsOpen": {
    "welcome": "欢迎使用",
    "description": "要开始使用，请打开一个项目目录。这将允许您熟悉和喜爱的 Aider 与您的代码一起工作。"
  },
  "home": {
    "title": "首页",
    "noProjectsOpen": "没有打开的项目",
    "openProject": "打开项目",
    "addFile": "添加文件",
    "projectView": "项目视图",
    "recentProjects": "最近的项目"
  },
  "tips": {
    "multipleProjects": "提示：您可以打开多个项目并使用顶部的标签页(或 CTRL+Tab)在它们之间切换。"
  },
  "mcpServer": {
    "addServer": "添加 MCP 服务器",
    "editServer": "编辑 MCP 服务器: {{name}}",
    "serverConfigJson": "服务器配置 JSON",
    "pasteServerAs": "粘贴您的服务器配置为:\n\n{{example}}\n\n或\n\n{{exampleNoParent}}\n\n或\n\n{{exampleBare}}",
    "invalidConfig": "无效配置",
    "emptyConfig": "配置不能为空",
    "configHint": "您可以一次添加多个服务器，方法是粘贴包含多个服务器配置的 JSON 对象。您还可以在 env 和 args 中使用 ${projectDir} 来引用当前项目目录。",
    "viewExamples": "查看示例"
  },
  "model": {
    "label": "模型",
    "selectLabel": "模型",
    "placeholder": "输入模型名称",
    "chooseModelsToAdd": "选择要添加的模型...",
    "library": {
      "all": "全部"
    }
  },
  "modelLibrary": {
    "title": "模型库",
    "search": "搜索模型",
    "providers": "提供商",
    "all": "全部",
    "selectProvider": "选择要配置的提供商",
    "profileForm": {
      "title": "配置 {{provider}} 提供商的配置文件",
      "name": "配置文件名称",
      "id": "提供商 ID 前缀",
      "parameters": "提供商参数",
      "headers": "自定义头部",
      "headerKey": "头部名称",
      "headerValue": "头部值",
      "addHeader": "添加头部",
      "test": "测试并加载模型"
    },
    "noProvidersConfigured": "尚未配置任何提供商",
    "addProvider": "添加提供商",
    "addFirstProvider": "添加您的第一个提供商",
    "searchPlaceholder": "搜索模型...",
    "showingAllModels": "显示来自所有提供商的 {{count}} 个模型",
    "showingModelsFromProviders": "显示来自 {{providerCount}} 个提供商的 {{modelCount}} 个模型",
    "noModelsMatchSearch": "没有模型匹配您的搜索",
    "selectProvidersToViewModels": "选择上面的提供商配置文件以查看其模型",
    "noModelsFromSelectedProviders": "所选提供商没有可用的模型",
    "addModel": "添加模型",
    "editModel": "编辑模型",
    "provider": "提供商",
    "modelId": "模型 ID",
    "modelIdPlaceholder": "例如 custom-gpt-4-turbo",
    "maxInputTokens": "上下文窗口",
    "maxOutputTokens": "最大输出令牌数",
    "cacheWrites": "缓存写入",
    "cachedInput": "缓存输入",
    "inputCost": "输入",
    "outputCost": "输出",
    "inputTokenCost": "每百万令牌输入成本",
    "outputTokenCost": "每百万令牌输出成本",
    "cacheReadInputTokenCost": "缓存读取成本 / 每百万令牌",
    "cacheWriteInputTokenCost": "缓存写入成本 / 每百万令牌",
    "supportsTools": "支持工具",
    "deleteProfileTitle": "删除配置文件",
    "deleteProfileConfirm": "您确定要删除配置文件 '{{name}}' 吗？",
    "hidden": "隐藏",
    "errors": {
      "idRequired": "模型 ID 必填",
      "providerRequired": "提供商必填",
      "invalidTokenCount": "令牌数必须为正数",
      "invalidCost": "成本必须为非负数",
      "duplicateId": "提供商 ID 已存在"
    },
    "overrides": {
      "title": "提供商覆盖",
      "resetToDefaults": "清除覆盖",
      "overridesProviderParameters": "覆盖一些提供商参数"
    }
  },
  "openai": {
    "apiKey": "API 密钥",
    "baseUrl": "基础 URL",
    "modelName": "模型",
    "baseUrlPlaceholder": "例如 http://localhost:8080/v1",
    "reasoningEffort": "推理努力",
    "reasoningEffortNone": "无",
    "reasoningEffortMinimal": "最小",
    "reasoningEffortLow": "低",
    "reasoningEffortMedium": "中",
    "reasoningEffortHigh": "高"
  },
  "ollama": {
    "baseUrl": "基础 URL",
    "baseUrlPlaceholder": "例如 http://localhost:11434/api"
  },
  "lmstudio": {
    "baseUrl": "基础 URL",
    "baseUrlPlaceholder": "例如 http://localhost:1234/v1"
  },
  "zaiPlan": {
    "apiKey": "API 密钥"
  },
  "anthropic": {
    "apiKey": "API 密钥"
  },
  "gemini": {
    "apiKey": "API 密钥",
    "customBaseUrl": "自定义基础 URL",
    "thinkingBudget": "思考预算 (令牌)",
    "includeThoughts": "包含思考过程",
    "includeThoughtsTooltip": "启用后，代理的内部思考过程将包含在对话历史中，这有助于调试或理解其决策。",
    "useSearchGrounding": "使用搜索基础",
    "useSearchGroundingTooltip": "启用后，代理将使用搜索结果作为其响应的基础，从而提高准确性和相关性。",
    "useSearchGroundingWarning": "当启用时，Gemini 模型的工具使用受到限制。"
  },
  "groq": {
    "apiKey": "API 密钥",
    "modelPlaceholder": "例如 moonshotai/kimi-k2-instruct"
  },
  "deepseek": {
    "apiKey": "API 密钥"
  },
  "bedrock": {
    "apiKey": "API 密钥",
    "region": "区域",
    "regionPlaceholder": "例如 us-east-1",
    "accessKeyId": "访问密钥 ID",
    "accessKeyIdTooltip": "AWS 访问密钥 ID。如果设置了 AWS_PROFILE 环境变量，可以留空。",
    "secretAccessKey": "秘密访问密钥",
    "secretAccessKeyTooltip": "AWS 秘密访问密钥。如果设置了 AWS_PROFILE 环境变量，可以留空。",
    "sessionToken": "会话令牌",
    "sessionTokenTooltip": "临时凭证的可选会话令牌。"
  },
  "cerebras": {
    "apiKey": "API 密钥"
  },
  "openRouter": {
    "apiKey": "API 密钥",
    "modelPlaceholder": "例如 anthropic/claude-3.7-sonnet"
  },
  "requesty": {
    "apiKey": "API 密钥",
    "modelPlaceholder": "例如 claude-4-sonnet"
  },
  "azure": {
    "apiKey": "API 密钥",
    "resourceName": "资源名称",
    "apiVersion": "API 版本",
    "addCustomModelInfo": "Azure 提供商的模型无法自动加载，您需要手动使用“+ 添加模型”添加它们，并确保模型名称与部署名称匹配。"
  },
  "providers": {
    "anthropic": "Anthropic",
    "bedrock": "Bedrock",
    "cerebras": "Cerebras",
    "deepseek": "Deepseek",
    "gemini": "Gemini",
    "groq": "Groq",
    "lmstudio": "LM Studio",
    "ollama": "Ollama",
    "openai": "OpenAI",
    "openai-compatible": "OpenAI Compatible",
    "openrouter": "OpenRouter",
    "requesty": "Requesty",
    "vertex-ai": "Vertex AI",
    "zai-plan": "Z.AI Coding Plan",
    "azure": "Azure"
  },
  "select": {
    "placeholder": "选择选项",
    "loadingSessions": "正在加载会话..."
  },
  "settings": {
    "title": "设置",
    "tabs": {
      "general": "通用",
      "providers": "模型提供者",
      "aider": "Aider",
      "agent": "代理",
      "server": "服务器",
      "about": "关于"
    },
    "gui": "GUI",
    "startup": {
      "title": "启动",
      "emptySession": "以空会话启动",
      "lastSession": "加载上次会话",
      "specificSession": "加载特定会话"
    },
    "language": "语言",
    "notifications": {
      "title": "通知"
    },
    "agent": {
      "mcpServers": "MCP 服务器",
      "provider": "提供商",
      "providerSettings": "提供商设置",
      "context": "上下文",
      "addRuleFiles": "将项目中的 `.aider-desk/rules` 目录下的规则文件添加为只读文件。",
      "runSettings": "运行参数",
      "maxIterations": "最大迭代次数",
      "minTimeBetweenToolCalls": "工具调用最小间隔时间(毫秒)",
      "maxTokens": "最大令牌数",
      "temperature": "温度",
      "rules": "自定义指令",
      "rulesInfo": "您可以使用自定义指令为特定的 MCP 服务器添加特定指令，或控制代理的流程。",
      "noServersConfigured": "未配置 MCP 服务器。",
      "computationalResources": "代理每次运行的最大迭代次数。有助于控制计算资源。",
      "rateLimiting": "设置工具调用之间的最小时间以防止速率限制(例如对于 Brave 或其他 API 受限的服务)。",
      "temperatureTooltip": "控制响应的随机性。较低的值（0.0-0.3）使响应更专注和确定性，较高的值（0.7-1.0）使响应更有创意和变化性。",
      "tokensPerResponse": "代理每次响应可以使用的最大令牌数。",
      "addMcpServer": "添加",
      "editConfig": "编辑配置",
      "editMcpServersConfig": "编辑 MCP 服务器配置",
      "reloadServers": "重新加载",
      "powerToolsTooltip": "允许代理使用强大的工具进行直接文件操作（读、写、编辑）、搜索（glob、grep、语义搜索）和执行 shell 命令（bash）。",
      "aiderToolsTooltip": "代理可以使用Aider执行添加/删除上下文文件操作和运行提示。",
      "useAiderTools": "使用Aider工具",
      "usePowerTools": "使用 Power 工具",
      "useTodoTools": "使用 Todo 工具",
      "includeContextFiles": "包含上下文文件",
      "includeFilesTooltip": "将上下文文件内容添加到代理的聊天中。这将增加令牌使用量。",
      "includeRepoMap": "包含仓库地图",
      "includeRepoMapTooltip": "在代理的上下文中包含仓库地图。这有助于代理理解项目结构，但可能会增加token使用量。",
      "autoApprove": "自动批准",
      "selectOrCreateProfile": "选择或创建新的代理配置",
      "newProfileName": "新配置",
      "envVarPlaceholder": "{{envVar}}",
      "envVarFoundPlaceholder": "找到于: {{source}}",
      "createNewProfile": "创建新配置",
      "genericTools": "工具",
      "noGenericToolsConfigured": "未配置工具。",
      "todoTools": "待办工具",
      "includeTodoToolsTooltip": "允许代理管理待办事项列表，包括设置、获取、更新和清除它们。",
      "subagent": {
        "title": "子代理",
        "enableAsSubagent": "启用为子代理",
        "enableAsSubagentInformation": "启用后，此配置可被其他代理用作子代理。",
        "canUseSubagents": "可以使用子代理",
        "canUseSubagentsInformation": "启用后，此代理可以使用其他代理作为子代理。",
        "contextMemory": "上下文记忆",
        "contextMemoryTooltip": "控制子代理记住多少之前的对话上下文。'完整上下文' 保持所有历史记录，'最后消息' 仅使用最近的互动，'关闭' 每次重新开始。",
        "contextMemory.off": "关闭",
        "contextMemory.fullContext": "完整上下文",
        "contextMemory.lastMessage": "最后消息",
        "description": "描述",
        "descriptionPlaceholder": "描述此子代理的目的、能力和专长...",
        "systemPrompt": "系统提示",
        "systemPromptPlaceholder": "输入此配置用作子代理时的自定义系统提示指令...",
        "invocationMode": "调用方式",
        "invocationModeOnDemand": "按需",
        "invocationModeOnDemandInformation": "子代理仅在父代理明确请求时才使用。",
        "invocationModeAutomatic": "自动",
        "invocationModeAutomaticInformation": "子代理可由父代理在适当时自动调用。",
        "statusDisabled": "已禁用",
        "statusOnDemand": "按需",
        "statusAutomatic": "自动",
        "descriptionRequiredForAutomatic": "需要设置描述才能自动使用此子代理，否则只能在用户明确请求时使用该子代理。",
        "on-demand": "仅在明确请求时按需使用",
        "automatic": "在适当时自动使用"
      }
    },
    "aider": {
      "options": "选项",
      "optionsPlaceholder": "例如 --no-auto-commits --cache-prompts",
      "autoCommits": "启用自动提交",
      "cachingEnabled": "启用提示缓存",
      "watchFiles": "监视文件变化",
      "environmentVariables": "环境变量",
      "envVarsPlaceholder": "#################\n# LLM 参数:\n#\n# 包含 xxx_API_KEY 参数和您的 LLM 所需的其他参数。\n# 详情请见 https://aider.chat/docs/llms.html\n\n## OpenAI\n#OPENAI_API_KEY=\n\n## Anthropic\n#ANTHROPIC_API_KEY=",
      "optionsDocumentation": "查看文档了解可用选项：https://aider.chat/docs/faq.html#how-can-i-pass-command-line-options-to-aider",
      "envVarsDocumentation": "查看文档了解环境变量：https://aider.chat/docs/llms.html",
      "addRuleFiles": "将项目中的 `.aider-desk/rules` 目录下的规则文件添加为只读文件。",
      "confirmBeforeEdit": "编辑文件前确认"
    },
    "common": {
      "showSecrets": "显示密钥",
      "learnMore": "了解更多"
    },
    "notificationsEnabled": "通知已启用",
    "zoom": "缩放级别",
    "theme": "主题",
    "font": "字体",
    "fontSize": "字体大小",
    "fontOptions": {
      "sono": "Sono (色)",
      "poppins": "Poppins ",
      "nunito": "Nunito",
      "quicksand": "Quicksand",
      "playfairDisplay": "Playfair Display",
      "lora": "Lora",
      "merriweather": "Merriweather",
      "spaceGrotesk": "Space Grotesk",
      "orbitron": "Orbitron"
    },
    "themeOptions": {
      "dark": "深色",
      "light": "浅色",
      "ocean": "海洋",
      "forest": "森林",
      "lavender": "薰衣草",
      "bw": "黑白",
      "midnight": "午夜",
      "neon": "霓虹",
      "neopunk": "赛博朋克",
      "charcoal": "炭灰",
      "aurora": "极光",
      "serenity": "宁静"
    },
    "aiderRestartConfirm": {
      "title": "需要重启",
      "message": "对 Aider 选项或环境变量的更改需要重新启动 Aider 会话才能生效。您想现在重新启动吗？",
      "restartNow": "立即重启",
      "later": "稍后处理"
    },
    "models": {
      "title": "模型提供商",
      "description": "配置您的 LLM 提供商以在 Aider 和 Agent 模式中使用。点击提供商卡片来配置其设置。",
      "configured": "已配置",
      "notConfigured": "未配置",
      "agentOnly": "仅代理",
      "showAllProviders": "显示所有提供商",
      "additionalProvidersInfo": "需要更多提供商？您可以在<aiderTab>Aider 设置</aiderTab>中通过设置环境变量来配置更多 LLM 提供商。"
    },
    "vertexAi": {
      "project": "项目",
      "projectPlaceholder": "输入您的 Google Cloud 项目 ID",
      "location": "位置",
      "locationPlaceholder": "输入您的 Google Cloud 位置",
      "credentials": "Google Cloud 凭据 (可选)",
      "credentialsPlaceholder": "输入您的 Google Cloud 凭据 JSON"
    },
    "about": {
      "version": "版本",
      "notAvailable": "不可用",
      "checkForUpdates": "检查更新",
      "newAiderVersionAvailable": "新的 Aider 版本可用 ({{version}}) - 重启 AiderDesk 以安装。",
      "updateAvailable": "有可用更新",
      "downloadUpdate": "下载",
      "downloadingUpdate": "正在下载更新",
      "newAiderDeskVersionReady": "新版本已准备好。重启 AiderDesk 以应用更新。",
      "downloadAutomatically": "自动下载更新",
      "releaseNotes": "发行说明",
      "openLogsDirectory": "打开日志目录",
      "openLogsError": "打开日志目录出错"
    },
    "messages": {
      "title": "消息显示",
      "display": "显示选项",
      "markdownRendering": "启用 Markdown 渲染",
      "virtualizedRendering": "使用虚拟化渲染（实验性）",
      "virtualizedRenderingTooltip": "实验性功能，当您在对话历史中有大量消息时可以通过仅渲染可见消息来提高性能。"
    }
  },
  "messages": {
    "thinking": "思考中...",
    "loading": "加载中...",
    "copy": "复制",
    "copied": "已复制!",
    "interrupted": "被用户中断。",
    "delete": "删除",
    "redo": "重做",
    "edit": "编辑",
    "editingLastMessage": "正在编辑最后一条消息",
    "cancelEdit": "取消编辑",
    "group": "分组",
    "scrollToBottom": "滚动到底部",
    "messageBar": "消息栏"
  },
  "errors": {
    "frozenTitle": "AIDER冻结了?",
    "frozenMessage": "Aider进程似乎已冻结。您想重启会话吗?"
  },
  "dialogs": {
    "confirm": "确认",
    "confirmDelete": "确定要删除吗?",
    "addFile": "添加文件",
    "openProject": "打开项目",
    "recentProjects": "最近的项目",
    "openProjectTitle": "打开项目",
    "projectPathPlaceholder": "输入项目路径或使用图标浏览",
    "openButton": "打开",
    "browseFoldersTooltip": "浏览文件夹",
    "projectAlreadyOpenWarning": "此项目已打开。",
    "cantOpenProject": "无法打开此项目。"
  },
  "mode": {
    "code": "代码",
    "ask": "提问",
    "architect": "架构",
    "context": "上下文",
    "agent": "代理"
  },
  "addFileDialog": {
    "title": "添加上下文文件",
    "browse": "浏览文件",
    "readOnly": "只读"
  },
  "fileFinder": {
    "addPathTooltip": "添加路径",
    "browseFile": "浏览文件",
    "browseDirectory": "浏览目录",
    "placeholder": {
      "filesOnly": "输入要添加的文件",
      "directoriesOnly": "输入要添加的目录",
      "filesAndDirectories": "输入要添加的文件或目录"
    },
    "placeholderFinish": {
      "filesOnly": "输入文件或按 Enter 键完成",
      "directoriesOnly": "输入目录或按 Enter 键完成",
      "filesAndDirectories": "输入文件或目录，或按 Enter 键完成"
    }
  },
  "fileChip": {
    "removeFileTooltip": "移除文件"
  },
  "contextFiles": {
    "title": "上下文文件",
    "add": "添加上下文文件",
    "addFileTooltip": "添加文件 (按 Ctrl/Cmd 键添加为只读)",
    "addFileTooltip.ctrl": "添加文件 (按 Ctrl 键添加为只读)",
    "addFileTooltip.cmd": "添加文件 (按 Cmd 键添加为只读)",
    "readOnly": "只读文件",
    "showAllFiles": "显示所有文件",
    "hideAllFiles": "隐藏所有文件",
    "expandAll": "全部展开",
    "collapseAll": "全部折叠",
    "dropAll": "删除所有上下文文件"
  },
  "modelSelector": {
    "mainModel": "主模型",
    "editorModel": "编辑器模型",
    "weakModel": "弱模型:",
    "architectModel": "架构模型",
    "agentModel": "代理模型",
    "reasoning": "推理",
    "thinkingTokens": "思考令牌",
    "loadingModel": "加载模型中...",
    "searchPlaceholder": "搜索模型...",
    "searchPlaceholderOrCustom": "搜索模型或输入自定义名称...",
    "removePreferred": "从首选模型中移除",
    "selectModel": "选择模型..."
  },
  "modelInfo": {
    "noInfo": "无模型信息可用。",
    "maxInputTokens": "最大输入令牌数",
    "maxOutputTokens": "最大输出令牌数",
    "inputCostPerMillion": "每百万输入令牌成本",
    "outputCostPerMillion": "每百万输出令牌成本"
  },
  "mcp": {
    "noDescription": "无描述",
    "serverToolStatus": "已启用{{enabledCount}}个工具，共{{count}}个",
    "loading": "加载中...",
    "toolsCount_one": "{{count}}个工具",
    "toolsCount_other": "{{count}}个工具",
    "loadToolsError": "加载MCP服务器工具失败",
    "noToolsFound": "未找到工具。请检查您的配置。",
    "server_one": "服务器",
    "server_other": "服务器",
    "aider": "aider",
    "aiderOnly": "仅aider",
    "withFiles": "包含文件",
    "useAiderTools": "使用Aider工具",
    "usePowerTools": "使用 Power 工具",
    "powerToolsTooltip": "允许代理使用强大的工具进行直接文件操作（读、写、编辑）、搜索（glob、grep、语义搜索）和执行 shell 命令（bash）。",
    "aiderToolsTooltip": "代理可以使用Aider执行添加/删除上下文文件操作和运行提示。",
    "includeContextFiles": "包含上下文文件",
    "includeFilesTooltip": "将上下文文件内容添加到代理的聊天中。这将增加令牌使用量。",
    "includeRepoMap": "包含仓库地图",
    "includeRepoMapTooltip": "在代理的上下文中包含仓库地图。这有助于代理理解项目结构，但可能会增加token使用量。",
    "servers": "MCP服务器",
    "configureServers": "配置服务器",
    "approval": {
      "never": "从不",
      "always": "总是",
      "ask": "询问"
    },
    "tools": "工具"
  },
  "tasks": {
    "title": "任务",
    "addTodo": "添加待办",
    "editTodo": "编辑待办",
    "deleteTodo": "删除待办",
    "todoName": "待办名称",
    "todoNamePlaceholder": "输入待办名称...",
    "saveTodo": "保存",
    "cancelTodo": "取消",
    "noTodos": "没有待办事项",
    "confirmDelete": "确定要删除这个待办事项吗？",
    "clearAllTodos": "清除所有任务"
  },
  "tool": {
    "noDescription": "无描述",
    "approval": {
      "never": "从不",
      "always": "总是",
      "ask": "询问"
    }
  },
  "autocompletion": {
    "placeholder": "输入以搜索..."
  },
  "session": {
    "edit": "编辑会话",
    "save": "保存会话",
    "name": "会话名称",
    "namePlaceholder": "输入会话名称",
    "loadSettings": "加载设置",
    "loadMessages": "从该会话加载消息",
    "loadFiles": "从该会话加载上下文文件"
  },
  "costInfo": {
    "files": "文件",
    "repoMap": "仓库地图",
    "refreshRepoMap": "刷新仓库地图",
    "messages": "消息",
    "clearMessages": "清除消息历史",
    "agent": "代理",
    "aider": "Aider",
    "total": "全部的",
    "restartSession": "重启会话",
    "tokenUsage": "{{usedTokens}} / {{maxTokens}}"
  },
  "sessions": {
    "title": "会话",
    "empty": "无保存的会话",
    "loadMessages_one": "加载{{count}}条消息",
    "loadMessages_other": "加载{{count}}条消息",
    "loadFiles_one": "加载{{count}}个文件",
    "loadFiles_other": "加载{{count}}个文件",
    "saveAsNew": "另存为新",
    "exportAsMarkdown": "导出为Markdown",
    "exportAsImage": "导出为图片",
    "deleteTitle": "删除会话",
    "deleteConfirm": "确定要删除会话\"{{name}}\"?",
    "deleteWarning": "此操作无法撤销。",
    "save": "保存会话",
    "add": "添加新会话",
    "newSessionPlaceholder": "输入会话名称"
  },
  "commandOutput": {
    "command": "命令"
  },
  "reflectedMessage": {
    "title": "反射消息"
  },
  "responseMessage": {
    "inputTokens": "输入令牌",
    "outputTokens": "输出令牌",
    "cacheWriteTokens": "缓存写入令牌",
    "cacheReadTokens": "缓存读取令牌"
  },
  "thinkingAnswer": {
    "thinking": "思考中",
    "answer": "回答"
  },
  "toolMessage": {
    "toolLabel": "工具: {{server}}/{{tool}}",
    "arguments": "参数:",
    "executing": "执行工具...",
    "result": "结果:",
    "error": "执行工具时出错:",
    "denied": "拒绝访问",
    "deniedByReason": "用户拒绝: {{reason}}",
    "aider": {
      "addContextFiles": "添加文件到Aider上下文:\n{{paths}}",
      "dropContextFiles": "从Aider上下文删除文件:\n{{paths}}",
      "runPrompt": "在Aider中运行提示",
      "working": "Aider 正在工作中...",
      "finishedTask": "Aider 完成了任务。",
      "noChanges": "Aider 未进行任何更改。"
    },
    "power": {
      "fileRead": "读取文件",
      "fileWrite": {
        "overwrite": "覆盖文件",
        "append": "追加到文件",
        "createOnly": "仅创建文件"
      },
      "fileEdit": {
        "title": "编辑文件",
        "searchTerm": "搜索词",
        "regex": "正则表达式",
        "replacementText": "替换文本",
        "replaceAll": "替换所有"
      },
      "glob": {
        "title": "查找匹配模式的文件:",
        "foundFiles": "找到 {{count}} 文件",
        "foundMatches": "找到 {{count}} 个匹配项",
        "noMatches": "未找到匹配项。"
      },
      "grep": {
        "title": "在",
        "for": "搜索",
        "foundMatches": "找到 {{count}} 个匹配项",
        "noMatches": "未找到匹配项。",
        "contextLines": "({{count}} 行上下文)",
        "matchesCount": "({{count}} 个匹配)",
        "lineLabel": "第 {{lineNumber}} 行:",
        "contextLabel": "上下文:"
      },
      "bash": {
        "title": "执行 shell 命令",
        "exitCode": "退出码",
        "stdout": "标准输出",
        "stderr": "标准错误",
        "commandFailed": "命令失败"
      },
      "semanticSearch": {
        "title": "语义搜索:",
        "in": "在",
        "noMatches": "未找到匹配项。",
        "foundMatches": "找到 {{count}} 个匹配项",
        "score": " (得分: {{score}})",
        "resultLabel": "结果 {{index}}"
      },
      "fetch": {
        "title": "抓取网页内容",
        "contentTruncated": "内容已截断。完整内容可在复制中查看。"
      }
    },
    "subagents": {
      "groupRunning": "{{name}}: 子代理正在工作...",
      "groupCompleted": "{{name}}: 子代理已完成任务。",
      "running": "正在运行子代理...",
      "completed": "子代理执行了以下查询:",
      "prompt": "提示"
    },
    "errors": {
      "noSuchTool": "尝试使用未知工具: {{toolName}}",
      "invalidToolArguments": "工具参数无效: {{toolName}}"
    }
  },
  "codeBlock": {
    "revertChanges": "撤销更改"
  },
  "diffViewer": {
    "noChanges": "没有进行任何更改。内容相同。"
  },
  "promptField": {
    "placeholders": {
      "0": "更新 UserValidator 类以添加邮箱格式验证...",
      "1": "修复 DataProcessor.processBatch() 中的内存泄漏，通过关闭...",
      "2": "为 PaymentService.chargeCard() 添加错误处理，使用适当的...",
      "3": "创建 React 组件 UserProfileCard，包含 props 接口...",
      "4": "通过添加索引来优化 UserRepository.findByEmail() 中的 SQL 查询...",
      "5": "使用 Jest 和模拟为 AuthController.login() 添加单元测试...",
      "6": "在 ChartComponent 中实现缺失的 handleResize() 方法...",
      "7": "更新 package.json 添加 TypeScript 依赖并配置...",
      "8": "为 ContactForm 的 handleSubmit 函数添加输入验证...",
      "9": "修复 calculateTotal() 中小数值被错误处理的 bug...",
      "10": "使用 Winston 为 API 中间件添加请求日志记录...",
      "11": "为 Node.js 应用创建多阶段构建的 Dockerfile...",
      "12": "使用 express-rate-limit 为 /api/users 端点添加限流中间件...",
      "13": "在 TodoService 中实现缺失的 deleteTodo() 函数...",
      "14": "为 API 响应对象添加 TypeScript 接口...",
      "15": "修复移动端菜单显示不正确的 CSS 问题...",
      "16": "使用 dotenv 和 zod 添加环境变量验证...",
      "17": "创建数据库迁移，为 users 表添加 'last_login' 列...",
      "18": "为 React 应用添加错误边界以捕获组件错误...",
      "19": "在 ProductList 的 fetchProducts 方法中实现分页逻辑..."
    },
    "questionPlaceholder": "...或建议其他内容",
    "answers": {
      "yes": "(Y)是",
      "no": "(N)否",
      "always": "(A)总是",
      "dontAsk": "(D)不再询问"
    },
    "invalidCommand": "无效命令",
    "stopResponse": "停止响应",
    "sendMessage": "发送消息(Enter)",
    "clearChat": "清除聊天",
    "agentModeOnly": "仅在代理模式下可用"
  },
  "agentProfiles": {
    "title": "代理配置",
    "profileSettings": "代理配置: {{profileName}}",
    "newProfileName": "新配置",
    "manageProfiles": "管理配置",
    "profiles": "配置列表",
    "createNew": "创建新配置",
    "profileName": "名称",
    "profileDescription": "描述",
    "profileDescriptionPlaceholder": "描述此代理配置（用途、工具等）",
    "tools": "工具",
    "model": "模型"
  },
  "projectBar": {
    "editFormatTooltip": "这是用于编辑代码的格式。更改它可能会导致模型表现不如预期。",
    "aider": "Aider",
    "toggleSidebar": "切换侧边栏",
    "modelLibrary": "模型库"
  },
  "reasoningEffort": {
    "label": "推理",
    "tooltip": "推理工作量决定模型在采取行动前的思考程度。高推理工作量意味着模型会在采取行动前思考更多，但响应时间也会更长。",
    "none": "无",
    "low": "低",
    "medium": "中",
    "high": "高",
    "max": "最大"
  },
  "commands": {
    "add": "将文件添加到上下文。",
    "agent": "切换到代理模式。如果已在代理模式下，则打开代理模型选择器。命令后的任何文本都将用作提示。",
    "architect": "切换到架构师模式。架构师模式用于规划和执行代码库的更改。",
    "ask": "切换到提问模式。在不编辑任何文件的情况下询问有关代码库的问题。",
    "clear": "清除聊天历史记录",
    "clear-logs": "从聊天中移除日志消息",
    "code": "切换到代码模式。请求更改您的代码。",
    "commit": "提交仓库中未暂存的更改",
    "context": "切换到上下文模式。请求更改，Aider 将添加相关文件到上下文。",
    "compact": "总结对话",
    "copy-context": "将当前聊天上下文复制为 Markdown 格式，适合粘贴到 Web UI 中。",
    "drop": "从上下文中删除文件以释放上下文空间。",
    "edit-last": "编辑最后一条用户消息",
    "init": "使用项目信息初始化 AGENTS.md 规则文件",
    "agentModeOnly": "仅在代理模式下可用",
    "map": "打印当前仓库地图",
    "map-refresh": "强制刷新仓库地图",
    "model": "打开模型选择器",
    "read-only": "将文件添加到聊天中，这些文件仅供参考，或将添加的文件设为只读。",
    "redo": "重做上一个用户提示。",
    "reasoning-effort": "设置推理工作量级别（值：数字或低/中/高，取决于模型）",
    "reset": "删除所有文件并清除聊天历史记录",
    "run": "运行 shell 命令并可选地将输出添加到聊天中",
    "test": "运行预定义的测试命令，并在非零退出代码时将输出添加到聊天中",
    "think-tokens": "设置思考令牌预算（支持 8096、8k、10.5k、0.5M 等格式）",
    "tokens": "报告当前聊天上下文使用的令牌数量",
    "undo": "撤消 Aider 完成的最后一次 git 提交",
    "web": "抓取网页内容并保存到文件。使用 /web url [文件] 格式，其中 [文件] 为可选参数"
  },
  "telemetry": {
    "title": "遥测信息",
    "message": "为了帮助我们改进 AiderDesk，我们会收集匿名遥测数据。这包括功能使用情况和性能指标等信息。绝不会收集个人数据或代码。",
    "enabledLabel": "启用匿名遥测"
  },
  "promptBehavior": {
    "title": "提示行为",
    "showSuggestions": "显示建议",
    "automaticallyWhileTyping": "输入时自动显示",
    "onlyWhenTabPressed": "仅在按 TAB 键时显示",
    "suggestionsDelay": "建议延迟",
    "requireCommandConfirmation": "需要命令确认",
    "addCommand": "/add",
    "readOnlyCommand": "/read-only",
    "modelCommand": "/model",
    "modeSwitchingCommands": "模式切换命令 (/code, /agent, ...)",
    "modeAtSign": "@ 提及模式"
  },
  "server": {
    "description": "启用 服务器，允许您通过浏览器在端口 24337 访问 AiderDesk",
    "serverStatus": "服务器状态",
    "running": "运行中",
    "enableBasicAuth": "启用基本身份验证",
    "enableBasicAuthDescription": "需要用户名和密码用于浏览器访问和 API 调用",
    "username": "用户名",
    "password": "密码",
    "controlServer": "REST API 服务器",
    "starting": "正在启动...",
    "stopping": "正在停止...",
    "start": "启动",
    "stop": "停止",
    "stopped": "已停止",
    "tunnelStatus": "隧道状态",
    "tunnelRunning": "运行中",
    "tunnelStopped": "已停止",
    "tunnelStarting": "正在启动...",
    "tunnelStopping": "正在停止...",
    "copyUrl": "复制 URL",
    "authentication": "身份验证",
    "serverControl": "服务器控制",
    "tunnelManagement": "隧道管理",
    "tunnelDescription": "创建 Cloudflare 隧道以安全地从外部网络访问您的服务器。当对外暴露服务器时，请务必使用身份验证。"
  },
  "multiselect": {
    "noneSelected": "未选择",
    "allSelected": "已全选",
    "someSelected": "已选择 {{count}} 个",
    "selectAll": "全选"
  },
  "usageDashboard": {
    "title": "使用情况",
    "refresh": "刷新",
    "projects": "项目",
    "models": "模型",
    "dateRange": "日期范围",
    "total": "总计",
    "thisMonth": "本月",
    "today": "今天",
    "all": "全部",
    "groupBy": "分组方式",
    "periods": {
      "hour": "小时",
      "day": "天",
      "month": "月",
      "year": "年"
    },
    "tabs": {
      "table": "表格视图",
      "charts": "图表视图"
    },
    "charts": {
      "tokenUsageTrend": "令牌使用趋势",
      "costBreakdown": "成本明细",
      "messageBreakdown": "消息明细",
      "modelUsageDistribution": "模型使用分布",
      "inputTokens": "输入令牌",
      "outputTokens": "输出令牌",
      "noData": "所选时间段内无数据",
      "tokens": "令牌",
      "cost": "成本",
      "share": "份额",
      "moreItems": "+{{count}} 更多"
    },
    "error": {
      "fetch": "获取使用数据失败。"
    },
    "table": {
      "date": "日期",
      "project": "项目",
      "model": "模型",
      "input": "输入",
      "output": "输出",
      "cacheRead": "缓存读取",
      "cacheWrite": "缓存写入",
      "totalTokens": "总令牌数",
      "cost": "成本"
    }
  },
  "terminal": {
    "copyOutput": "复制终端输出到提示",
    "minimize": "最小化终端",
    "addTerminal": "添加新终端"
  },
  "contextMenu": {
    "copy": "复制",
    "paste": "粘贴",
    "close": "关闭",
    "closeOtherTabs": "关闭其他标签页",
    "closeAllTabs": "关闭所有标签页"
  }
}

================
File: src/common/agent.ts
================
import { AgentProfile, ContextMemoryMode, InvocationMode, Model, ReasoningEffort, ToolApprovalState } from '@common/types';
import {
  AIDER_TOOL_ADD_CONTEXT_FILES,
  AIDER_TOOL_DROP_CONTEXT_FILES,
  AIDER_TOOL_GET_CONTEXT_FILES,
  AIDER_TOOL_GROUP_NAME,
  AIDER_TOOL_RUN_PROMPT,
  POWER_TOOL_BASH,
  POWER_TOOL_FETCH,
  POWER_TOOL_FILE_EDIT,
  POWER_TOOL_FILE_READ,
  POWER_TOOL_FILE_WRITE,
  POWER_TOOL_GLOB,
  POWER_TOOL_GREP,
  POWER_TOOL_GROUP_NAME,
  POWER_TOOL_SEMANTIC_SEARCH,
  SUBAGENTS_TOOL_GROUP_NAME,
  SUBAGENTS_TOOL_RUN_TASK,
  TOOL_GROUP_NAME_SEPARATOR,
} from '@common/tools';
⋮----
// TODO: move to providers.ts
export type LlmProviderName =
  | 'anthropic'
  | 'azure'
  | 'bedrock'
  | 'cerebras'
  | 'deepseek'
  | 'gemini'
  | 'groq'
  | 'lmstudio'
  | 'ollama'
  | 'openai'
  | 'openai-compatible'
  | 'openrouter'
  | 'requesty'
  | 'vertex-ai'
  | 'zai-plan';
⋮----
export interface LlmProviderBase {
  name: LlmProviderName;
}
⋮----
export interface OllamaProvider extends LlmProviderBase {
  name: 'ollama';
  baseUrl: string;
}
⋮----
export interface OpenAiProvider extends LlmProviderBase {
  name: 'openai';
  apiKey: string;
  reasoningEffort?: ReasoningEffort;
}
export const isOpenAiProvider = (provider: LlmProviderBase): provider is OpenAiProvider
⋮----
export interface AzureProvider extends LlmProviderBase {
  name: 'azure';
  apiKey: string;
  resourceName: string;
  apiVersion?: string;
}
export const isAzureProvider = (provider: LlmProviderBase): provider is AzureProvider
⋮----
export interface AnthropicProvider extends LlmProviderBase {
  name: 'anthropic';
  apiKey: string;
}
export const isAnthropicProvider = (provider: LlmProviderBase): provider is AnthropicProvider
⋮----
export interface GeminiProvider extends LlmProviderBase {
  name: 'gemini';
  apiKey: string;
  customBaseUrl?: string;
  includeThoughts: boolean;
  thinkingBudget: number;
  useSearchGrounding: boolean;
}
⋮----
export const isGeminiProvider = (provider: LlmProviderBase): provider is GeminiProvider
⋮----
export interface VertexAiProvider extends LlmProviderBase {
  name: 'vertex-ai';
  project: string;
  location: string;
  googleCloudCredentialsJson?: string;
  includeThoughts: boolean;
  thinkingBudget: number;
}
⋮----
export const isVertexAiProvider = (provider: LlmProviderBase): provider is VertexAiProvider
⋮----
export interface LmStudioProvider extends LlmProviderBase {
  name: 'lmstudio';
  baseUrl: string;
}
export const isLmStudioProvider = (provider: LlmProviderBase): provider is LmStudioProvider
⋮----
export interface DeepseekProvider extends LlmProviderBase {
  name: 'deepseek';
  apiKey: string;
}
export const isDeepseekProvider = (provider: LlmProviderBase): provider is DeepseekProvider
⋮----
export interface GroqProvider extends LlmProviderBase {
  name: 'groq';
  apiKey: string;
}
export const isGroqProvider = (provider: LlmProviderBase): provider is GroqProvider
⋮----
export interface CerebrasProvider extends LlmProviderBase {
  name: 'cerebras';
  apiKey: string;
}
export const isCerebrasProvider = (provider: LlmProviderBase): provider is CerebrasProvider
⋮----
export interface BedrockProvider extends LlmProviderBase {
  name: 'bedrock';
  accessKeyId: string;
  secretAccessKey: string;
  region: string;
  sessionToken?: string;
}
export const isBedrockProvider = (provider: LlmProviderBase): provider is BedrockProvider
⋮----
export interface OpenAiCompatibleProvider extends LlmProviderBase {
  name: 'openai-compatible';
  apiKey: string;
  baseUrl?: string;
}
export const isOpenAiCompatibleProvider = (provider: LlmProviderBase): provider is OpenAiCompatibleProvider
⋮----
export const isOllamaProvider = (provider: LlmProviderBase): provider is OllamaProvider
⋮----
export interface OpenRouterProvider extends LlmProviderBase {
  name: 'openrouter';
  apiKey: string;
  // Advanced routing options
  requireParameters: boolean;
  order: string[];
  only: string[];
  ignore: string[];
  allowFallbacks: boolean;
  dataCollection: 'allow' | 'deny';
  quantizations: string[];
  sort: 'price' | 'throughput' | null;
}
⋮----
// Advanced routing options
⋮----
export const isOpenRouterProvider = (provider: LlmProviderBase): provider is OpenRouterProvider
⋮----
export interface RequestyProvider extends LlmProviderBase {
  name: 'requesty';
  apiKey: string;
  useAutoCache: boolean;
  reasoningEffort: ReasoningEffort;
}
export const isRequestyProvider = (provider: LlmProviderBase): provider is RequestyProvider
⋮----
export interface ZaiPlanProvider extends LlmProviderBase {
  name: 'zai-plan';
  apiKey: string;
}
export const isZaiPlanProvider = (provider: LlmProviderBase): provider is ZaiPlanProvider
⋮----
export type LlmProvider =
  | OpenAiProvider
  | AnthropicProvider
  | AzureProvider
  | GeminiProvider
  | VertexAiProvider
  | LmStudioProvider
  | BedrockProvider
  | DeepseekProvider
  | GroqProvider
  | CerebrasProvider
  | OpenAiCompatibleProvider
  | OllamaProvider
  | OpenRouterProvider
  | RequestyProvider
  | ZaiPlanProvider;
⋮----
// aider tools
⋮----
// power tools
⋮----
// subagent tools
⋮----
// Power tools
⋮----
// Aider
⋮----
// Aider with Power Search
⋮----
// TODO: move to providers.ts
⋮----
export const getDefaultProviderParams = <T extends LlmProvider>(providerName: LlmProviderName): T =>
⋮----
region: 'us-east-1', // Default region
⋮----
// For any other provider, create a base structure. This might need more specific handling if new providers are added.
⋮----
export const isSubagentEnabled = (agentProfile: AgentProfile, currentProfileId?: string): boolean =>
⋮----
export const getProviderModelId = (model: Model): string =>

================
File: src/common/api.ts
================
import {
  AutocompletionData,
  ContextFilesUpdatedData,
  CustomCommandsUpdatedData,
  InputHistoryData,
  LogData,
  ModelsData,
  ProjectData,
  ProjectSettings,
  QuestionData,
  ResponseChunkData,
  ResponseCompletedData,
  SessionData,
  SettingsData,
  TerminalData,
  TerminalExitData,
  TokensInfoData,
  UserMessageData,
  McpServerConfig,
  McpTool,
  ToolData,
  CommandOutputData,
  Mode,
  VersionsInfo,
  EditFormat,
  OS,
  ModelInfo,
  Model,
  TodoItem,
  UsageDataRow,
  EnvironmentVariable,
  CustomCommand,
  StartupMode,
  FileEdit,
  ClearProjectData,
  ProjectStartedData,
  CloudflareTunnelStatus,
  ProviderProfile,
  ProviderModelsData,
  ProvidersUpdatedData,
} from '@common/types';
⋮----
export interface ApplicationAPI {
  isOpenLogsDirectorySupported: () => boolean;
  openLogsDirectory: () => Promise<boolean>;
  loadSettings: () => Promise<SettingsData>;
  saveSettings: (settings: SettingsData) => Promise<SettingsData>;
  isManageServerSupported: () => boolean;
  startServer: (username?: string, password?: string) => Promise<boolean>;
  stopServer: () => Promise<boolean>;
  startCloudflareTunnel: () => Promise<boolean>;
  stopCloudflareTunnel: () => Promise<void>;
  getCloudflareTunnelStatus: () => Promise<CloudflareTunnelStatus>;
  startProject: (baseDir: string) => void;
  stopProject: (baseDir: string) => void;
  restartProject: (baseDir: string, startupMode?: StartupMode) => void;
  runPrompt: (baseDir: string, prompt: string, mode?: Mode) => void;
  redoLastUserPrompt: (baseDir: string, mode: Mode, updatedPrompt?: string) => void;
  answerQuestion: (baseDir: string, answer: string) => void;
  loadInputHistory: (baseDir: string) => Promise<string[]>;
  isOpenDialogSupported: () => boolean;
  showOpenDialog: (options: Electron.OpenDialogSyncOptions) => Promise<Electron.OpenDialogReturnValue>;
  getPathForFile: (file: File) => string;
  getOpenProjects: () => Promise<ProjectData[]>;
  addOpenProject: (baseDir: string) => Promise<ProjectData[]>;
  setActiveProject: (baseDir: string) => Promise<ProjectData[]>;
  removeOpenProject: (baseDir: string) => Promise<ProjectData[]>;
  updateOpenProjectsOrder: (baseDirs: string[]) => Promise<ProjectData[]>;
  updateMainModel: (baseDir: string, model: string) => void;
  updateWeakModel: (baseDir: string, model: string) => void;
  updateArchitectModel: (baseDir: string, model: string) => void;
  updateEditFormats: (baseDir: string, editFormats: Record<string, EditFormat>) => void;
  getProjectSettings: (baseDir: string) => Promise<ProjectSettings>;
  patchProjectSettings: (baseDir: string, settings: Partial<ProjectSettings>) => Promise<ProjectSettings>;
  getFilePathSuggestions: (currentPath: string, directoriesOnly?: boolean) => Promise<string[]>;
  getAddableFiles: (baseDir: string) => Promise<string[]>;
  addFile: (baseDir: string, filePath: string, readOnly?: boolean) => void;
  isValidPath: (baseDir: string, path: string) => Promise<boolean>;
  isProjectPath: (path: string) => Promise<boolean>;
  dropFile: (baseDir: string, path: string) => void;
  runCommand: (baseDir: string, command: string) => void;
  pasteImage: (baseDir: string) => void;
  scrapeWeb: (baseDir: string, url: string, filePath?: string) => Promise<string>;
  initProjectRulesFile: (baseDir: string) => Promise<void>;

  // Todo operations
  getTodos: (baseDir: string) => Promise<TodoItem[]>;
  addTodo: (baseDir: string, name: string) => Promise<TodoItem[]>;
  updateTodo: (baseDir: string, name: string, updates: Partial<TodoItem>) => Promise<TodoItem[]>;
  deleteTodo: (baseDir: string, name: string) => Promise<TodoItem[]>;
  clearAllTodos: (baseDir: string) => Promise<TodoItem[]>;

  loadMcpServerTools: (serverName: string, config?: McpServerConfig) => Promise<McpTool[] | null>;
  reloadMcpServers: (mcpServers: Record<string, McpServerConfig>, force?: boolean) => Promise<void>;

  saveSession: (baseDir: string, name: string) => Promise<boolean>;
  deleteSession: (baseDir: string, name: string) => Promise<boolean>;
  loadSessionMessages: (baseDir: string, name: string) => Promise<void>;
  loadSessionFiles: (baseDir: string, name: string) => Promise<void>;
  listSessions: (baseDir: string) => Promise<SessionData[]>;
  exportSessionToMarkdown: (baseDir: string) => Promise<void>;
  getRecentProjects: () => Promise<string[]>;
  addRecentProject: (baseDir: string) => Promise<void>;
  removeRecentProject: (baseDir: string) => Promise<void>;
  interruptResponse: (baseDir: string) => void;
  applyEdits: (baseDir: string, edits: FileEdit[]) => void;
  clearContext: (baseDir: string) => void;
  removeLastMessage: (baseDir: string) => void;
  compactConversation: (baseDir: string, mode: Mode, customInstructions?: string) => void;
  setZoomLevel: (level: number) => Promise<void>;

  getVersions: (forceRefresh?: boolean) => Promise<VersionsInfo | null>;
  downloadLatestAiderDesk: () => Promise<void>;

  getReleaseNotes: () => Promise<string | null>;
  clearReleaseNotes: () => Promise<void>;
  getOS: () => Promise<OS>;
  loadModelsInfo: () => Promise<Record<string, ModelInfo>>;
  queryUsageData: (from: string, to: string) => Promise<UsageDataRow[]>;
  getEffectiveEnvironmentVariable: (key: string, baseDir?: string) => Promise<EnvironmentVariable | undefined>;
  getProviderModels: () => Promise<ProviderModelsData>;
  getProviders: () => Promise<ProviderProfile[]>;
  updateProviders: (providers: ProviderProfile[]) => Promise<ProviderProfile[]>;
  upsertModel: (providerId: string, modelId: string, model: Model) => Promise<Model[]>;
  deleteModel: (providerId: string, modelId: string) => Promise<Model[]>;

  addSettingsUpdatedListener: (callback: (data: SettingsData) => void) => () => void;
  addResponseChunkListener: (baseDir: string, callback: (data: ResponseChunkData) => void) => () => void;
  addResponseCompletedListener: (baseDir: string, callback: (data: ResponseCompletedData) => void) => () => void;
  addLogListener: (baseDir: string, callback: (data: LogData) => void) => () => void;
  addContextFilesUpdatedListener: (baseDir: string, callback: (data: ContextFilesUpdatedData) => void) => () => void;
  addCustomCommandsUpdatedListener: (baseDir: string, callback: (data: CustomCommandsUpdatedData) => void) => () => void;
  addUpdateAutocompletionListener: (baseDir: string, callback: (data: AutocompletionData) => void) => () => void;
  addAskQuestionListener: (baseDir: string, callback: (data: QuestionData) => void) => () => void;
  addUpdateAiderModelsListener: (baseDir: string, callback: (data: ModelsData) => void) => () => void;
  addCommandOutputListener: (baseDir: string, callback: (data: CommandOutputData) => void) => () => void;
  addTokensInfoListener: (baseDir: string, callback: (data: TokensInfoData) => void) => () => void;
  addToolListener: (baseDir: string, callback: (data: ToolData) => void) => () => void;
  addUserMessageListener: (baseDir: string, callback: (data: UserMessageData) => void) => () => void;
  addInputHistoryUpdatedListener: (baseDir: string, callback: (data: InputHistoryData) => void) => () => void;
  addClearProjectListener: (baseDir: string, callback: (data: ClearProjectData) => void) => () => void;
  addProjectStartedListener: (baseDir: string, callback: (data: ProjectStartedData) => void) => () => void;
  addVersionsInfoUpdatedListener: (callback: (data: VersionsInfo) => void) => () => void;
  addProviderModelsUpdatedListener: (callback: (data: ProviderModelsData) => void) => () => void;
  addProvidersUpdatedListener: (callback: (data: ProvidersUpdatedData) => void) => () => void;
  addTerminalDataListener: (baseDir: string, callback: (data: TerminalData) => void) => () => void;
  addTerminalExitListener: (baseDir: string, callback: (data: TerminalExitData) => void) => () => void;
  addContextMenuListener: (callback: (params: Electron.ContextMenuParams) => void) => () => void;
  addOpenSettingsListener: (callback: (tabIndex: number) => void) => () => void;

  getCustomCommands: (baseDir: string) => Promise<CustomCommand[]>;
  runCustomCommand: (baseDir: string, commandName: string, args: string[], mode: Mode) => Promise<void>;

  // Terminal operations
  isTerminalSupported: () => boolean;
  createTerminal: (baseDir: string, cols?: number, rows?: number) => Promise<string>;
  writeToTerminal: (terminalId: string, data: string) => Promise<boolean>;
  resizeTerminal: (terminalId: string, cols: number, rows: number) => Promise<boolean>;
  closeTerminal: (terminalId: string) => Promise<boolean>;
  getTerminalForProject: (baseDir: string) => Promise<string | null>;
  getAllTerminalsForProject: (baseDir: string) => Promise<Array<{ id: string; baseDir: string; cols: number; rows: number }>>;
}
⋮----
// Todo operations
⋮----
// Terminal operations

================
File: src/common/tools.ts
================


================
File: src/common/types.ts
================
import {
  AnthropicProvider,
  BedrockProvider,
  DeepseekProvider,
  GeminiProvider,
  GroqProvider,
  LlmProvider,
  LmStudioProvider,
  OllamaProvider,
  OpenAiCompatibleProvider,
  OpenAiProvider,
  OpenRouterProvider,
  RequestyProvider,
  VertexAiProvider,
} from '@common/agent';
import { z } from 'zod';
⋮----
import type { AssistantContent, ToolContent, UserContent } from 'ai';
import type { JsonSchema } from '@n8n/json-schema-to-zod';
⋮----
export type LocalizedString = {
  key: string;
  params?: Record<string, unknown>;
};
⋮----
export type Mode = 'code' | 'ask' | 'architect' | 'context' | 'agent';
⋮----
export type EditFormat = 'diff' | 'diff-fenced' | 'whole' | 'udiff' | 'udiff-simple' | 'patch';
⋮----
export enum ReasoningEffort {
  High = 'high',
  Medium = 'medium',
  Low = 'low',
  Minimal = 'minimal',
  None = 'none',
}
⋮----
export enum ContextMemoryMode {
  Off = 'off',
  FullContext = 'full-context',
  LastMessage = 'last-message',
}
⋮----
export interface ResponseChunkData {
  messageId: string;
  baseDir: string;
  chunk: string;
  reflectedMessage?: string;
  promptContext?: PromptContext;
}
⋮----
export interface ResponseCompletedData {
  messageId: string;
  baseDir: string;
  content: string;
  reflectedMessage?: string;
  editedFiles?: string[];
  commitHash?: string;
  commitMessage?: string;
  diff?: string;
  usageReport?: UsageReportData;
  sequenceNumber?: number;
  promptContext?: PromptContext;
}
⋮----
export interface CommandOutputData {
  baseDir: string;
  command: string;
  output: string;
}
⋮----
export type LogLevel = 'info' | 'warning' | 'error' | 'loading';
⋮----
export interface LogData {
  baseDir: string;
  level: LogLevel;
  message?: string;
  finished?: boolean;
  promptContext?: PromptContext;
}
⋮----
export interface ToolData {
  baseDir: string;
  id: string;
  serverName: string;
  toolName: string;
  args?: Record<string, unknown>;
  response?: string;
  usageReport?: UsageReportData;
  promptContext?: PromptContext;
}
⋮----
export interface ContextFilesUpdatedData {
  baseDir: string;
  files: ContextFile[];
}
⋮----
export interface CustomCommandsUpdatedData {
  baseDir: string;
  commands: CustomCommand[];
}
⋮----
export interface AutocompletionData {
  baseDir: string;
  words: string[];
  allFiles: string[];
  models: string[];
}
⋮----
export interface SessionData {
  name: string;
  messages?: number;
  files?: number;
}
⋮----
export interface Answer {
  text: string;
  shortkey: string;
}
⋮----
export interface QuestionData {
  baseDir: string;
  text: string;
  subject?: string;
  isGroupQuestion?: boolean;
  answers?: Answer[];
  defaultAnswer: string;
  internal?: boolean;
  key?: string;
}
⋮----
export type ContextFileSourceType = 'companion' | 'aider' | 'app' | string;
⋮----
export enum OS {
  Windows = 'windows',
  Linux = 'linux',
  MacOS = 'macos',
}
⋮----
export interface CloudflareTunnelStatus {
  isRunning: boolean;
  url?: string;
}
⋮----
export enum MessageRole {
  User = 'user',
  Assistant = 'assistant',
}
⋮----
// Base interface for all context messages with usage reporting
interface BaseContextMessage {
  id: string;
  usageReport?: UsageReportData;
  promptContext?: PromptContext;
}
⋮----
// User message with usage report
export interface ContextUserMessage extends BaseContextMessage {
  role: 'user';
  content: UserContent;
}
⋮----
// Assistant message with full response metadata
export interface ContextAssistantMessage extends BaseContextMessage {
  role: 'assistant';
  content: AssistantContent;
  reflectedMessage?: string;
  editedFiles?: string[];
  commitHash?: string;
  commitMessage?: string;
  diff?: string;
}
⋮----
// Tool message with usage report
export interface ContextToolMessage extends BaseContextMessage {
  role: 'tool';
  content: ToolContent;
}
⋮----
// Union type for enhanced context messages
export type ContextMessage = ContextUserMessage | ContextAssistantMessage | ContextToolMessage;
⋮----
export interface ContextFile {
  path: string;
  readOnly?: boolean;
}
⋮----
export interface WindowState {
  width: number;
  height: number;
  x: number | undefined;
  y: number | undefined;
  isMaximized: boolean;
}
⋮----
export type ProjectSettings = z.infer<typeof ProjectSettingsSchema>;
⋮----
export interface ProjectData {
  active: boolean;
  baseDir: string;
  settings: ProjectSettings;
}
⋮----
export interface RawModelInfo {
  max_input_tokens: number;
  max_output_tokens: number;
  input_cost_per_token: number;
  output_cost_per_token: number;
  supports_function_calling: boolean;
  supports_tool_choice: boolean;
  litellm_provider: string;
}
⋮----
export interface ModelsData {
  baseDir: string;
  mainModel: string;
  weakModel?: string | null;
  architectModel?: string | null;
  reasoningEffort?: string;
  thinkingTokens?: string;
  editFormat?: EditFormat;
  info?: RawModelInfo;
  error?: string;
}
⋮----
export enum ToolApprovalState {
  Always = 'always',
  Never = 'never',
  Ask = 'ask',
}
⋮----
export enum StartupMode {
  Empty = 'empty',
  Last = 'last',
}
⋮----
export enum SuggestionMode {
  Automatically = 'automatically',
  OnTab = 'onTab',
  MentionAtSign = 'mentionAtSign',
}
⋮----
export interface PromptBehavior {
  suggestionMode: SuggestionMode;
  suggestionDelay: number;
  requireCommandConfirmation: {
    add: boolean;
    readOnly: boolean;
    model: boolean;
    modeSwitching: boolean;
  };
  useVimBindings: boolean;
}
⋮----
export enum InvocationMode {
  OnDemand = 'on-demand',
  Automatic = 'automatic',
}
⋮----
export interface SubagentConfig {
  enabled: boolean;
  contextMemory: ContextMemoryMode;
  systemPrompt: string;
  invocationMode: InvocationMode;
  color: string;
  description: string;
}
⋮----
export interface AgentProfile {
  id: string;
  name: string;
  provider: string;
  model: string;
  maxIterations: number;
  maxTokens: number;
  minTimeBetweenToolCalls: number; // in milliseconds
  temperature: number; // 0-1 for controlling randomness/creativity
  enabledServers: string[];
  toolApprovals: Record<string, ToolApprovalState>;
  includeContextFiles: boolean;
  includeRepoMap: boolean;
  usePowerTools: boolean;
  useAiderTools: boolean;
  useTodoTools: boolean;
  useSubagents: boolean;
  customInstructions: string;
  autoApprove: boolean;
  subagent: SubagentConfig;
  isSubagent?: boolean; // flag to indicate if this profile is being used as a subagent
}
⋮----
minTimeBetweenToolCalls: number; // in milliseconds
temperature: number; // 0-1 for controlling randomness/creativity
⋮----
isSubagent?: boolean; // flag to indicate if this profile is being used as a subagent
⋮----
export interface EnvironmentVariable {
  value: string;
  source: string;
}
⋮----
export type Theme = (typeof THEMES)[number];
⋮----
export type Font = (typeof FONTS)[number];
⋮----
export interface SettingsData {
  onboardingFinished?: boolean;
  language: string;
  startupMode?: StartupMode;
  zoomLevel?: number;
  notificationsEnabled?: boolean;
  theme?: Theme;
  font?: Font;
  fontSize?: number;
  renderMarkdown: boolean;
  virtualizedRendering: boolean;
  aiderDeskAutoUpdate: boolean;
  aider: {
    options: string;
    environmentVariables: string;
    addRuleFiles: boolean;
    autoCommits: boolean;
    cachingEnabled: boolean;
    watchFiles: boolean;
    confirmBeforeEdit: boolean;
  };
  preferredModels: string[];
  agentProfiles: AgentProfile[];
  mcpServers: Record<string, McpServerConfig>;
  llmProviders: {
    openai?: OpenAiProvider;
    anthropic?: AnthropicProvider;
    gemini?: GeminiProvider;
    groq?: GroqProvider;
    bedrock?: BedrockProvider;
    deepseek?: DeepseekProvider;
    ollama?: OllamaProvider;
    lmstudio?: LmStudioProvider;
    'openai-compatible'?: OpenAiCompatibleProvider;
    openrouter?: OpenRouterProvider;
    requesty?: RequestyProvider;
    'vertex-ai'?: VertexAiProvider;
  };
  telemetryEnabled: boolean;
  telemetryInformed?: boolean;
  promptBehavior: PromptBehavior;
  server: {
    enabled: boolean;
    basicAuth: {
      enabled: boolean;
      username: string;
      password: string;
    };
  };
}
⋮----
export interface ProviderProfile {
  id: string;
  name?: string;
  provider: LlmProvider;
  headers?: Record<string, string>;
}
⋮----
export interface ProvidersUpdatedData {
  providers: ProviderProfile[];
}
⋮----
export interface Group {
  id: string;
  name?: string | LocalizedString;
  color?: string;
  finished?: boolean;
}
⋮----
export interface PromptContext {
  id: string;
  group?: Group;
}
⋮----
export interface ProjectStartedData {
  baseDir: string;
}
⋮----
export interface ClearProjectData {
  baseDir: string;
  clearMessages: boolean;
  clearSession: boolean;
}
⋮----
export interface UsageReportData {
  model: string;
  sentTokens: number;
  receivedTokens: number;
  messageCost: number;
  cacheWriteTokens?: number;
  cacheReadTokens?: number;
  aiderTotalCost?: number;
  agentTotalCost?: number;
}
⋮----
export interface TokensCost {
  tokens: number;
  tokensEstimated?: boolean;
  cost: number;
}
⋮----
export interface TokensInfoData {
  baseDir: string;
  chatHistory: TokensCost;
  files: Record<string, TokensCost>;
  repoMap: TokensCost;
  systemMessages: TokensCost;
  agent?: TokensCost;
}
⋮----
export interface InputHistoryData {
  baseDir: string;
  messages: string[];
}
⋮----
export interface UserMessageData {
  baseDir: string;
  content: string;
  mode?: Mode;
  promptContext?: PromptContext;
}
⋮----
export interface FileEdit {
  path: string;
  original: string;
  updated: string;
}
⋮----
export interface GenericTool {
  groupName: string;
  name: string;
  description: string;
}
⋮----
export interface McpTool {
  serverName: string;
  name: string;
  description?: string;
  inputSchema: JsonSchema;
}
⋮----
export interface McpServerConfig {
  command?: string;
  args?: string[];
  env?: Readonly<Record<string, string>>;
  url?: string;
  headers?: Readonly<Record<string, string>>;
}
⋮----
export interface VersionsInfo {
  aiderDeskCurrentVersion?: string | null;
  aiderCurrentVersion?: string | null;
  aiderDeskAvailableVersion?: string | null;
  aiderAvailableVersion?: string | null;
  aiderDeskDownloadProgress?: number;
  aiderDeskNewVersionReady?: boolean;
  releaseNotes?: string | null;
}
⋮----
export enum FileWriteMode {
  Overwrite = 'overwrite',
  Append = 'append',
  CreateOnly = 'create_only',
}
⋮----
export interface ModelInfo {
  maxInputTokens: number;
  maxOutputTokens: number;
  inputCostPerToken: number;
  outputCostPerToken: number;
  cacheWriteInputTokenCost?: number;
  cacheReadInputTokenCost?: number;
}
⋮----
export interface Task {
  id: string;
  title: string;
  completed: boolean;
}
⋮----
export interface TodoItem {
  name: string;
  completed: boolean;
}
⋮----
export interface UsageDataRow {
  timestamp: string;
  project: string;
  model: string;
  input_tokens: number;
  output_tokens: number;
  cache_read_tokens: number;
  cache_write_tokens: number;
  cost: number;
}
⋮----
export interface Model {
  id: string;
  providerId: string;
  maxInputTokens?: number;
  maxOutputTokens?: number;
  inputCostPerToken?: number;
  outputCostPerToken?: number;
  cacheWriteInputTokenCost?: number;
  cacheReadInputTokenCost?: number;
  supportsTools?: boolean;
  isCustom?: boolean;
  isHidden?: boolean;
  providerOverrides?: Record<string, unknown>;
}
⋮----
export interface ProviderModelsData {
  models?: Model[];
  loading?: boolean;
  errors?: Record<string, string>;
}
⋮----
export interface ModelOverrides {
  version: number;
  models: Model[];
}
⋮----
export interface CustomCommandArgument {
  description: string;
  required?: boolean;
}
⋮----
export interface CustomCommand {
  name: string;
  description: string;
  arguments: CustomCommandArgument[];
  template: string;
  includeContext?: boolean;
  autoApprove?: boolean;
}
⋮----
export interface TerminalData {
  terminalId: string;
  baseDir: string;
  data: string;
}
⋮----
export interface TerminalExitData {
  terminalId: string;
  baseDir: string;
  exitCode: number;
  signal?: number;
}

================
File: src/common/utils.ts
================
import fs from 'fs/promises';
⋮----
import { TOOL_GROUP_NAME_SEPARATOR } from '@common/tools';
⋮----
import { OS, ProjectSettings, SettingsData, UsageReportData } from './types';
⋮----
type TextContent =
  | string
  | {
      type: 'text';
      text: string;
    };
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const isTextContent = (content: any): content is TextContent
⋮----
export const extractTextContent = (content: unknown): string =>
⋮----
export const delay = (ms: number): Promise<void>
⋮----
export const parseUsageReport = (model: string, report: string): UsageReportData =>
⋮----
const parseTokens = (tokenStr: string): number =>
⋮----
export const normalizeBaseDir = (
  baseDir: string,
  os: OS = process.platform === 'win32' ? OS.Windows : process.platform === 'darwin' ? OS.MacOS : OS.Linux,
): string =>
⋮----
// On Windows, paths are case-insensitive so we normalize to lowercase
⋮----
// Handle WSL paths like \\wsl.localhost\Ubuntu\home\user\...
⋮----
// Find the third backslash which marks the end of the distro name
⋮----
// Extract the path after \\wsl.localhost\<distro_name>\
⋮----
// Replace backslashes with forward slashes
⋮----
// Otherwise, return the path as is
⋮----
export const compareBaseDirs = (baseDir1: string, baseDir2: string, os?: OS): boolean =>
⋮----
export const fileExists = async (fileName: string): Promise<boolean> =>
⋮----
export const extractServerNameToolName = (toolCallName: string): [string, string] =>
⋮----
export const isMessageEmpty = (content: unknown): boolean =>
⋮----
export const getLanguageFromPath = (path: string): string =>
⋮----
// Add more mappings as needed
⋮----
return 'text'; // Default to plain text
⋮----
export const isURL = (url: string): boolean =>
⋮----
export const getActiveAgentProfile = (settings: SettingsData | null, projectSettings: ProjectSettings | null) =>

================
File: src/main/agent/middlewares/extract-reasoning-middleware.ts
================
import type { LanguageModelV1Middleware, LanguageModelV1StreamPart } from 'ai';
⋮----
import logger from '@/logger';
⋮----
/**
 * Extract an XML-tagged reasoning section from the generated text and exposes it
 * as a `reasoning` property on the result.
 *
 * @param tagName - The name of the XML tag to extract reasoning from.
 * @param separator - The separator to use between reasoning and text sections.
 */
⋮----
// check for additional character at the end, e.g. `
// if not found, continue with the next chunk
⋮----
// if there is a backtick before the closing tag and after, publish the buffer, as this is not ending
⋮----
// this should not happen
⋮----
// set and publish the rest of the buffer as non reasoning
⋮----
/**
 * Returns the index of the start of the searchedText in the text, or null if it
 * is not found.
 */
⋮----
// Return null immediately if searchedText is empty.
⋮----
// Check if the searchedText exists as a direct substring of text.
⋮----
// Otherwise, look for the largest suffix of "text" that matches
// a prefix of "searchedText". We go from the end of text inward.

================
File: src/main/agent/tools/aider.ts
================
import fs from 'fs/promises';
import path from 'path';
⋮----
import { tool } from 'ai';
import { z } from 'zod';
import { v4 as uuidv4 } from 'uuid';
import {
  TOOL_GROUP_NAME_SEPARATOR,
  AIDER_TOOL_GROUP_NAME as TOOL_GROUP_NAME,
  AIDER_TOOL_GET_CONTEXT_FILES as TOOL_GET_CONTEXT_FILES,
  AIDER_TOOL_ADD_CONTEXT_FILES as TOOL_ADD_CONTEXT_FILES,
  AIDER_TOOL_DROP_CONTEXT_FILES as TOOL_DROP_CONTEXT_FILES,
  AIDER_TOOL_RUN_PROMPT as TOOL_RUN_PROMPT,
  AIDER_TOOL_DESCRIPTIONS,
} from '@common/tools';
import { AgentProfile, PromptContext, ToolApprovalState } from '@common/types';
⋮----
import { ApprovalManager } from './approval-manager';
⋮----
import type { ToolSet } from 'ai';
⋮----
import { Project } from '@/project';
⋮----
export const createAiderToolset = (project: Project, profile: AgentProfile, promptContext?: PromptContext): ToolSet =>
⋮----
// This condition is now met if the file initially existed or was just created
⋮----
// Only add to results if it wasn't handled by the creation logic above
⋮----
// Ask the question and wait for the answer
⋮----
// Notify that we are still processing after aider finishes
⋮----
// Filter out tools that are set to Never in toolApprovals

================
File: src/main/agent/tools/approval-manager.ts
================
import { AgentProfile, QuestionData, ToolApprovalState } from '@common/types';
⋮----
import { Project } from '@/project';
⋮----
export class ApprovalManager
⋮----
constructor(
⋮----
public async handleApproval(key: string, text: string, subject?: string): Promise<[boolean, string | undefined]>
⋮----
return [true, undefined]; // Auto-approve
⋮----
return [true, undefined]; // Pre-approved
⋮----
return [true, undefined]; // Approved and remember for this run
⋮----
return [true, undefined]; // Approved for this instance
⋮----
return [false, userInput]; // Not approved

================
File: src/main/agent/tools/helpers.ts
================
import { tool } from 'ai';
import { z } from 'zod';
import {
  TOOL_GROUP_NAME_SEPARATOR,
  HELPERS_TOOL_GROUP_NAME as TOOL_GROUP_NAME,
  HELPERS_TOOL_NO_SUCH_TOOL as TOOL_NO_SUCH_TOOL,
  HELPERS_TOOL_INVALID_TOOL_ARGUMENTS as TOOL_INVALID_TOOL_ARGUMENTS,
} from '@common/tools';
⋮----
import type { ToolSet } from 'ai';
⋮----
export const createHelpersToolset = (): ToolSet =>
⋮----
// This tool's result is primarily for the LLM's internal reasoning,
// informing it that its previous attempt failed because the tool was invalid.
⋮----
// This tool informs the LLM about the argument validation error.

================
File: src/main/agent/tools/power.ts
================
import fs from 'fs/promises';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';
⋮----
import { is } from '@electron-toolkit/utils';
import { tool, type ToolSet } from 'ai';
import { z } from 'zod';
import { glob } from 'glob';
import { AgentProfile, FileWriteMode, PromptContext, ToolApprovalState } from '@common/types';
import {
  POWER_TOOL_BASH as TOOL_BASH,
  POWER_TOOL_DESCRIPTIONS,
  POWER_TOOL_FETCH as TOOL_FETCH,
  POWER_TOOL_FILE_EDIT as TOOL_FILE_EDIT,
  POWER_TOOL_FILE_READ as TOOL_FILE_READ,
  POWER_TOOL_FILE_WRITE as TOOL_FILE_WRITE,
  POWER_TOOL_GLOB as TOOL_GLOB,
  POWER_TOOL_GREP as TOOL_GREP,
  POWER_TOOL_GROUP_NAME as TOOL_GROUP_NAME,
  POWER_TOOL_SEMANTIC_SEARCH as TOOL_SEMANTIC_SEARCH,
  TOOL_GROUP_NAME_SEPARATOR,
} from '@common/tools';
import { isBinary } from 'istextorbinary';
import { isURL } from '@common/utils';
import { search, searchSchema } from '@buger/probe';
⋮----
import { ApprovalManager } from './approval-manager';
⋮----
import { PROBE_BINARY_PATH } from '@/constants';
import { Project } from '@/project';
import logger from '@/logger';
import { filterIgnoredFiles, scrapeWeb } from '@/utils';
⋮----
export const createPowerToolset = (project: Project, profile: AgentProfile, promptContext?: PromptContext): ToolSet =>
⋮----
// Sanitize escape characters from searchTerm and replacementText
const sanitize = (str: string) =>
⋮----
// Check if string contains single escaped backslashes (like \n, \t, etc.)
⋮----
// Only sanitize if no single escaped backslashes are found
⋮----
// Remove leading backslash
⋮----
// Remove escaped newlines, quotes, tabs, etc. only when they have double backslashes
⋮----
const addToGit = async () =>
⋮----
// Add the new file to git staging
⋮----
// Continue even if git add fails, as the file was created successfully
⋮----
absolute: false, // Keep paths relative to cwd for easier processing
⋮----
// Convert to absolute paths for filtering, then back to relative
⋮----
// Ensure paths are relative to project.baseDir
⋮----
// Filter out ignored files in batch
⋮----
const searchRegex = new RegExp(searchTerm, caseSensitive ? undefined : 'i'); // Simpler for line-by-line test
⋮----
// Use parameter maxTokens if provided, otherwise use the default
⋮----
// If path is "." or "./", use the project baseDir
⋮----
// we need to set the PROBE_PATH env variable for production asar.unpacked, as the binary is not determined correctly inside the probe package
⋮----
// Filter out tools that are set to Never in toolApprovals

================
File: src/main/agent/tools/subagents.ts
================
import { tool, type ToolSet } from 'ai';
import { z } from 'zod';
import { AgentProfile, ContextMemoryMode, ContextMessage, InvocationMode, PromptContext, SettingsData } from '@common/types';
import { v4 as uuidv4 } from 'uuid';
import { SUBAGENTS_TOOL_GROUP_NAME, SUBAGENTS_TOOL_RUN_TASK, TOOL_GROUP_NAME_SEPARATOR } from '@common/tools';
import { DEFAULT_AGENT_PROFILE, isSubagentEnabled } from '@common/agent';
import { extractServerNameToolName } from '@common/utils';
⋮----
import { Project } from '@/project';
import logger from '@/logger';
⋮----
const getSubagentId = (subagent: AgentProfile): string =>
⋮----
export const createSubagentsToolset = (
  settings: SettingsData,
  project: Project,
  profile: AgentProfile,
  abortSignal?: AbortSignal,
  messages: ContextMessage[] = [],
  resultMessages: ContextMessage[] = [],
): ToolSet =>
⋮----
const generateSubagentsRunTaskDescription = (): string =>
⋮----
// Create a subagent profile based on the selected subagent
⋮----
useTodoTools: false, // Disable todo tools for simplicity,
useSubagents: false, // Disable nested subagents
⋮----
// Create promptContext with working group
⋮----
const getSubagentContextMessages = (contextMemory: ContextMemoryMode) =>
⋮----
const findResultMessagesForToolCallId = (toolCallId: string) =>
⋮----
// @ts-expect-error subagentId is expected to be in the args
⋮----
// @ts-expect-error prompt is expected to be in the args
⋮----
// Run the subagent with the focused context
⋮----
// Update promptContext to finished state with success
⋮----
// Update promptContext to finished state with error

================
File: src/main/agent/tools/todo.ts
================
import { tool, type ToolSet } from 'ai';
import { z } from 'zod';
import {
  TODO_TOOL_CLEAR_ITEMS,
  TODO_TOOL_DESCRIPTIONS,
  TODO_TOOL_GET_ITEMS,
  TODO_TOOL_GROUP_NAME,
  TODO_TOOL_SET_ITEMS,
  TODO_TOOL_UPDATE_ITEM_COMPLETION,
  TOOL_GROUP_NAME_SEPARATOR,
} from '@common/tools';
import { AgentProfile, PromptContext, ToolApprovalState } from '@common/types';
⋮----
import { ApprovalManager } from './approval-manager';
⋮----
import { Project } from '@/project';
⋮----
export const createTodoToolset = (project: Project, profile: AgentProfile, promptContext?: PromptContext): ToolSet =>

================
File: src/main/agent/agent.ts
================
import fs from 'fs/promises';
import path from 'path';
import { homedir } from 'os';
⋮----
import dotenv from 'dotenv';
import { v4 as uuidv4 } from 'uuid';
import {
  AgentProfile,
  ContextFile,
  ContextMessage,
  ContextUserMessage,
  McpTool,
  PromptContext,
  ProviderProfile,
  SettingsData,
  ToolApprovalState,
  UsageReportData,
} from '@common/types';
import {
  APICallError,
  type CoreMessage,
  type FinishReason,
  generateText,
  type ImagePart,
  InvalidToolArgumentsError,
  NoSuchToolError,
  type StepResult,
  streamText,
  type Tool,
  type ToolExecutionOptions,
  type ToolSet,
  wrapLanguageModel,
} from 'ai';
import { delay, extractServerNameToolName } from '@common/utils';
import { LlmProvider, LlmProviderName } from '@common/agent';
// @ts-expect-error gpt-tokenizer is not typed
import { countTokens } from 'gpt-tokenizer/model/gpt-4o';
import { jsonSchemaToZod } from '@n8n/json-schema-to-zod';
import { Client as McpSdkClient } from '@modelcontextprotocol/sdk/client/index.js';
import { ZodSchema } from 'zod';
import { isBinary } from 'istextorbinary';
import { fileTypeFromBuffer } from 'file-type';
import { TOOL_GROUP_NAME_SEPARATOR } from '@common/tools';
⋮----
import { createPowerToolset } from './tools/power';
import { createTodoToolset } from './tools/todo';
import { getSystemPrompt } from './prompts';
import { createAiderToolset } from './tools/aider';
import { createHelpersToolset } from './tools/helpers';
import { MCP_CLIENT_TIMEOUT, McpManager } from './mcp-manager';
import { ApprovalManager } from './tools/approval-manager';
import { ANSWER_RESPONSE_START_TAG, extractPromptContextFromToolResult, THINKING_RESPONSE_STAR_TAG } from './utils';
import { extractReasoningMiddleware } from './middlewares/extract-reasoning-middleware';
⋮----
import type { JsonSchema } from '@n8n/json-schema-to-zod';
⋮----
import { AIDER_DESK_PROJECT_RULES_DIR } from '@/constants';
import { Project } from '@/project';
import { Store } from '@/store';
import logger from '@/logger';
import { parseAiderEnv } from '@/utils';
import { optimizeMessages } from '@/agent/optimizer';
import { ModelManager } from '@/models/model-manager';
import { TelemetryManager } from '@/telemetry/telemetry-manager';
import { ResponseMessage } from '@/messages';
import { createSubagentsToolset } from '@/agent/tools/subagents';
⋮----
export class Agent
⋮----
constructor(
⋮----
private invalidateAiderEnv()
⋮----
settingsChanged(oldSettings: SettingsData, newSettings: SettingsData)
⋮----
private async getFilesContentForPrompt(files: ContextFile[], project: Project): Promise<
⋮----
// If binary, try to detect if it's an image using image-type and return base64
⋮----
// Read file as text
⋮----
// Add line numbers to content
⋮----
// Process the results and separate text files from images
⋮----
// Add to imageParts array
⋮----
// Add to textFileContents array
⋮----
private async getContextFilesMessages(project: Project, profile: AgentProfile, contextFiles: ContextFile[]): Promise<CoreMessage[]>
⋮----
// Filter out rule files as they are already included in the system prompt
⋮----
// Check if the file is within the rules directory
⋮----
// Separate readonly and editable files
⋮----
// Process readonly files first
⋮----
// Process editable files
⋮----
private async getWorkingFilesMessages(contextFiles: ContextFile[]): Promise<CoreMessage[]>
⋮----
private async getAvailableTools(
    project: Project,
    profile: AgentProfile,
    llmProvider: LlmProvider,
    messages?: ContextMessage[],
    resultMessages?: ContextMessage[],
    abortSignal?: AbortSignal,
    promptContext?: PromptContext,
): Promise<ToolSet>
⋮----
// Build the toolSet directly from enabled clients and tools
⋮----
// Skip if serverName is not in the profile's enabledServers
⋮----
// Process tools for this enabled server
⋮----
// Check approval state first from the profile
⋮----
// Skip tools marked as 'Never' approved
⋮----
return; // Do not add the tool if it's never approved
⋮----
// Add helper tools
⋮----
private convertMpcToolToAiSdkTool(
    providerName: LlmProviderName,
    serverName: string,
    project: Project,
    profile: AgentProfile,
    mcpClient: McpSdkClient,
    toolDef: McpTool,
    approvalManager: ApprovalManager,
    promptContext?: PromptContext,
): Tool
⋮----
// Fallback to a generic object schema if conversion fails
⋮----
const execute = async (args:
⋮----
// --- Tool Approval Logic ---
⋮----
// --- End Tool Approval Logic ---
⋮----
// Enforce minimum time between tool calls
⋮----
// Update last tool call time
⋮----
// Update last tool call time even if there's an error
⋮----
// Return an error message string to the agent
⋮----
/**
   * Fixes the input schema for various providers.
   */
private fixInputSchema(provider: LlmProviderName, inputSchema: JsonSchema): JsonSchema
⋮----
// Deep clone to avoid modifying the original schema
⋮----
// gemini does not like "default" in the schema
⋮----
// gemini requires at least one property in the schema
⋮----
async runAgent(
    project: Project,
    profile: AgentProfile,
    prompt: string,
    promptContext?: PromptContext,
    contextMessages: ContextMessage[] = project.getContextMessages(),
    contextFiles: ContextFile[] = project.getContextFiles(),
    systemPrompt?: string,
    abortSignal?: AbortSignal,
): Promise<ContextMessage[]>
⋮----
// Create new abort controller for this run only if abortSignal is not provided
⋮----
// add user message
⋮----
// reinitialize MCP clients for the current project and wait for them to be ready
⋮----
// repairToolCall function that attempts to repair tool calls
const repairToolCall = async (
⋮----
// If the tool doesn't exist, return a call to the helper tool
// to inform the LLM about the missing tool.
⋮----
// If the arguments are invalid, return a call to the helper tool
// to inform the LLM about the argument error.
⋮----
toolArgs: JSON.stringify(error.toolArgs), // Pass the problematic args
error: error.message, // Pass the validation error message
⋮----
// Attempt generic repair for other types of errors
⋮----
// Ensure args are stringified for the AI SDK tool call format
⋮----
: null; // Return null if the LLM couldn't repair the call
⋮----
// @ts-expect-error checking keys in error
⋮----
// @ts-expect-error key exists
⋮----
// try again
⋮----
// stop
⋮----
// Check for 'stop' with trailing tool message
⋮----
// Clean up abort controller only if we created it
⋮----
// Always send a final "finished" message, regardless of whether there was text or tools
⋮----
private async getLlmEnv(project: Project)
⋮----
// File does not exist or other read error, ignore
⋮----
// File does not exist or other read error, ignore
⋮----
private getAiderEnv(): Record<string, string>
⋮----
private async prepareMessages(project: Project, profile: AgentProfile, contextMessages: CoreMessage[], contextFiles: ContextFile[]): Promise<CoreMessage[]>
⋮----
// Add repo map if enabled
⋮----
// Add context files with content or just list of working files
⋮----
// Add message history
⋮----
async estimateTokens(project: Project, profile: AgentProfile): Promise<number>
⋮----
// Format tools for the prompt
⋮----
parameters: tool.parameters ? tool.parameters.describe() : '', // Get Zod schema description
⋮----
// Add tool definitions and system prompt to the beginning
⋮----
role: msg.role === 'tool' ? 'user' : msg.role, // Map 'tool' role to user message as gpt-tokenizer does not support tool messages
content: typeof msg.content === 'string' ? msg.content : JSON.stringify(msg.content), // Handle potential non-string content if necessary
⋮----
interrupt(baseDir: string)
⋮----
private processStep<TOOLS extends ToolSet>(
    currentResponseId: string,
    { reasoning, text, toolCalls, toolResults, finishReason, usage, providerMetadata, response }: StepResult<TOOLS>,
    project: Project,
    profile: AgentProfile,
    provider: ProviderProfile,
    promptContext?: PromptContext,
    abortSignal?: AbortSignal,
): ContextMessage[]
⋮----
reasoning: reasoning?.substring(0, 100), // Log truncated reasoning
text: text?.substring(0, 100), // Log truncated text
⋮----
// Process text/reasoning content
⋮----
// only send usage report if there are no tool results
⋮----
// Process successful tool results *after* sending text/reasoning and handling errors
⋮----
// Update the existing tool message with the result

================
File: src/main/agent/index.ts
================


================
File: src/main/agent/mcp-manager.ts
================
import { v4 as uuidv4 } from 'uuid';
import { McpServerConfig, McpTool, SettingsData } from '@common/types';
import { Client as McpSdkClient } from '@modelcontextprotocol/sdk/client/index.js';
import { StdioClientTransport } from '@modelcontextprotocol/sdk/client/stdio.js';
import { StreamableHTTPClientTransport } from '@modelcontextprotocol/sdk/client/streamableHttp';
import { SSEClientTransport } from '@modelcontextprotocol/sdk/client/sse';
⋮----
import logger from '@/logger';
⋮----
// increasing timeout for MCP client requests
⋮----
export interface McpConnector {
  client: McpSdkClient;
  serverName: string;
  tools: McpTool[];
  serverConfig: McpServerConfig;
}
⋮----
export class McpManager
⋮----
async initMcpConnectors(
    mcpServers: Record<string, McpServerConfig>,
    projectDir: string | null = this.currentProjectDir,
    forceReload = false,
    enabledServers?: string[],
): Promise<McpConnector[]>
⋮----
private async initMcpConnector(
    projectDir: string | null,
    serverName: string,
    config: McpServerConfig,
    forceReload = false,
    initId?: string,
): Promise<McpConnector>
⋮----
oldConnector = null; // Clear the old client reference
⋮----
settingsChanged(_: SettingsData, newSettings: SettingsData)
⋮----
async close(): Promise<void>
⋮----
private interpolateServerConfig(serverConfig: McpServerConfig, projectDir: string | null): McpServerConfig
⋮----
const interpolateValue = (value: string): string =>
⋮----
private async createMcpConnector(serverName: string, config: McpServerConfig, projectDir: string | null): Promise<McpConnector>
⋮----
// Handle npx command on Windows
⋮----
// If command is 'docker', ensure '--init' is present after 'run'
// so the container properly handles SIGINT and SIGTERM
⋮----
// Find the index of 'run'. This handles both 'docker run' and 'docker container run'.
⋮----
// Verify it's likely the actual 'run' subcommand
// e.g., 'run' is the first arg, or it follows 'container'
⋮----
// Check if '--init' already exists anywhere in the arguments
// (Docker might tolerate duplicates, but it's cleaner not to add it if present)
⋮----
// Insert '--init' immediately after the 'run' subcommand
⋮----
// Log a warning if we couldn't confidently find the 'run' command
// This might happen with unusual docker commands defined in the config
⋮----
// Get tools from this server using the SDK client
⋮----
})) as unknown as { tools: McpTool[] }; // Cast back to expected structure
⋮----
async getMcpServerTools(serverName: string, config?: McpServerConfig): Promise<McpTool[] | null>
⋮----
// reload the connector if config is provided
⋮----
async getConnectors(): Promise<McpConnector[]>
⋮----
// Ensure index is within bounds for serverNames, though it should be if Object.values and Object.keys maintain order
⋮----
private compareServerConfig(config: McpServerConfig, otherConfig: McpServerConfig)

================
File: src/main/agent/optimizer.ts
================
import { type AgentProfile, InvocationMode, type SettingsData } from '@common/types';
import { isSubagentEnabled } from '@common/agent';
import { cloneDeep } from 'lodash';
import { type CoreMessage, type CoreUserMessage, type ToolContent, type ToolResultPart } from 'ai';
import {
  AIDER_TOOL_GROUP_NAME,
  AIDER_TOOL_RUN_PROMPT,
  SUBAGENTS_TOOL_GROUP_NAME,
  SUBAGENTS_TOOL_RUN_TASK,
  TODO_TOOL_GET_ITEMS,
  TODO_TOOL_GROUP_NAME,
  TOOL_GROUP_NAME_SEPARATOR,
} from '@common/tools';
⋮----
import logger from '@/logger';
import { CacheControl } from '@/models';
⋮----
/**
 * Optimizes the messages before sending them to the LLM. This should reduce the token count and improve the performance.
 */
export const optimizeMessages = (
  profile: AgentProfile,
  userRequestMessageIndex: number,
  messages: CoreMessage[],
  cacheControl: CacheControl,
  settings: SettingsData,
) =>
⋮----
const addImportantReminders = (profile: AgentProfile, userRequestMessageIndex: number, messages: CoreMessage[], settings: SettingsData): CoreMessage[] =>
⋮----
// Add reminder about automatic subagents
⋮----
/**
 * For run_prompt tool, which returns `responses` array, we should replace this array with empty array.
 */
const optimizeAiderMessages = (messages: CoreMessage[]): CoreMessage[] =>
⋮----
// ignore
⋮----
/**
 * For subagent tool, which now returns an array of messages, we should replace this array with only the last message for LLM processing.
 */
const optimizeSubagentMessages = (messages: CoreMessage[]): CoreMessage[] =>
⋮----
// Check if result is an array of messages
⋮----
// Replace the array with only the last message for LLM processing
⋮----
// ignore
⋮----
/**
 * Converts tool results containing images into a separate user message containing the image.
 */
const convertImageToolResults = (messages: CoreMessage[]): CoreMessage[] =>
⋮----
// If result is not valid JSON, or doesn't match the image format,
// just keep the original toolResultPart as is.
⋮----
// Push the modified tool message
⋮----
// Push the user message if it was created
⋮----
// For non-tool messages, just push them as is
⋮----
/**
 * Some models (Gemini Flash) are trying to call the same tool multiple times in a row.
 * This function detects this pattern (assistant tool call -> tool result -> same assistant tool call)
 * and modifies the result of the second tool call to return an error, preventing a loop.
 */
const removeDoubleToolCalls = (messages: CoreMessage[]): CoreMessage[] =>
⋮----
// Need at least 4 messages for the pattern: assistant, tool, assistant, tool
⋮----
const newMessages = [...messages]; // Create a mutable copy
⋮----
// Iterate up to the point where the pattern can start
⋮----
// Check for the pattern: assistant(call) -> tool(result) -> assistant(call) -> tool(result)
⋮----
// Ensure both assistant messages contain tool calls
⋮----
// Compare the tool calls
⋮----
// This is a duplicate call. Modify the fourth message (the result of the duplicate call).
⋮----
// Match the tool result part to the duplicate tool call id
⋮----
// Replace the old tool message with the modified one
⋮----
// To prevent overlapping checks and unnecessary work, we can advance the index.
// Since we've processed a block of 4, we can safely jump ahead.

================
File: src/main/agent/prompts.ts
================
import path from 'path';
import fs from 'fs';
⋮----
import { AgentProfile, ToolApprovalState } from '@common/types';
import {
  AIDER_TOOL_ADD_CONTEXT_FILES,
  AIDER_TOOL_DROP_CONTEXT_FILES,
  AIDER_TOOL_GET_CONTEXT_FILES,
  AIDER_TOOL_GROUP_NAME,
  AIDER_TOOL_RUN_PROMPT,
  POWER_TOOL_BASH,
  POWER_TOOL_FILE_EDIT,
  POWER_TOOL_FILE_READ,
  POWER_TOOL_FILE_WRITE,
  POWER_TOOL_GLOB,
  POWER_TOOL_GREP,
  POWER_TOOL_GROUP_NAME,
  POWER_TOOL_SEMANTIC_SEARCH,
  SUBAGENTS_TOOL_GROUP_NAME,
  SUBAGENTS_TOOL_RUN_TASK,
  TODO_TOOL_CLEAR_ITEMS,
  TODO_TOOL_GET_ITEMS,
  TODO_TOOL_GROUP_NAME,
  TODO_TOOL_SET_ITEMS,
  TODO_TOOL_UPDATE_ITEM_COMPLETION,
  TOOL_GROUP_NAME_SEPARATOR,
} from '@common/tools';
⋮----
import { AIDER_DESK_PROJECT_RULES_DIR } from '@/constants';
⋮----
export const getSystemPrompt = async (projectDir: string, agentProfile: AgentProfile, additionalInstructions?: string) =>
⋮----
// Check individual power tool permissions
⋮----
// Check if any power tools are allowed
⋮----
const getRulesContent = (projectDir: string) =>
⋮----
export const getInitProjectPrompt = () =>
⋮----
export const getCompactConversationPrompt = (customInstructions?: string) =>

================
File: src/main/agent/utils.ts
================
import { PromptContext } from '@common/types';
⋮----
/**
 * Extracts PromptContext from a tool result if available.
 * @param toolResult - The tool result object to extract PromptContext from
 * @returns PromptContext if found, undefined otherwise
 */
export const extractPromptContextFromToolResult = (toolResult: unknown): PromptContext | undefined =>

================
File: src/main/connector/connector-manager.ts
================
import { Server as HttpServer } from 'http';
⋮----
import { ModelsData, QuestionData, TokensInfoData } from '@common/types';
import { Server, Socket } from 'socket.io';
⋮----
import logger from '@/logger';
import {
  isAddFileMessage,
  isAskQuestionMessage,
  isDropFileMessage,
  isInitMessage,
  isPromptFinishedMessage,
  isResponseMessage,
  isSetModelsMessage,
  isTokensInfoMessage,
  isUpdateAutocompletionMessage,
  isUpdateContextFilesMessage,
  isUpdateRepoMapMessage,
  isUseCommandOutputMessage,
  LogMessage,
  Message,
  isAddMessageMessage,
  isSubscribeEventsMessage,
  isUnsubscribeEventsMessage,
} from '@/messages';
import { Connector } from '@/connector/connector';
import { ProjectManager } from '@/project';
import { EventManager } from '@/events';
⋮----
export class ConnectorManager
⋮----
constructor(
    httpServer: HttpServer,
    private readonly projectManager: ProjectManager,
    private readonly eventManager: EventManager,
)
⋮----
public init(httpServer: HttpServer): void
⋮----
// Create Socket.IO server
⋮----
pingTimeout: 600_000, // 10 minutes
maxHttpBufferSize: 1e8, // Increase payload size to 100 MB
⋮----
public async close()

================
File: src/main/connector/connector.ts
================
import path from 'path';
⋮----
import { ContextFile, EditFormat, FileEdit, MessageRole, Mode, PromptContext } from '@common/types';
import { Socket } from 'socket.io';
⋮----
import logger from '@/logger';
import {
  AddFileMessage,
  AddMessageMessage,
  AnswerQuestionMessage,
  ApplyEditsMessage,
  CompactConversationMessage,
  DropFileMessage,
  InterruptResponseMessage,
  Message,
  MessageAction,
  PromptMessage,
  RequestContextInfoMessage,
  RunCommandMessage,
  SetModelsMessage,
  UpdateEnvVarsMessage,
} from '@/messages';
⋮----
export class Connector
⋮----
constructor(
⋮----
public sendPromptMessage(
    prompt: string,
    promptContext: PromptContext,
    mode: Mode | null = null,
    architectModel: string | null = null,
    messages: { role: MessageRole; content: string }[] = [],
    files: ContextFile[] = [],
): void
⋮----
public sendSetModelsMessage(mainModel: string, weakModel: string | null, editFormat: EditFormat, environmentVariables?: Record<string, string>): void
⋮----
public sendRunCommandMessage(command: string, messages:
⋮----
public sendAddMessageMessage(role: MessageRole = MessageRole.User, content: string, acknowledge = true)
⋮----
public sendInterruptResponseMessage()
⋮----
public sendApplyEditsMessage(edits: FileEdit[])
⋮----
public sendCompactConversationMessage(customInstructions?: string)
⋮----
public sendUpdateEnvVarsMessage(environmentVariables: Record<string, unknown>)
⋮----
public sendRequestTokensInfoMessage(messages:

================
File: src/main/connector/index.ts
================


================
File: src/main/custom-commands/custom-command-manager.ts
================
import fs from 'fs';
import path from 'path';
import { homedir } from 'os';
import { exec } from 'child_process';
import { promisify } from 'util';
⋮----
import { watch, FSWatcher } from 'chokidar';
import { loadFront } from 'yaml-front-matter';
⋮----
import type { CustomCommand } from '@common/types';
⋮----
import { AIDER_DESK_COMMANDS_DIR } from '@/constants';
import logger from '@/logger';
import { Project } from '@/project/project';
⋮----
// Constants for shell command formatting
⋮----
const SHELL_COMMAND_TIMEOUT = 30000; // 30 seconds
⋮----
export class ShellCommandError extends Error
⋮----
constructor(
    message: string,
    public readonly command: string,
    public readonly stderr: string,
    public readonly exitCode?: number,
)
⋮----
interface ExecError extends Error {
  stdout?: string;
  stderr?: string;
  code?: number;
}
⋮----
export class CustomCommandManager
⋮----
constructor(private readonly project: Project)
⋮----
private initializeCommands(): void
⋮----
// Load project-specific commands (these will overwrite global ones with same name)
⋮----
private setupFileWatchers(): void
⋮----
// Clean up existing watchers
⋮----
// Watch global commands directory
⋮----
// Watch project-specific commands directory
⋮----
private setupWatcherForDirectory(commandsDir: string): void
⋮----
// Create directory if it doesn't exist
⋮----
private reloadCommands(): void
⋮----
private notifyCommandsUpdated(): void
⋮----
private loadCommandsFromDir(commandsDir: string, commands: Map<string, CustomCommand>)
⋮----
private loadCommandFile(filePath: string, commands: Map<string, CustomCommand>)
⋮----
// Optionally: send error to chat window via IPC or callback
⋮----
getCommand(name: string): CustomCommand | undefined
⋮----
getAllCommands(): CustomCommand[]
⋮----
async processCommandTemplate(command: CustomCommand, args: string[]): Promise<string>
⋮----
private substituteArguments(template: string, args: string[], commandArgs: CustomCommand['arguments']): string
⋮----
// First, substitute {{ARGUMENTS}} placeholder with all arguments joined by spaces
⋮----
// Then, substitute provided arguments
⋮----
// Handle any remaining placeholders that weren't substituted
⋮----
// Replace unreplaced placeholders with empty strings for optional arguments
⋮----
private findUnreplacedPlaceholders(template: string, argsLength: number): number[]
⋮----
private async executeShellCommands(prompt: string): Promise<string>
⋮----
private async processShellCommandLine(line: string): Promise<string | string[]>
⋮----
// Handle edge case: line with just '!' or '! ' (space after)
⋮----
maxBuffer: 10 * 1024 * 1024, // 10 MB
⋮----
private extractErrorDetails(error: unknown):
⋮----
private isExecError(error: unknown): error is ExecError
⋮----
private formatShellOutput(command: string, output: string): string[]
⋮----
dispose(): void

================
File: src/main/custom-commands/index.ts
================


================
File: src/main/data-manager/data-manager.ts
================
import { UsageReportData, UsageDataRow } from '@common/types';
import Database from 'better-sqlite3';
⋮----
import logger from '@/logger';
import { DB_FILE_PATH } from '@/constants';
⋮----
/**
 * Manages the application's database connection and structure.
 * This class is responsible for initializing the database, creating necessary tables,
 * and providing a method to close the connection.
 */
export class DataManager
⋮----
/**
   * Constructs a new DataManager instance, opening a database connection
   * and ensuring the necessary 'messages' table exists.
   */
constructor()
⋮----
// Initialize the database connection.
// The verbose option logs all SQL statements to the console, which is useful for debugging.
⋮----
public init()
⋮----
// SQL statement to create the 'messages' table if it doesn't already exist.
// This table stores information about messages, including their content, token usage, and cost.
⋮----
// Execute the SQL statement to ensure the table is ready for use.
⋮----
/**
   * Saves a message to the database.
   * @param id The unique identifier for the message.
   * @param type The type of the message ('tool' or 'assistant').
   * @param project The project's base directory.
   * @param model The model used for the message.
   * @param usageReport The usage report data.
   * @param content The content of the message.
   */
public saveMessage(id: string, type: 'tool' | 'assistant', project: string, model: string, usageReport: UsageReportData | undefined, content: unknown): void
⋮----
/**
   * Closes the database connection.
   * It's important to call this method when the application is shutting down
   * to ensure that all data is saved correctly and resources are released.
   */
public close(): void
⋮----
public queryUsageData(from: Date, to: Date): UsageDataRow[]

================
File: src/main/data-manager/index.ts
================


================
File: src/main/events/event-manager.ts
================
import { BrowserWindow } from 'electron';
import { Socket } from 'socket.io';
import {
  ContextFile,
  CustomCommand,
  InputHistoryData,
  ProviderProfile,
  LogData,
  ModelsData,
  QuestionData,
  ResponseChunkData,
  ResponseCompletedData,
  TerminalData,
  TerminalExitData,
  ToolData,
  TokensInfoData,
  UserMessageData,
  VersionsInfo,
  AutocompletionData,
  ProviderModelsData,
  ProvidersUpdatedData,
  SettingsData,
} from '@common/types';
⋮----
import logger from '@/logger';
⋮----
export interface EventsConnectorConfig {
  eventTypes?: string[];
  baseDirs?: string[];
}
⋮----
export interface EventsConnector extends EventsConnectorConfig {
  socket: Socket;
}
⋮----
export class EventManager
⋮----
constructor(private readonly mainWindow: BrowserWindow | null)
⋮----
// Project lifecycle events
sendProjectStarted(baseDir: string): void
⋮----
sendClearProject(baseDir: string, clearMessages: boolean, clearFiles: boolean): void
⋮----
// File management events
sendFileAdded(baseDir: string, file: ContextFile): void
⋮----
sendContextFilesUpdated(baseDir: string, files: ContextFile[]): void
⋮----
// Response events
sendResponseChunk(data: ResponseChunkData): void
⋮----
sendResponseCompleted(data: ResponseCompletedData): void
⋮----
// Question events
sendAskQuestion(questionData: QuestionData): void
⋮----
// Autocompletion events
sendUpdateAutocompletion(baseDir: string, words: string[], allFiles: string[], models: string[]): void
⋮----
// Aider models events
sendUpdateAiderModels(modelsData: ModelsData): void
⋮----
// Command events
sendCommandOutput(baseDir: string, command: string, output: string): void
⋮----
// Log events
sendLog(data: LogData): void
⋮----
// Tool events
sendTool(data: ToolData): void
⋮----
// User message events
sendUserMessage(data: UserMessageData): void
⋮----
// Tokens info events
sendUpdateTokensInfo(tokensInfo: TokensInfoData): void
⋮----
// Input history events
sendInputHistoryUpdated(inputHistoryData: InputHistoryData): void
⋮----
// Custom commands events
sendCustomCommandsUpdated(baseDir: string, commands: CustomCommand[]): void
⋮----
sendCustomCommandError(baseDir: string, error: string): void
⋮----
// Terminal events
sendTerminalData(data: TerminalData): void
⋮----
sendTerminalExit(data: TerminalExitData): void
⋮----
// Versions events
sendVersionsInfoUpdated(versionsInfo: VersionsInfo): void
⋮----
sendSettingsUpdated(settings: SettingsData): void
⋮----
// Provider events
sendProvidersUpdated(providers: ProviderProfile[]): void
⋮----
sendProviderModelsUpdated(data: ProviderModelsData): void
⋮----
subscribe(socket: Socket, config: EventsConnectorConfig): void
⋮----
unsubscribe(socket: Socket): void
⋮----
private sendToMainWindow(eventType: string, data: unknown): void
⋮----
private broadcastToEventConnectors(eventType: string, data: unknown): void
⋮----
// Filter by event types if specified
⋮----
// Filter by base directories if specified
⋮----
// Remove disconnected sockets

================
File: src/main/events/index.ts
================


================
File: src/main/models/providers/anthropic.ts
================
import { createAnthropic } from '@ai-sdk/anthropic';
import { AnthropicProvider, isAnthropicProvider } from '@common/agent';
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, CacheControl, LlmProviderStrategy } from '@/models';
import { LoadModelsResponse } from '@/models/types';
import { Project } from '@/project/project';
import { getEffectiveEnvironmentVariable } from '@/utils';
⋮----
export const loadAnthropicModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
export const hasAnthropicEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getAnthropicAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createAnthropicLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
type AnthropicMetadata = {
  anthropic: {
    cacheCreationInputTokens?: number;
    cacheReadInputTokens?: number;
  };
};
⋮----
// === Cost and Usage Functions ===
export const calculateAnthropicCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, providerMetadata?: unknown): number =>
⋮----
export const getAnthropicUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Configuration Helper Functions ===
export const getAnthropicCacheControl = (): CacheControl =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions
⋮----
// Configuration helpers

================
File: src/main/models/providers/azure.ts
================
import { createAzure } from '@ai-sdk/azure';
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { AZURE_DEFAULT_API_VERSION, AzureProvider } from '@common/agent';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy } from '@/models';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
⋮----
const extractResourceNameFromEndpoint = (endpoint: string): string =>
⋮----
// Extract resource name from hostname like "resource-name.openai.azure.com"
⋮----
export const hasAzureEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getAzureAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createAzureLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
type AzureMetadata = {
  openai: {
    cachedPromptTokens?: number;
  };
};
⋮----
// === Cost and Usage Functions ===
export const calculateAzureCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, providerMetadata?: unknown): number =>
⋮----
export const getAzureUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/bedrock.ts
================
import { BedrockClient, GetFoundationModelAvailabilityCommand, type InferenceProfileSummary, ListInferenceProfilesCommand } from '@aws-sdk/client-bedrock';
import { fromNodeProviderChain } from '@aws-sdk/credential-providers';
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { BedrockProvider, isBedrockProvider } from '@common/agent';
import { createAmazonBedrock } from '@ai-sdk/amazon-bedrock';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
import { LoadModelsResponse } from '@/models/types';
⋮----
export const loadBedrockModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
// Check if we have explicit keys or if AWS_PROFILE is set in the main process env
⋮----
nextToken = response.nextToken; // Will be undefined if no more pages
⋮----
// Collect active profiles
⋮----
// Now, prepare availability checks in parallel
⋮----
// Extract modelId from the first model's modelArn
⋮----
// Check if the model is authorized and available
⋮----
export const hasBedrockEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getBedrockAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createBedrockLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// Check if we have explicit keys or if AWS_PROFILE is set in the main process env
⋮----
// AI SDK Bedrock provider handles credentials via environment variables or default chain.
// We pass credentials explicitly only if they were found in config or env.
// Otherwise, we let the SDK handle the default credential chain (which includes AWS_PROFILE from process.env).
⋮----
// Let the SDK handle the default chain if explicit keys aren't provided
⋮----
// === Cost and Usage Functions ===
export const calculateBedrockCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, _providerMetadata?: unknown): number =>
⋮----
// Standard cost calculation without caching adjustments
⋮----
export const getBedrockUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  _providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/cerebras.ts
================
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { CerebrasProvider, isCerebrasProvider } from '@common/agent';
import { createCerebras } from '@ai-sdk/cerebras';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils/environment';
import { LoadModelsResponse } from '@/models/types';
import { Project } from '@/project/project';
⋮----
interface CerebrasModel {
  id: string;
  max_context_length?: number;
  description?: string;
}
⋮----
export const loadCerebrasModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
// Filter out models that don't have pricing information
⋮----
export const hasCerebrasEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getCerebrasAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createCerebrasLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// === Cost and Usage Functions ===
export const calculateCerebrasCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, _providerMetadata?: unknown): number =>
⋮----
// Standard cost calculation without caching adjustments
⋮----
export const getCerebrasUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  _providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/deepseek.ts
================
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { DeepseekProvider, isDeepseekProvider } from '@common/agent';
import { createDeepSeek } from '@ai-sdk/deepseek';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
⋮----
export const loadDeepseekModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
export const hasDeepseekEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getDeepseekAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createDeepseekLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// === Cost and Usage Functions ===
export const calculateDeepseekCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, _providerMetadata?: unknown): number =>
⋮----
// Standard cost calculation without caching adjustments
⋮----
export const getDeepseekUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  _providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/gemini.ts
================
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { GeminiProvider, isGeminiProvider, LlmProvider } from '@common/agent';
import { createGoogleGenerativeAI, type GoogleGenerativeAIProviderOptions } from '@ai-sdk/google';
⋮----
import type { JSONValue, LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
⋮----
export const loadGeminiModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
export const hasGeminiEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getGeminiAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createGeminiLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
type GoogleMetadata = {
  google: {
    cachedContentTokenCount?: number;
  };
};
⋮----
// === Cost and Usage Functions ===
export const calculateGeminiCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, providerMetadata?: unknown): number =>
⋮----
export const getGeminiUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  providerMetadata?: unknown,
): UsageReportData =>
⋮----
export const getGeminiProviderOptions = (llmProvider: LlmProvider, model: Model): Record<string, Record<string, JSONValue>> | undefined =>
⋮----
// Use model-specific overrides, falling back to provider defaults
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/groq.ts
================
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { GroqProvider, isGroqProvider } from '@common/agent';
import { createGroq } from '@ai-sdk/groq';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
⋮----
interface GroqModel {
  id: string;
}
⋮----
interface GroqApiResponse {
  data: GroqModel[];
}
⋮----
export const loadGroqModels = async (profile: ProviderProfile, modelsInfo: Record<string, ModelInfo>, settings: SettingsData): Promise<LoadModelsResponse> =>
⋮----
// Filter out models that don't have pricing information
⋮----
export const hasGroqEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getGroqAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createGroqLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// === Cost and Usage Functions ===
export const calculateGroqCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, _providerMetadata?: unknown): number =>
⋮----
// Standard cost calculation without caching adjustments
⋮----
export const getGroqUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  _providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/lm-studio.ts
================
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { isLmStudioProvider, LmStudioProvider } from '@common/agent';
import { createOpenAICompatible } from '@ai-sdk/openai-compatible';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
⋮----
export const loadLmStudioModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
const normalized = effectiveBaseUrl.replace(/\/+$/g, ''); // Remove all trailing slashes
⋮----
...info, // Merge with existing model info if available
⋮----
export const hasLmStudioEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getLmStudioAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createLmStudioLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// === Cost and Usage Functions ===
export const calculateLmStudioCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, _providerMetadata?: unknown): number =>
⋮----
// Standard cost calculation without caching adjustments
⋮----
export const getLmStudioUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  _providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/ollama.ts
================
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { isOllamaProvider, OllamaProvider } from '@common/agent';
import { createOllama } from 'ollama-ai-provider';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
⋮----
export const loadOllamaModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
let normalized = effectiveBaseUrl.replace(/\/+$/, ''); // Remove all trailing slashes
⋮----
...info, // Merge with existing model info if available
⋮----
export const hasOllamaEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getOllamaAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createOllamaLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// === Cost and Usage Functions ===
export const calculateOllamaCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, _providerMetadata?: unknown): number =>
⋮----
// Standard cost calculation without caching adjustments
⋮----
export const getOllamaUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  _providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/openai-compatible.ts
================
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { isOpenAiCompatibleProvider, OpenAiCompatibleProvider } from '@common/agent';
import { createOpenAICompatible } from '@ai-sdk/openai-compatible';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { Project } from '@/project/project';
import { getEffectiveEnvironmentVariable } from '@/utils';
⋮----
export const loadOpenaiCompatibleModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
export const hasOpenAiCompatibleEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getOpenAiCompatibleAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// Use openai prefix for OpenAI-compatible providers
⋮----
// === LLM Creation Functions ===
export const createOpenAiCompatibleLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// Use createOpenAICompatible to get a provider instance, then get the model
⋮----
// === Cost and Usage Functions ===
export const calculateOpenAiCompatibleCost = (
  modelInfo: ModelInfo | undefined,
  sentTokens: number,
  receivedTokens: number,
  _providerMetadata?: unknown,
): number =>
⋮----
// Standard cost calculation without caching adjustments
⋮----
export const getOpenAiCompatibleUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  _providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/openai.ts
================
import { createOpenAI } from '@ai-sdk/openai';
import { isOpenAiProvider, OpenAiProvider } from '@common/agent';
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import logger from '@/logger';
import { AiderModelMapping, LlmProviderStrategy, LoadModelsResponse } from '@/models';
import { Project } from '@/project/project';
import { getEffectiveEnvironmentVariable } from '@/utils';
⋮----
export const loadOpenAiModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
export const hasOpenAiEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getOpenAiAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createOpenAiLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
type OpenAiMetadata = {
  openai: {
    cachedPromptTokens?: number;
  };
};
⋮----
// === Cost and Usage Functions ===
export const calculateOpenAiCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, providerMetadata?: unknown): number =>
⋮----
export const getOpenAiUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/providers/openrouter.ts
================
import { AgentProfile, Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { isOpenRouterProvider, LlmProvider, OpenRouterProvider } from '@common/agent';
import { createOpenRouter } from '@openrouter/ai-sdk-provider';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AIDER_DESK_TITLE, AIDER_DESK_WEBSITE } from '@/constants';
import { AiderModelMapping, LlmProviderStrategy, CacheControl, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
⋮----
interface OpenRouterTopProvider {
  is_moderated: boolean;
  context_length: number;
  max_completion_tokens: number;
}
⋮----
interface OpenRouterPricing {
  prompt: string;
  completion: string;
  input_cache_read?: string;
  input_cache_write?: string;
}
⋮----
interface OpenRouterModel {
  id: string;
  name: string;
  created: number;
  description: string;
  top_provider: OpenRouterTopProvider;
  pricing: OpenRouterPricing;
  context_length: number;
}
⋮----
interface OpenRouterModelsResponse {
  data: OpenRouterModel[];
}
⋮----
export const loadOpenrouterModels = async (
  profile: ProviderProfile,
  _modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
export const hasOpenRouterEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getOpenRouterAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// === LLM Creation Functions ===
export const createOpenRouterLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
type OpenRouterMetadata = {
  openrouter: {
    usage: {
      completionTokens: number;
      completionTokensDetails: {
        reasoningTokens: number;
      };
      cost: number;
      promptTokens: number;
      promptTokensDetails?: {
        cachedTokens: number;
      };
      totalTokens: number;
    };
  };
};
⋮----
// === Cost and Usage Functions ===
export const calculateOpenRouterCost = (
  _modelInfo: ModelInfo | undefined,
  _sentTokens: number,
  _receivedTokens: number,
  providerMetadata?: unknown,
): number =>
⋮----
export const getOpenRouterUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Configuration Helper Functions ===
export const getOpenRouterCacheControl = (profile: AgentProfile, llmProvider: LlmProvider): CacheControl =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions
⋮----
// Configuration helpers

================
File: src/main/models/providers/requesty.ts
================
import { AgentProfile, Model, ModelInfo, ProviderProfile, ReasoningEffort, SettingsData, UsageReportData } from '@common/types';
import { isRequestyProvider, LlmProvider, RequestyProvider } from '@common/agent';
import { createRequesty, type RequestyProviderMetadata } from '@requesty/ai-sdk';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AIDER_DESK_TITLE, AIDER_DESK_WEBSITE } from '@/constants';
import { AiderModelMapping, LlmProviderStrategy, CacheControl, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
⋮----
interface RequestyModel {
  id: string;
  created: number;
  owned_by: string;
  input_price: number;
  caching_price?: number;
  cached_price?: number;
  output_price: number;
  max_output_tokens: number;
  context_window: number;
  supports_caching: boolean;
  supports_vision: boolean;
  supports_computer_use: boolean;
  supports_reasoning: boolean;
  description: string;
}
⋮----
interface RequestyModelsResponse {
  data: RequestyModel[];
}
⋮----
export const loadRequestyModels = async (
  profile: ProviderProfile,
  _modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
export const hasRequestyEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getRequestyAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// Requesty doesn't have direct Aider support, so we use OpenAI-compatible endpoint
⋮----
// === LLM Creation Functions ===
export const createRequestyLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// === Cost and Usage Functions ===
export const calculateRequestyCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, providerMetadata?: unknown): number =>
⋮----
export const getRequestyUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Configuration Helper Functions ===
export const getRequestyCacheControl = (profile: AgentProfile, llmProvider: LlmProvider): CacheControl =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions
⋮----
// Configuration helpers

================
File: src/main/models/providers/vertex-ai.ts
================
import { v1beta1 } from '@google-cloud/aiplatform';
import { GoogleAuth } from 'google-auth-library';
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { isVertexAiProvider, LlmProvider, VertexAiProvider } from '@common/agent';
import { createVertex } from '@ai-sdk/google-vertex';
⋮----
import type { JSONValue, LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable } from '@/utils';
import { Project } from '@/project/project';
⋮----
export const loadVertexAIModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
// Use provided credentials JSON
⋮----
// Use default credentials (e.g., gcloud, environment variables, or service account)
⋮----
export const hasVertexAiEnvVars = (_settings: SettingsData): boolean =>
⋮----
// Vertex AI doesn't have a simple environment variable check like other providers
// It requires project, location, and potentially credentials
⋮----
export const getVertexAiAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// Aider uses vertex_ai prefix instead of vertex-ai
⋮----
// === LLM Creation Functions ===
export const createVertexAiLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// using custom base URL to fix the 'global' location
⋮----
type VertexGoogleMetadata = {
  google: {
    cachedContentTokenCount?: number;
  };
};
⋮----
// === Cost and Usage Functions ===
export const calculateVertexAiCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, providerMetadata?: unknown): number =>
⋮----
export const getVertexAiUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  providerMetadata?: unknown,
): UsageReportData =>
⋮----
export const getVertexAiProviderOptions = (llmProvider: LlmProvider, model: Model): Record<string, Record<string, JSONValue>> | undefined =>
⋮----
// Use model-specific overrides, falling back to provider defaults
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions
⋮----
// Configuration helpers

================
File: src/main/models/providers/zai-plan.ts
================
import { Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { isZaiPlanProvider, ZaiPlanProvider } from '@common/agent';
import { createOpenAICompatible } from '@ai-sdk/openai-compatible';
⋮----
import type { LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AiderModelMapping, LlmProviderStrategy, LoadModelsResponse } from '@/models';
import logger from '@/logger';
import { Project } from '@/project/project';
import { getEffectiveEnvironmentVariable } from '@/utils';
⋮----
export const loadZaiPlanModels = async (
  profile: ProviderProfile,
  modelsInfo: Record<string, ModelInfo>,
  settings: SettingsData,
): Promise<LoadModelsResponse> =>
⋮----
// ZAI uses specific endpoint for model discovery
⋮----
export const hasZaiPlanEnvVars = (settings: SettingsData): boolean =>
⋮----
export const getZaiPlanAiderMapping = (provider: ProviderProfile, modelId: string): AiderModelMapping =>
⋮----
// Use zai-plan prefix for ZAI providers
⋮----
// === LLM Creation Functions ===
export const createZaiPlanLlm = (profile: ProviderProfile, model: Model, env: Record<string, string | undefined> =
⋮----
// Use createOpenAICompatible to get a provider instance, then get the model
// ZAI uses specific base URL for chat completions
⋮----
// === Cost and Usage Functions ===
export const calculateZaiPlanCost = (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, _providerMetadata?: unknown): number =>
⋮----
// Standard cost calculation without caching adjustments
⋮----
export const getZaiPlanUsageReport = (
  project: Project,
  provider: ProviderProfile,
  modelId: string,
  messageCost: number,
  usage: LanguageModelUsage,
  _providerMetadata?: unknown,
): UsageReportData =>
⋮----
// === Complete Strategy Implementation ===
⋮----
// Core LLM functions
⋮----
// Model discovery functions

================
File: src/main/models/index.ts
================


================
File: src/main/models/model-manager.ts
================
import { promises as fs } from 'fs';
import path from 'path';
⋮----
import { AVAILABLE_PROVIDERS, getDefaultProviderParams, LlmProvider, LlmProviderName } from '@common/agent';
import { AgentProfile, Model, ModelInfo, ModelOverrides, ProviderModelsData, ProviderProfile, UsageReportData } from '@common/types';
⋮----
import { anthropicProviderStrategy } from './providers/anthropic';
import { azureProviderStrategy } from './providers/azure';
import { bedrockProviderStrategy } from './providers/bedrock';
import { cerebrasProviderStrategy } from './providers/cerebras';
import { deepseekProviderStrategy } from './providers/deepseek';
import { geminiProviderStrategy } from './providers/gemini';
import { groqProviderStrategy } from './providers/groq';
import { lmStudioProviderStrategy } from './providers/lm-studio';
import { ollamaProviderStrategy } from './providers/ollama';
import { openaiProviderStrategy } from './providers/openai';
import { openaiCompatibleProviderStrategy } from './providers/openai-compatible';
import { openrouterProviderStrategy } from './providers/openrouter';
import { requestyProviderStrategy } from './providers/requesty';
import { vertexAiProviderStrategy } from './providers/vertex-ai';
import { zaiPlanProviderStrategy } from './providers/zai-plan';
⋮----
import type { JSONValue, LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { AIDER_DESK_DATA_DIR, AIDER_DESK_CACHE_DIR } from '@/constants';
import logger from '@/logger';
import { Store } from '@/store';
import { EventManager } from '@/events';
import { Project } from '@/project/project';
import { AiderModelMapping, CacheControl, LlmProviderRegistry } from '@/models/types';
⋮----
type ModelsMetaResponse = Record<
  string,
  {
    models: Record<
      string,
      {
        id: string;
        cost?: {
          input?: number;
          output?: number;
          cache_read?: number;
          cache_write?: number;
        };
        limit: {
          context: number;
          output: number;
        };
      }
    >;
  }
>;
⋮----
export class ModelManager
⋮----
// Provider registry for strategy pattern
⋮----
constructor(
    private store: Store,
    private eventManager: EventManager,
)
⋮----
private async init(): Promise<void>
⋮----
private async loadModelsInfo(): Promise<void>
⋮----
// Try to load from cache first
⋮----
// Cache file doesn't exist or is invalid, we'll fetch fresh data
⋮----
const fetchFreshDataAndCache = async (cacheFile: string): Promise<void> =>
⋮----
// Save the fresh data to cache
⋮----
// Fetch fresh data in background if cache was loaded, otherwise await it
⋮----
private processModelsMeta(data: ModelsMetaResponse)
⋮----
// Add properties only if they don't exist
⋮----
getModelInfo(modelName: string): ModelInfo | undefined
⋮----
private createEnvVarProvider(providerName: LlmProviderName): ProviderProfile
⋮----
private getChangedProviders(oldProviders: ProviderProfile[], newProviders: ProviderProfile[]): ProviderProfile[]
⋮----
// Check for added/modified providers
⋮----
async providersChanged(oldProviders: ProviderProfile[], newProviders: ProviderProfile[])
⋮----
async getAllModelsInfo(): Promise<Record<string, ModelInfo>>
⋮----
private async loadProviderModels(providers: ProviderProfile[]): Promise<void>
⋮----
// Group providers by their provider name
⋮----
const loadModels = async () =>
⋮----
// Load models from each profile for this provider type
⋮----
// Add custom models or override existing ones
⋮----
// Emit the updated provider models event
⋮----
// Update agent profiles with the new models
⋮----
/**
   * Detect and add automatic providers from environment variables
   */
private updateEnvVarsProviders()
⋮----
async getProviderModels(): Promise<ProviderModelsData>
⋮----
// Fallback in case loading failed during init
⋮----
private async loadModelOverrides(): Promise<void>
⋮----
private async saveModelOverrides(): Promise<void>
⋮----
async upsertModel(providerId: string, modelId: string, model: Model): Promise<void>
⋮----
async deleteModel(providerId: string, modelId: string): Promise<void>
⋮----
getAiderModelMapping(modelName: string): AiderModelMapping
⋮----
private getProviderAiderMapping(provider: ProviderProfile, modelId: string): AiderModelMapping
⋮----
getModel(providerId: string, modelId: string): Model | undefined
⋮----
createLlm(profile: ProviderProfile, model: string | Model, env: Record<string, string | undefined> =
⋮----
// Resolve Model object if string is provided
⋮----
// Fallback to creating a minimal Model object if not found
⋮----
calculateCost(provider: ProviderProfile, model: string, sentTokens: number, receivedTokens: number, providerMetadata?: unknown): number
⋮----
getUsageReport(
    project: Project,
    provider: ProviderProfile,
    modelId: string,
    messageCost: number,
    usage: LanguageModelUsage,
    providerMetadata?: unknown,
): UsageReportData
⋮----
getCacheControl(profile: AgentProfile, llmProvider: LlmProvider): CacheControl
⋮----
getProviderOptions(llmProvider: LlmProvider, model: string): Record<string, Record<string, JSONValue>> | undefined
⋮----
// Find the provider profile for this LLM provider
⋮----
// Fallback to old behavior if provider not found
⋮----
// Resolve Model object
⋮----
// Fallback to minimal Model object if not found

================
File: src/main/models/models.ts
================


================
File: src/main/models/types.ts
================
import { AgentProfile, Model, ModelInfo, ProviderProfile, SettingsData, UsageReportData } from '@common/types';
import { LlmProvider, LlmProviderName } from '@common/agent';
⋮----
import type { JSONValue, LanguageModel, LanguageModelUsage } from 'ai';
⋮----
import { Project } from '@/project';
⋮----
export type CacheControl = Record<string, Record<string, JSONValue>> | undefined;
⋮----
export interface AiderModelMapping {
  modelName: string;
  environmentVariables: Record<string, string>;
}
⋮----
/**
 * Complete strategy interface for LLM providers
 * Encapsulates all provider-specific functionality including:
 * - LLM creation and usage tracking
 * - Model discovery and configuration
 * - Cost calculation and usage reporting
 * - Environment variable detection
 * - Aider integration
 */
export interface LoadModelsResponse {
  models: Model[];
  success: boolean;
  error?: string;
}
⋮----
export interface LlmProviderStrategy {
  // === LLM Creation and Usage Functions ===
  /**
   * Creates a LanguageModel instance for the given provider and model
   */
  createLlm: (profile: ProviderProfile, model: Model, env: Record<string, string | undefined>) => LanguageModel;

  /**
   * Calculates the cost for token usage with provider-specific caching adjustments
   */
  calculateCost: (modelInfo: ModelInfo | undefined, sentTokens: number, receivedTokens: number, providerMetadata?: unknown) => number;

  /**
   * Generates usage reports with provider-specific metadata
   */
  getUsageReport: (
    project: Project,
    provider: ProviderProfile,
    modelId: string,
    messageCost: number,
    usage: LanguageModelUsage,
    providerMetadata?: unknown,
  ) => UsageReportData;

  // === Model Discovery and Configuration Functions ===
  /**
   * Loads available models from the provider's API
   */
  loadModels: (profile: ProviderProfile, modelsInfo: Record<string, ModelInfo>, settings: SettingsData) => Promise<LoadModelsResponse>;

  /**
   * Checks if required environment variables are available
   */
  hasEnvVars: (settings: SettingsData) => boolean;

  /**
   * Generates Aider-compatible model mapping with environment variables
   */
  getAiderMapping: (provider: ProviderProfile, modelId: string) => AiderModelMapping;

  // === Optional Configuration Helper Functions ===
  /**
   * Returns provider-specific cache control configuration
   */
  getCacheControl?: (profile: AgentProfile, provider: LlmProvider) => CacheControl;

  /**
   * Returns provider-specific options for model instantiation
   */
  getProviderOptions?: (provider: LlmProvider, model: Model) => Record<string, Record<string, JSONValue>> | undefined;
}
⋮----
// === LLM Creation and Usage Functions ===
/**
   * Creates a LanguageModel instance for the given provider and model
   */
⋮----
/**
   * Calculates the cost for token usage with provider-specific caching adjustments
   */
⋮----
/**
   * Generates usage reports with provider-specific metadata
   */
⋮----
// === Model Discovery and Configuration Functions ===
/**
   * Loads available models from the provider's API
   */
⋮----
/**
   * Checks if required environment variables are available
   */
⋮----
/**
   * Generates Aider-compatible model mapping with environment variables
   */
⋮----
// === Optional Configuration Helper Functions ===
/**
   * Returns provider-specific cache control configuration
   */
⋮----
/**
   * Returns provider-specific options for model instantiation
   */
⋮----
export type LlmProviderRegistry = Record<LlmProviderName, LlmProviderStrategy>;

================
File: src/main/project/index.ts
================


================
File: src/main/project/project-manager.ts
================
import { normalizeBaseDir } from '@common/utils';
import { SettingsData, StartupMode } from '@common/types';
⋮----
import { TelemetryManager } from '@/telemetry';
import { Agent } from '@/agent';
import { DataManager } from '@/data-manager';
import logger from '@/logger';
import { Project } from '@/project';
import { Store } from '@/store';
import { EventManager } from '@/events';
import { ModelManager } from '@/models';
⋮----
export class ProjectManager
⋮----
constructor(
⋮----
private findProject(baseDir: string): Project | undefined
⋮----
private createProject(baseDir: string)
⋮----
public getProject(baseDir: string)
⋮----
public startProject(baseDir: string, startupMode?: StartupMode)
⋮----
public async closeProject(baseDir: string)
⋮----
public async restartProject(baseDir: string, startupMode?: StartupMode): Promise<void>
⋮----
public async close(): Promise<void>
⋮----
settingsChanged(oldSettings: SettingsData, newSettings: SettingsData)
⋮----
public getCustomCommands(baseDir: string)

================
File: src/main/project/project.ts
================
import { ChildProcessWithoutNullStreams, spawn } from 'child_process';
import { createHash } from 'crypto';
import { unlinkSync } from 'fs';
import fs from 'fs/promises';
import path from 'path';
⋮----
import { simpleGit } from 'simple-git';
import { Notification } from 'electron';
import YAML from 'yaml';
import {
  AgentProfile,
  ContextAssistantMessage,
  ContextFile,
  ContextMessage,
  CustomCommand,
  EditFormat,
  FileEdit,
  InputHistoryData,
  LogData,
  LogLevel,
  MessageRole,
  Mode,
  ModelsData,
  ProjectSettings,
  PromptContext,
  QuestionData,
  ResponseChunkData,
  ResponseCompletedData,
  SessionData,
  SettingsData,
  StartupMode,
  Task,
  TodoItem,
  TokensInfoData,
  ToolData,
  UsageReportData,
  UserMessageData,
} from '@common/types';
import { extractTextContent, fileExists, getActiveAgentProfile, parseUsageReport } from '@common/utils';
import { COMPACT_CONVERSATION_AGENT_PROFILE, INIT_PROJECT_AGENTS_PROFILE } from '@common/agent';
import treeKill from 'tree-kill';
import { v4 as uuidv4 } from 'uuid';
import debounce from 'lodash/debounce';
⋮----
import type { SimpleGit } from 'simple-git';
⋮----
import { getAllFiles } from '@/utils/file-system';
import { getCompactConversationPrompt, getInitProjectPrompt, getSystemPrompt } from '@/agent/prompts';
import { AIDER_DESK_CONNECTOR_DIR, AIDER_DESK_PROJECT_RULES_DIR, AIDER_DESK_TODOS_FILE, PID_FILES_DIR, PYTHON_COMMAND, SERVER_PORT } from '@/constants';
import { TaskManager } from '@/tasks';
import { SessionManager } from '@/session';
import { Agent } from '@/agent';
import { Connector } from '@/connector';
import { DataManager } from '@/data-manager';
import logger from '@/logger';
import { MessageAction, ResponseMessage } from '@/messages';
import { Store } from '@/store';
import { DEFAULT_MAIN_MODEL, ModelManager } from '@/models';
import { CustomCommandManager, ShellCommandError } from '@/custom-commands';
import { TelemetryManager } from '@/telemetry';
import { EventManager } from '@/events';
import { getEnvironmentVariablesForAider } from '@/utils';
⋮----
export class Project
⋮----
constructor(
    public readonly baseDir: string,
    private readonly store: Store,
    private readonly agent: Agent,
    private readonly telemetryManager: TelemetryManager,
    private readonly dataManager: DataManager,
    private readonly eventManager: EventManager,
    private readonly modelManager: ModelManager,
)
⋮----
public async start(startupMode?: StartupMode)
⋮----
// Handle different startup modes
⋮----
// Don't load any session, start fresh
⋮----
// Load the autosaved session
⋮----
public addConnector(connector: Connector)
⋮----
// Set aiderStarting to false when a connector with source==='aider' is added
⋮----
// Set input history file if provided by the connector
⋮----
public removeConnector(connector: Connector)
⋮----
private normalizeFilePath(filePath: string): string
⋮----
private getAiderProcessPidFilePath(): string
⋮----
private async writeAiderProcessPidFile(): Promise<void>
⋮----
private removeAiderProcessPidFile()
⋮----
private async checkAndCleanupPidFile(): Promise<void>
⋮----
private async startAider(): Promise<void>
⋮----
// Set aiderStarting to true when starting aider
⋮----
i++; // Skip the model value
⋮----
// Spawn without shell to have direct process control
⋮----
// Send stderr errors as log messages while aider is starting
⋮----
public isStarted()
⋮----
public async close()
⋮----
public async saveSession(name: string): Promise<void>
⋮----
public async loadSessionMessages(name: string)
⋮----
public async loadSessionFiles(name: string)
⋮----
public async deleteSession(name: string): Promise<void>
⋮----
public async listSessions(): Promise<SessionData[]>
⋮----
private async killAider(): Promise<void>
⋮----
private findMessageConnectors(action: MessageAction): Connector[]
⋮----
private async waitForCurrentPromptToFinish()
⋮----
public async runPrompt(prompt: string, mode?: Mode): Promise<ResponseCompletedData[]>
⋮----
// Generate promptContext for this run
⋮----
public async runPromptInAider(prompt: string, promptContext: PromptContext, mode?: Mode): Promise<ResponseCompletedData[]>
⋮----
// add messages to session
⋮----
// if (response.reflectedMessage) {
//   this.sessionManager.addContextMessage(MessageRole.User, response.reflectedMessage);
// }
⋮----
// Create enhanced assistant message with full metadata
⋮----
public async runPromptInAgent(
    profile: AgentProfile,
    prompt: string,
    promptContext: PromptContext = { id: uuidv4() },
    contextMessages?: ContextMessage[],
    contextFiles?: ContextFile[],
    systemPrompt?: string,
): Promise<ResponseCompletedData[]>
⋮----
// send messages to connectors
⋮----
public async runSubagent(
    profile: AgentProfile,
    prompt: string,
    contextMessages: ContextMessage[],
    contextFiles: ContextFile[],
    systemPrompt?: string,
    abortSignal?: AbortSignal,
    promptContext?: PromptContext,
): Promise<ContextMessage[]>
⋮----
public sendPrompt(
    prompt: string,
    promptContext: PromptContext = { id: uuidv4() },
    mode?: Mode,
    messages?: { role: MessageRole; content: string }[],
    files?: ContextFile[],
): Promise<ResponseCompletedData[]>
⋮----
// Wait for prompt to finish and return collected responses
⋮----
private getArchitectModel(): string | null
⋮----
public promptFinished(promptId?: string)
⋮----
// Notify waiting prompts with collected responses
⋮----
public processResponseMessage(message: ResponseMessage, saveToDb = true)
⋮----
// Collect the completed response
⋮----
// Sort by sequence number when adding
⋮----
sendResponseCompleted(data: ResponseCompletedData)
⋮----
private notifyIfEnabled(title: string, text: string)
⋮----
private getQuestionKey(question: QuestionData): string
⋮----
public answerQuestion(answer: string, userInput?: string): boolean
⋮----
// If user input 'd' (don't ask again) or 'a' (always), store the determined answer.
⋮----
public async addFile(contextFile: ContextFile)
⋮----
// Send add file message for each added file
⋮----
public sendAddFile(contextFile: ContextFile, noUpdate?: boolean)
⋮----
public dropFile(filePath: string)
⋮----
// Send drop file message for each dropped file
⋮----
public sendDropFile(filePath: string, readOnly?: boolean, noUpdate?: boolean): void
⋮----
private sendContextFilesUpdated()
⋮----
public async runCommand(command: string, addToHistory = true)
⋮----
// Get the Git root directory to handle monorepo scenarios
⋮----
// Get the current HEAD commit hash before undoing
⋮----
// Get all files from the last commit
⋮----
// For each file, check if it exists at HEAD~1 before attempting checkout
⋮----
// Check if file exists at HEAD~1
⋮----
// If it exists, checkout the previous version
⋮----
// Reset --soft HEAD~1
⋮----
public updateContextFiles(contextFiles: ContextFile[])
⋮----
public async loadInputHistory(): Promise<string[]>
⋮----
public async addToInputHistory(message: string)
⋮----
private async sendInputHistoryUpdatedEvent()
⋮----
public async askQuestion(questionData: QuestionData, awaitAnswer = true): Promise<[string, string | undefined]>
⋮----
// Wait if another question is already pending
⋮----
// group questions have a default set of answers
⋮----
// At this point, this.currentQuestion should be null due to the loop above,
// or it was null initially.
⋮----
// Auto-answer based on stored preference
⋮----
// Store the resolve function for the promise
⋮----
public async updateAutocompletionData(words: string[], models: string[])
⋮----
public updateAiderModels(modelsData: ModelsData)
⋮----
const getWeakModelProvider = () =>
⋮----
// use the provider prefix from the main model when Aider's provider prefix is different
⋮----
public updateModels(mainModel: string, weakModel: string | null, editFormat: EditFormat = 'diff')
⋮----
private sendSetModels(mainModel: string, weakModel: string | null, editFormat: EditFormat = 'diff', environmentVariables?: Record<string, string>)
⋮----
public setArchitectModel(architectModel: string)
⋮----
public async getAddableFiles(searchRegex?: string): Promise<string[]>
⋮----
public getContextFiles(): ContextFile[]
⋮----
public getRepoMap(): string
⋮----
public setRepoMap(repoMap: string): void
⋮----
public updateRepoMapFromConnector(repoMap: string): void
⋮----
public openCommandOutput(command: string)
⋮----
private addCommandOutput(command: string, output: string)
⋮----
// Append output to the commandOutputs map
⋮----
public closeCommandOutput(addToContext = true)
⋮----
// Add the command output to the session manager as an assistant message, prepending the command
⋮----
public addLogMessage(level: LogLevel, message?: string, finished = false, promptContext?: PromptContext)
⋮----
public getContextMessages()
⋮----
public async addContextMessage(role: MessageRole, content: string, usageReport?: UsageReportData)
⋮----
public sendAddMessage(role: MessageRole = MessageRole.User, content: string, acknowledge = true)
⋮----
public async clearContext(addToHistory = false, updateContextInfo = true)
⋮----
public interruptResponse()
⋮----
public applyEdits(edits: FileEdit[])
⋮----
public addToolMessage(
    id: string,
    serverName: string,
    toolName: string,
    args?: Record<string, unknown>,
    response?: string,
    usageReport?: UsageReportData,
    promptContext?: PromptContext,
    saveToDb = true,
)
⋮----
// Update total costs when adding the tool message
⋮----
private updateTotalCosts(usageReport: UsageReportData)
⋮----
public addUserMessage(content: string, mode?: Mode, promptContext?: PromptContext)
⋮----
public async removeLastMessage()
⋮----
public async redoLastUserPrompt(mode: Mode, updatedPrompt?: string)
⋮----
await this.reloadConnectorMessages(); // This sends 'clear-project' which truncates UI messages
⋮----
// No need to await runPrompt here, let it run in the background
⋮----
private async reloadConnectorMessages()
⋮----
public async compactConversation(mode: Mode, customInstructions?: string)
⋮----
const extractSummary = (content: string): string =>
⋮----
// Agent mode logic
⋮----
// Clear existing context and add the summary
⋮----
// add messages to session
⋮----
public async generateSessionMarkdown(): Promise<string | null>
⋮----
updateTokensInfo(data: Partial<TokensInfoData>)
⋮----
async updateContextInfo(checkContextFilesIncluded = false, checkRepoMapIncluded = false)
⋮----
private sendRequestContextInfo()
⋮----
async updateAgentEstimatedTokens(checkContextFilesIncluded = false, checkRepoMapIncluded = false)
⋮----
settingsChanged(oldSettings: SettingsData, newSettings: SettingsData)
⋮----
// Check for changes in agent config properties that affect token count
⋮----
// Check for changes in environment variables or LLM providers
⋮----
private sendUpdateEnvVars(environmentVariables: Record<string, unknown>)
⋮----
async updateTask(taskId: string, updates:
⋮----
async prepareTasks(titles: string[]): Promise<Task[]>
⋮----
async listTasks(completed?: boolean): Promise<Task[]>
⋮----
private getTodoFilePath(): string
⋮----
public async readTodoFile(): Promise<
⋮----
public async writeTodoFile(data:
⋮----
public async getTodos(): Promise<TodoItem[]>
⋮----
public async setTodos(items: TodoItem[], initialUserPrompt = ''): Promise<void>
⋮----
public async addTodo(name: string): Promise<TodoItem[]>
⋮----
public async updateTodo(name: string, updates: Partial<TodoItem>): Promise<TodoItem[]>
⋮----
public async deleteTodo(name: string): Promise<TodoItem[]>
⋮----
public async clearAllTodos(): Promise<TodoItem[]>
⋮----
async initProjectAgentsFile(): Promise<void>
⋮----
// clear context before execution
⋮----
// Get the active agent profile
⋮----
// Run the agent with the modified profile
⋮----
// Check if the AGENTS.md file was created
⋮----
// Ask the user if they want to add this file to .aider.conf.yml
⋮----
private async addProjectAgentsToAiderConfig(): Promise<void>
⋮----
// Read existing config if it exists
⋮----
// Ensure read section exists and is an array
⋮----
// Add PROJECT.md to read section if not already present
⋮----
// Write the updated config
⋮----
public getCustomCommands()
⋮----
public sendCustomCommandsUpdated(commands: CustomCommand[])
⋮----
public async runCustomCommand(commandName: string, args: string[], mode: Mode = 'agent'): Promise<void>
⋮----
// Handle shell command execution errors
⋮----
// Re-throw other errors
⋮----
// Agent mode logic
⋮----
// Override profile's autoApprove if command specifies it
⋮----
// All other modes (code, ask, architect)
⋮----
// Clear loading message after execution completes (success or failure)

================
File: src/main/server/rest-api/base-api.ts
================
import { Request, Response, Router } from 'express';
import { z } from 'zod';
⋮----
import { Project } from '@/project';
⋮----
export abstract class BaseApi
⋮----
protected constructor()
⋮----
/**
   * Finds a project by directory path and validates it exists and is started
   * Returns null if project not found or not started, and sends appropriate error response
   */
protected findProject(project: Project | undefined, projectDir: string, res: Response): Project | null
⋮----
/**
   * Generic request handler wrapper with consistent error handling
   */
protected handleRequest<T>(handler: (req: Request, res: Response) => Promise<T>)
⋮----
// eslint-disable-next-line no-console
⋮----
/**
   * Validates request data using a Zod schema and handles invalid requests
   */
protected validateRequest<T>(schema: z.ZodSchema<T>, data: unknown, res: Response): T | null
⋮----
/**
   * Abstract method for registering routes - each API module must implement this
   */
abstract registerRoutes(router: Router): void;

================
File: src/main/server/rest-api/commands-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
⋮----
export class CommandsApi extends BaseApi
⋮----
constructor(private readonly eventsHandler: EventsHandler)
⋮----
registerRoutes(router: Router): void
⋮----
// Get custom commands
⋮----
// Run custom command

================
File: src/main/server/rest-api/context-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
import { ProjectManager } from '@/project';
⋮----
export class ContextApi extends BaseApi
⋮----
constructor(
    private readonly projectManager: ProjectManager,
    private readonly eventsHandler: EventsHandler,
)
⋮----
registerRoutes(router: Router): void
⋮----
// Add context file
⋮----
// Drop context file
⋮----
// Get context files
⋮----
// Get addable files

================
File: src/main/server/rest-api/index.ts
================


================
File: src/main/server/rest-api/mcp-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
⋮----
export class McpApi extends BaseApi
⋮----
constructor(private readonly eventsHandler: EventsHandler)
⋮----
registerRoutes(router: Router): void
⋮----
// Load MCP server tools
⋮----
// Reload MCP servers

================
File: src/main/server/rest-api/project-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
import { StartupMode, ProjectSettingsSchema } from '@common/types';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
⋮----
export class ProjectApi extends BaseApi
⋮----
constructor(private readonly eventsHandler: EventsHandler)
⋮----
registerRoutes(router: Router): void
⋮----
// Get projects
⋮----
// Get input history
⋮----
// Redo last user prompt
⋮----
// Validate path
⋮----
// Is project path
⋮----
// Get file path suggestions
⋮----
// Paste image
⋮----
// Apply edits
⋮----
// Run command
⋮----
// Init project rules file
⋮----
// Save session
⋮----
// Load session messages
⋮----
// Load session files
⋮----
// List sessions
⋮----
// Delete session
⋮----
// Export session to markdown
⋮----
// Remove last message
⋮----
// Compact conversation
⋮----
// Scrape web
⋮----
// Update open projects order
⋮----
// Remove open project
⋮----
// Set active project
⋮----
// Restart project
⋮----
// Get project settings
⋮----
// Update project settings
⋮----
// Interrupt project
⋮----
// Clear project context
⋮----
// Answer project question
⋮----
// Update main model
⋮----
// Update weak model
⋮----
// Update architect model
⋮----
// Update edit formats
⋮----
// Start project
⋮----
// Stop project
⋮----
// Add open project

================
File: src/main/server/rest-api/prompt-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
⋮----
export class PromptApi extends BaseApi
⋮----
constructor(private readonly eventsHandler: EventsHandler)
⋮----
registerRoutes(router: Router): void
⋮----
// Check if another prompt is already running
⋮----
// Clear the running flag even if there's an error

================
File: src/main/server/rest-api/providers-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
⋮----
const LlmProviderProfileSchema = z.any(); // Placeholder - can be refined based on LlmProviderProfile type
⋮----
export class ProvidersApi extends BaseApi
⋮----
constructor(private readonly eventsHandler: EventsHandler)
⋮----
registerRoutes(router: Router): void
⋮----
// Get providers
⋮----
// Update providers
⋮----
// Get provider models

================
File: src/main/server/rest-api/settings-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
⋮----
const SettingsDataSchema = z.any(); // Placeholder - can be refined based on SettingsData type
⋮----
export class SettingsApi extends BaseApi
⋮----
constructor(private readonly eventsHandler: EventsHandler)
⋮----
registerRoutes(router: Router): void
⋮----
// Get settings
⋮----
// Update settings
⋮----
// Get models
⋮----
// Get recent projects
⋮----
// Add recent project
⋮----
// Remove recent project
⋮----
// Set zoom level
⋮----
// Get versions
⋮----
// Download latest AiderDesk
⋮----
// Get release notes
⋮----
// Clear release notes
⋮----
// Get OS

================
File: src/main/server/rest-api/system-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
⋮----
export class SystemApi extends BaseApi
⋮----
constructor(private readonly eventsHandler: EventsHandler)
⋮----
registerRoutes(router: Router): void

================
File: src/main/server/rest-api/todo-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
⋮----
export class TodoApi extends BaseApi
⋮----
constructor(private readonly eventsHandler: EventsHandler)
⋮----
registerRoutes(router: Router): void
⋮----
// Get todos
⋮----
// Add todo
⋮----
// Update todo
⋮----
// Delete todo
⋮----
// Clear all todos

================
File: src/main/server/rest-api/usage-api.ts
================
import { Router } from 'express';
import { z } from 'zod';
⋮----
import { BaseApi } from './base-api';
⋮----
import { EventsHandler } from '@/events-handler';
⋮----
export class UsageApi extends BaseApi
⋮----
constructor(private readonly eventsHandler: EventsHandler)
⋮----
registerRoutes(router: Router): void

================
File: src/main/server/cloudflare-tunnel-manager.ts
================
import { CloudflareTunnelStatus } from '@common/types';
import { Tunnel, use as setCloudflaredBinary } from 'cloudflared';
import { is } from '@electron-toolkit/utils';
⋮----
import { CLOUDFLARED_BINARY_PATH, SERVER_PORT } from '@/constants';
import logger from '@/logger';
⋮----
export class CloudflareTunnelManager
⋮----
async start(): Promise<void>
⋮----
// set cloudflared binary path only in production app
⋮----
// Wait for URL
⋮----
// Wait for connection
⋮----
// Keep listeners for ongoing events
⋮----
stop(): void
⋮----
getStatus(): CloudflareTunnelStatus

================
File: src/main/server/index.ts
================
// Export main controller

================
File: src/main/server/server-controller.ts
================
import { Server } from 'http';
import { join } from 'path';
⋮----
import express, { Request, Response, NextFunction } from 'express';
import cors from 'cors';
import { is } from '@electron-toolkit/utils';
⋮----
import { ContextApi, PromptApi, SettingsApi, ProjectApi, CommandsApi, UsageApi, SystemApi, TodoApi, McpApi, ProvidersApi } from '@/server/rest-api';
import { SERVER_PORT, AUTH_USERNAME, AUTH_PASSWORD } from '@/constants';
import logger from '@/logger';
import { ProjectManager } from '@/project';
import { EventsHandler } from '@/events-handler';
import { Store } from '@/store';
⋮----
const REQUEST_TIMEOUT_MS = 5 * 60 * 1000; // 5 minutes
⋮----
export class ServerController
⋮----
constructor(
    private readonly server: Server,
    private readonly projectManager: ProjectManager,
    private readonly eventsHandler: EventsHandler,
    private readonly store: Store,
)
⋮----
private serverGuardMiddleware(_: Request, res: Response, next: NextFunction): void
⋮----
// In headless mode, always allow requests regardless of server.enabled setting
⋮----
private timeoutMiddleware(req: Request, res: Response, next: NextFunction): void
⋮----
private basicAuthMiddleware(req: Request, res: Response, next: NextFunction): void
⋮----
// Check if environment variables for auth are provided, which overrides settings
⋮----
private setupApiRoutes(): void
⋮----
// Create API router
⋮----
// Register all API modules
⋮----
// Mount the API router globally under /api
⋮----
private init()
⋮----
// Configure Express
⋮----
// Add server guard middleware as the first middleware
⋮----
// Set timeout for all requests
⋮----
// Add Basic Auth
⋮----
// Serve static renderer files in production (for browser access)
⋮----
// Handle SPA routing: serve index.html for non-API routes
⋮----
async close()
⋮----
// No need to stop server anymore - it's always attached
⋮----
async startServer()
⋮----
async stopServer()

================
File: src/main/session/index.ts
================


================
File: src/main/session/session-manager.ts
================
import path from 'path';
import { promises as fs } from 'fs';
⋮----
import { v4 as uuidv4 } from 'uuid';
import debounce from 'lodash/debounce';
import { ContextFile, ContextMessage, MessageRole, ResponseCompletedData, SessionData, UsageReportData } from '@common/types';
import { extractServerNameToolName, extractTextContent, fileExists, isMessageEmpty, isTextContent } from '@common/utils';
import { AIDER_TOOL_GROUP_NAME, AIDER_TOOL_RUN_PROMPT, SUBAGENTS_TOOL_GROUP_NAME, SUBAGENTS_TOOL_RUN_TASK } from '@common/tools';
⋮----
import { extractPromptContextFromToolResult, THINKING_RESPONSE_STAR_TAG, ANSWER_RESPONSE_START_TAG } from '@/agent/utils';
import logger from '@/logger';
import { Project } from '@/project';
import { isDirectory, isFileIgnored } from '@/utils';
⋮----
export class SessionManager
⋮----
constructor(
    private readonly project: Project,
    initialMessages: ContextMessage[] = [],
    initialFiles: ContextFile[] = [],
)
⋮----
public enableAutosave()
⋮----
public disableAutosave()
⋮----
addContextMessage(role: MessageRole, content: string, usageReport?: UsageReportData): void;
addContextMessage(message: ContextMessage): void;
addContextMessage(roleOrMessage: MessageRole | ContextMessage, content?: string, usageReport?: UsageReportData)
⋮----
// No content provided, do not add the message
⋮----
// Skip adding empty assistant messages
⋮----
private async isFileIgnored(contextFile: ContextFile): Promise<boolean>
⋮----
// not checking gitignore for read-only files
⋮----
async addContextFile(contextFile: ContextFile): Promise<ContextFile[]>
⋮----
// For directories, recursively add all files and subdirectories
⋮----
// Recursively add files and directories
⋮----
// For files, check if ignored and add if not
⋮----
dropContextFile(filePath: string): ContextFile[]
⋮----
// Filter out files that match the path or are within the directory path
⋮----
// Check if file matches exactly or is within the directory path
⋮----
f.path === filePath || // Exact match
contextFileAbsolutePath === absolutePath || // Absolute path matches
!path.relative(absolutePath, contextFileAbsolutePath).startsWith('..'); // File is within the directory
⋮----
return false; // Remove from contextFiles
⋮----
return true; // Keep in contextFiles
⋮----
setContextFiles(contextFiles: ContextFile[], save = true)
⋮----
getContextFiles(): ContextFile[]
⋮----
setContextMessages(contextMessages: ContextMessage[], save = true)
⋮----
getContextMessages(): ContextMessage[]
⋮----
clearMessages(save = true)
⋮----
removeLastMessage(): void
⋮----
}; // Remove the tool message
⋮----
// Iterate backward to find the corresponding assistant message
⋮----
// Remove the specific tool-call part
⋮----
// Check if the assistant message is now empty or only contains empty text parts
⋮----
this.contextMessages.splice(i, 1); // Remove the now empty assistant message
⋮----
// Found and processed the corresponding assistant message, stop searching
⋮----
// If the last message is not a tool message, just remove it
⋮----
removeLastUserMessage(): string | null
⋮----
// Should not happen, but safety check
⋮----
break; // Found the user message, stop removing
⋮----
// Save only if messages were removed or a user message was found
⋮----
toConnectorMessages(contextMessages: ContextMessage[] = this.contextMessages):
⋮----
// Check for aider run_prompt tool call in assistant messages to extract the original prompt
⋮----
// @ts-expect-error part.args contains the prompt in this case
⋮----
// Found the prompt, no need to check other parts of this message
⋮----
// @ts-expect-error part.args contains the prompt in this case
⋮----
// Found the prompt, no need to check other parts of this message
⋮----
// old format
⋮----
// @ts-expect-error part.result.responses is expected to be in the result
⋮----
// Extract the last assistant message from the result
⋮----
async save(name: string)
⋮----
async loadMessages(contextMessages: ContextMessage[]): Promise<void>
⋮----
// Clear all current messages
⋮----
// Add messages to the UI
⋮----
// Collect reasoning and text parts to combine them if both exist
⋮----
// Process combined reasoning and text content
⋮----
// Process tool-call parts
⋮----
// Ensure toolCall.toolCallId exists before proceeding
⋮----
// @ts-expect-error part.result.responses is expected to be in the result
⋮----
// Handle agent tool results - process all messages from subagent
⋮----
// @ts-expect-error part.result.messages is expected to be in the result
⋮----
// Collect reasoning and text parts to combine them if both exist
⋮----
// Process combined reasoning and text content
⋮----
// Process tool-call parts
⋮----
// send messages to Connectors (Aider)
⋮----
async loadFiles(contextFiles: ContextFile[]): Promise<void>
⋮----
// Drop all current files
⋮----
async load(name: string): Promise<void>
⋮----
private saveAsAutosaved()
⋮----
async loadAutosaved(): Promise<void>
⋮----
async getAllSessions(): Promise<SessionData[]>
⋮----
async findSession(name: string): Promise<
    | (SessionData & {
        contextMessages?: ContextMessage[];
        contextFiles?: ContextFile[];
      })
    | null
  > {
    try {
const sessionPath = path.join(this.project.baseDir, '.aider-desk', 'sessions', `$
⋮----
// Migrate old format messages to new format if needed
⋮----
// If message doesn't have usageReport property, it's old format
⋮----
async generateSessionMarkdown(): Promise<string | null>
⋮----
async delete(name: string): Promise<void>

================
File: src/main/store/migrations/v0-to-v1.ts
================
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const migrateSettingsV0toV1 = (settings: any): any =>
⋮----
// Create base providers array

================
File: src/main/store/migrations/v1-to-v2.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { DEFAULT_SETTINGS } from '../store';
⋮----
export const migrateSettingsV1toV2 = (settings: any): any => (
⋮----
// @ts-expect-error the config has changed

================
File: src/main/store/migrations/v10-to-v11.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { SettingsData } from '@common/types';
⋮----
export const migrateV10ToV11 = (settings: any): SettingsData =>
⋮----
// If the profile has a description, move it to the subagent
⋮----
// Remove description from the main profile
⋮----
// Move description to subagent

================
File: src/main/store/migrations/v11-to-v12.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { ContextMemoryMode, SettingsData } from '@common/types';
⋮----
export const migrateV11ToV12 = (settings: any): SettingsData =>
⋮----
hasContextMemory: undefined, // Remove old field

================
File: src/main/store/migrations/v12-to-v13.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { SettingsData } from '@common/types';
⋮----
export const migrateV12ToV13 = (settings: any): SettingsData =>

================
File: src/main/store/migrations/v13-to-v14.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { ProviderProfile } from '@common/types';
import { LlmProvider, LlmProviderName } from '@common/agent';
⋮----
export const migrateProvidersV13toV14 = (settings:

================
File: src/main/store/migrations/v14-to-v15.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { SettingsData } from '@common/types';
⋮----
export const migrateSettingsV14toV15 = (settings: any): SettingsData =>
⋮----
// Combine aiderPreferred and agentPreferred into preferredModels
// Add aiderPreferred first, then agentPreferred, removing duplicates
⋮----
// Remove the old models structure

================
File: src/main/store/migrations/v2-to-v3.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { DEFAULT_SETTINGS } from '../store';
⋮----
export const migrateSettingsV2toV3 = (settings: any): any =>
⋮----
disabledTools: [], // Clear disabled tools
⋮----
mcpAgent: undefined, // Remove the old key

================
File: src/main/store/migrations/v3-to-v4.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { SettingsData } from '@common/types';
import { DEFAULT_AGENT_PROFILE, LlmProvider, LlmProviderName } from '@common/agent';
⋮----
export const migrateSettingsV3toV4 = (settingsV3: any): SettingsData =>
⋮----
// Ensure agentConfig and its properties exist, providing defaults if necessary
⋮----
export const migrateOpenProjectsV3toV4 = (openProjectsV3: any): string[] =>

================
File: src/main/store/migrations/v4-to-v5.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { SettingsData } from '@common/types';
⋮----
export const migrateSettingsV4toV5 = (settingsV4: any): SettingsData =>

================
File: src/main/store/migrations/v5-to-v6.ts
================
/* eslint-disable @typescript-eslint/no-explicit-any */
import { SettingsData } from '@common/types';
⋮----
export const migrateSettingsV5toV6 = (settingsV5: any): SettingsData =>

================
File: src/main/store/migrations/v6-to-v7.ts
================
import { AgentProfile, SettingsData, ToolApprovalState } from '@common/types';
⋮----
export const migrateV6ToV7 = (settings: SettingsData): SettingsData =>
⋮----
// Update AIDER_TOOL_ADD_CONTEXT_FILE to AIDER_TOOL_ADD_CONTEXT_FILES
⋮----
// Update AIDER_TOOL_DROP_CONTEXT_FILE to AIDER_TOOL_DROP_CONTEXT_FILES

================
File: src/main/store/migrations/v7-to-v8.ts
================
import { AgentProfile, SettingsData } from '@common/types';
⋮----
export const migrateV7ToV8 = (settings: SettingsData): SettingsData =>
⋮----
// Add temperature field with default value of 0.7 if it doesn't exist

================
File: src/main/store/migrations/v8-to-v9.ts
================
import { SettingsData } from '@common/types';
import { isOpenRouterProvider } from '@common/agent';
⋮----
export const migrateV8ToV9 = (settings: SettingsData): SettingsData =>

================
File: src/main/store/migrations/v9-to-v10.ts
================
import { SettingsData } from '@common/types';
import { isOpenRouterProvider } from '@common/agent';
⋮----
export const migrateV9ToV10 = (settings: SettingsData): SettingsData =>

================
File: src/main/store/index.ts
================


================
File: src/main/store/store.ts
================
import { v4 as uuidv4 } from 'uuid';
import { AgentProfile, ProviderProfile, ProjectData, ProjectSettings, SettingsData, StartupMode, SuggestionMode, WindowState, Model } from '@common/types';
import { normalizeBaseDir } from '@common/utils';
import { DEFAULT_AGENT_PROFILE, DEFAULT_AGENT_PROFILES, DEFAULT_PROVIDER_MODEL } from '@common/agent';
⋮----
import { migrateSettingsV0toV1 } from './migrations/v0-to-v1';
import { migrateSettingsV1toV2 } from './migrations/v1-to-v2';
import { migrateSettingsV2toV3 } from './migrations/v2-to-v3';
import { migrateOpenProjectsV3toV4, migrateSettingsV3toV4 } from './migrations/v3-to-v4';
import { migrateSettingsV4toV5 } from './migrations/v4-to-v5';
import { migrateSettingsV5toV6 } from './migrations/v5-to-v6';
import { migrateV6ToV7 } from './migrations/v6-to-v7';
import { migrateV7ToV8 } from './migrations/v7-to-v8';
import { migrateV8ToV9 } from './migrations/v8-to-v9';
import { migrateV9ToV10 } from './migrations/v9-to-v10';
import { migrateV10ToV11 } from './migrations/v10-to-v11';
import { migrateV11ToV12 } from './migrations/v11-to-v12';
import { migrateV12ToV13 } from './migrations/v12-to-v13';
⋮----
import { determineMainModel, determineWeakModel } from '@/utils';
import logger from '@/logger';
import { migrateProvidersV13toV14 } from '@/store/migrations/v13-to-v14';
import { migrateSettingsV14toV15 } from '@/store/migrations/v14-to-v15';
⋮----
export const getDefaultProjectSettings = (store: Store, providerModels: Model[], baseDir: string): ProjectSettings =>
⋮----
const compareBaseDirs = (baseDir1: string, baseDir2: string): boolean =>
⋮----
interface StoreSchema {
  windowState: WindowState;
  openProjects: ProjectData[];
  recentProjects: string[]; // baseDir paths of recently closed projects
  settings: SettingsData;
  providers: ProviderProfile[];
  settingsVersion: number;
  releaseNotes?: string | null;
  userId?: string;
}
⋮----
recentProjects: string[]; // baseDir paths of recently closed projects
⋮----
interface CustomStore<T> {
  get<K extends keyof T>(key: K): T[K] | undefined;
  set<K extends keyof T>(key: K, value: T[K]): void;
}
⋮----
get<K extends keyof T>(key: K): T[K] | undefined;
set<K extends keyof T>(key: K, value: T[K]): void;
⋮----
export class Store
⋮----
// @ts-expect-error expected to be initialized
⋮----
async init(): Promise<void>
⋮----
getUserId(): string
⋮----
createDefaultSettings(): SettingsData
⋮----
getSettings(): SettingsData
⋮----
const getAgentProfiles = () =>
⋮----
const mergeDefaultProperties = (agentProfile: AgentProfile) => (
⋮----
// Ensure proper merging for nested objects
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
private migrateSettings(settings: any, openProjects: any, providers: any): SettingsData
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
private findOutCurrentVersion(settings: any): number
⋮----
saveSettings(settings: SettingsData): void
⋮----
getOpenProjects(): ProjectData[]
⋮----
setOpenProjects(projects: ProjectData[]): void
⋮----
updateOpenProjectsOrder(baseDirs: string[]): ProjectData[]
⋮----
// This case should ideally not happen if baseDirs comes from the existing open projects.
// If it can happen, we might need to decide how to handle it (e.g., log a warning).
⋮----
async updateProviderModelInAgentProfiles(providerModels: Model[])
⋮----
// Provider not configured, find the first available configured provider
⋮----
// Update settings with modified agent profiles
⋮----
getRecentProjects(): string[]
⋮----
addRecentProject(baseDir: string): void
⋮----
removeRecentProject(baseDir: string): void
⋮----
getProjectSettings(baseDir: string): ProjectSettings
⋮----
saveProjectSettings(baseDir: string, settings: ProjectSettings): ProjectSettings
⋮----
getWindowState(): StoreSchema['windowState']
⋮----
private getDefaultWindowState(): WindowState
⋮----
setWindowState(windowState: WindowState): void
⋮----
getReleaseNotes(): string | null
⋮----
clearReleaseNotes(): void
⋮----
setReleaseNotes(releaseNotes: string)
⋮----
getAgentProfile(profileId: string): AgentProfile | undefined
⋮----
getProviders(): ProviderProfile[]
⋮----
setProviders(providers: ProviderProfile[]): void

================
File: src/main/tasks/index.ts
================


================
File: src/main/tasks/task-manager.ts
================
import { v4 as uuidv4 } from 'uuid';
import { Task } from '@common/types';
⋮----
export class TaskManager
⋮----
async prepareTasks(titles: string[]): Promise<Task[]>
⋮----
async getTasks(): Promise<Task[]>
⋮----
async updateTask(taskId: string, updates:
⋮----
// No need to re-set task in map as it's a reference type and modified in place.

================
File: src/main/telemetry/index.ts
================


================
File: src/main/telemetry/langfuse.ts
================
import { LangfuseExporter } from 'langfuse-vercel';
⋮----
import type { SpanExporter } from '@opentelemetry/sdk-trace-base';
import type { SettingsData } from '@common/types';
⋮----
import { getEffectiveEnvironmentVariable } from '@/utils/environment';
import logger from '@/logger';
⋮----
export const initializeLangfuseExporter = (): SpanExporter | undefined =>
⋮----
export const getLangfuseEnvironmentVariables = (baseDir: string, settings: SettingsData): Record<string, unknown> =>

================
File: src/main/telemetry/open-telemetry.ts
================
import { NodeSDK } from '@opentelemetry/sdk-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
⋮----
import { initializeLangfuseExporter } from './langfuse';
⋮----
import type { SpanExporter } from '@opentelemetry/sdk-trace-base';
⋮----
import logger from '@/logger';
⋮----
// Graceful shutdown

================
File: src/main/telemetry/telemetry-manager.ts
================
import { PostHog } from 'posthog-node';
import { AgentProfile, Mode, SettingsData } from '@common/types';
import { app } from 'electron';
⋮----
import { Store } from '@/store';
import logger from '@/logger';
import { POSTHOG_PUBLIC_API_KEY, POSTHOG_HOST } from '@/constants';
⋮----
export class TelemetryManager
⋮----
constructor(store: Store)
⋮----
settingsChanged(oldSettings: SettingsData, newSettings: SettingsData)
⋮----
async init(): Promise<void>
⋮----
async destroy(): Promise<void>
⋮----
captureProjectOpened(openedProjectsCount: number)
⋮----
captureProjectClosed(closedProjectsCount: number)
⋮----
captureRunPrompt(mode?: Mode)
⋮----
captureAgentRun(profile: AgentProfile)
⋮----
captureCustomCommand(commandName: string, argsCount: number, mode: Mode)
⋮----
captureTerminalCreated()

================
File: src/main/terminal/index.ts
================


================
File: src/main/terminal/terminal-manager.ts
================
import { v4 as uuidv4 } from 'uuid';
⋮----
import logger from '@/logger';
import { TelemetryManager } from '@/telemetry';
import { EventManager } from '@/events';
⋮----
export interface TerminalInstance {
  id: string;
  baseDir: string;
  ptyProcess: pty.IPty;
  cols: number;
  rows: number;
}
⋮----
export class TerminalManager
⋮----
constructor(
⋮----
private getShellCommand(): string
⋮----
// Try PowerShell first, fallback to cmd
⋮----
// Unix-like systems (Linux, macOS)
⋮----
private getShellArgs(): string[]
⋮----
public createTerminal(baseDir: string, cols: number = 80, rows: number = 24): string
⋮----
// Handle data from terminal
⋮----
// Handle terminal exit
⋮----
// Capture telemetry event for terminal creation
⋮----
public writeToTerminal(terminalId: string, data: string): boolean
⋮----
public resizeTerminal(terminalId: string, cols: number, rows: number): boolean
⋮----
public closeTerminal(terminalId: string): boolean
⋮----
public closeTerminalForProject(baseDir: string): void
⋮----
public getTerminalForProject(baseDir: string): TerminalInstance | undefined
⋮----
public getTerminalsForProject(baseDir: string): TerminalInstance[]
⋮----
public close(): void

================
File: src/main/utils/environment.ts
================
import fs from 'fs';
import path from 'path';
⋮----
import { parse } from '@dotenvx/dotenvx';
import YAML from 'yaml';
import { DEFAULT_PROVIDER_MODEL, LlmProviderName } from '@common/agent';
import { EnvironmentVariable, Model, ProviderProfile, SettingsData } from '@common/types';
⋮----
import logger from '@/logger';
import { DEFAULT_MAIN_MODEL } from '@/models';
import { getLangfuseEnvironmentVariables } from '@/telemetry';
⋮----
const readEnvFile = (filePath: string): Record<string, string> | null =>
⋮----
const readPropertyFromConfFile = (filePath: string, property: string): string | undefined =>
⋮----
export const getEffectiveEnvironmentVariable = (key: string, settings?: SettingsData, projectDir?: string): EnvironmentVariable | undefined =>
⋮----
// 1. From settings.aider.environmentVariables
⋮----
// 2. From --env-file in settings.aider.options
⋮----
// 3. from `env-file` in $projectDir/.aider.conf.yml
⋮----
// 4. from $projectDir/.env
⋮----
// 5. from kebab-case property in $projectDir/.aider.conf.yml
⋮----
// Home dir related checks
⋮----
// 6. from `env-file` in $HOME/.aider.conf.yml
⋮----
// 7. from $HOME/.env
⋮----
// 8. from kebab-case property in $HOME/.aider.conf.yml
⋮----
// 9. From process.env
⋮----
// Not found
⋮----
export const parseAiderEnv = (settings: SettingsData): Record<string, string> =>
⋮----
// Parse Aider environment variables from settings
⋮----
// Check for --env or --env-file in aider options
⋮----
...aiderEnvVars, // Start with settings env
...(fileEnv ?? {}), // Override with file env if it exists
⋮----
export const readAiderConfProperty = (baseDir: string, property: string): string | undefined =>
⋮----
export const determineWeakModel = (baseDir: string): string | undefined =>
⋮----
export const determineMainModel = (settings: SettingsData, providers: ProviderProfile[], providerModels: Model[], baseDir: string): string =>
⋮----
// Check for --model in aider options
⋮----
// Default model if no other condition is met
⋮----
export const getEnvironmentVariablesForAider = (settings: SettingsData, baseDir: string): Record<string, unknown> =>
⋮----
const getTelemetryEnvironmentVariablesForAider = (settings: SettingsData, baseDir: string): Record<string, unknown> =>
⋮----
export const determineProvider = (projectDir?: string, settings?: SettingsData): LlmProviderName =>

================
File: src/main/utils/file-system.ts
================
import { simpleGit } from 'simple-git';
⋮----
import logger from '@/logger';
⋮----
export const getFilePathSuggestions = async (currentPath: string, directoriesOnly = false): Promise<string[]> =>
⋮----
// Extract directory and search pattern
⋮----
// Fallback to parent directory if current doesn't exist
⋮----
// Ensure dirPath is a directory
⋮----
// Get directory contents
⋮----
// Filter entries based on type and search pattern
⋮----
export const isProjectPath = async (path: string): Promise<boolean> =>
⋮----
export const isValidPath = async (baseDir: string, filePath: string): Promise<boolean> =>
⋮----
export const isDirectory = async (path: string): Promise<boolean> =>
⋮----
export const isFileIgnored = async (projectBaseDir: string, filePath: string): Promise<boolean> =>
⋮----
// Make the path relative to the base directory for git check-ignore
⋮----
export const filterIgnoredFiles = async (projectBaseDir: string, filePaths: string[]): Promise<string[]> =>
⋮----
// Convert all file paths to relative paths for git check-ignore
⋮----
// Process files in chunks of max 100
⋮----
// Return only files that are not ignored
⋮----
// Return all files if git check fails (safer default)
⋮----
export const getAllFiles = async (baseDir: string): Promise<string[]> =>
⋮----
return []; // Return empty array if Git command fails

================
File: src/main/utils/index.ts
================


================
File: src/main/utils/python.ts
================
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';
⋮----
import { PYTHON_COMMAND, PYTHON_VENV_DIR, UV_EXECUTABLE } from '@/constants';
import logger from '@/logger';
⋮----
export const getPythonVenvBinPath = (): string =>
⋮----
/**
 * Gets the currently installed version of a Python library within the virtual environment.
 * @param library The name of the Python library.
 * @returns The version string or null if not found or an error occurs.
 */
export const getCurrentPythonLibVersion = async (library: string): Promise<string | null> =>
⋮----
// Log error but return null as expected for 'not found' or other issues
⋮----
/**
 * Gets the latest available version of a Python library from the pip index.
 * @param library The name of the Python library.
 * @returns The latest version string or null if not found or an error occurs.
 */
export const getLatestPythonLibVersion = async (library: string): Promise<string | null> =>

================
File: src/main/utils/web-scrapper.ts
================
import { BrowserWindow } from 'electron';
import Turndown from 'turndown';
⋮----
export class WebScraper
⋮----
async scrape(url: string, timeout: number = 60000): Promise<string>
⋮----
private async scrapeWithBrowserWindow(url: string, timeout: number = 60000): Promise<string>
⋮----
// Create hidden BrowserWindow for scraping
⋮----
// Create timeout promise
⋮----
// Load the URL with timeout
⋮----
// Wait for page to load completely with timeout
⋮----
// Get page content with timeout
⋮----
// Get content type from headers with timeout
⋮----
// If it's HTML, convert to markdown-like text
⋮----
// Cleanup window
⋮----
private async waitForPageLoad(): Promise<void>
⋮----
const checkLoadState = () =>
⋮----
// Additional wait for dynamic content to load
⋮----
private async getContentType(): Promise<string>
⋮----
private async cleanupWindow(): Promise<void>
⋮----
private looksLikeHTML(content: string): boolean
⋮----
private cleanHtml(content: string): string
⋮----
// Remove comments
⋮----
private htmlToMarkDown(content: string): string
⋮----
export const scrapeWeb = async (url: string, timeout: number = 60000) =>

================
File: src/main/versions/index.ts
================


================
File: src/main/versions/versions-manager.ts
================
import path from 'path';
⋮----
import { VersionsInfo } from '@common/types';
import { autoUpdater } from 'electron-updater';
import { app } from 'electron';
import { is } from '@electron-toolkit/utils';
⋮----
import { getCurrentPythonLibVersion, getLatestPythonLibVersion } from '@/utils';
import logger from '@/logger';
import { Store } from '@/store';
import { EventManager } from '@/events';
⋮----
export class VersionsManager
⋮----
private readonly checkInterval = 10 * 60 * 1000; // 10 minutes
⋮----
constructor(
    private readonly eventManager: EventManager,
    private readonly store: Store,
)
⋮----
async getVersions(forceRefresh = false): Promise<VersionsInfo>
⋮----
// Get AiderDesk version using app.getVersion()
⋮----
// Get current and available Aider versions using utility functions
⋮----
// Don't show error box for this common case
⋮----
// Check if auto-update is enabled and a new version was found
⋮----
return this.versionsInfo!; // versionsInfo is guaranteed to be non-null after updateVersionsInfo
⋮----
private updateVersionsInfo(partialInfo: Partial<VersionsInfo>): void
⋮----
private async init(): Promise<void>
⋮----
autoUpdater.autoInstallOnAppQuit = true; // Install on quit after download
⋮----
// Schedule periodic checks
⋮----
// Initial check
⋮----
public destroy(): void
⋮----
public async downloadLatestAiderDesk(): Promise<void>
⋮----
// Check for updates first to ensure we have the latest info
⋮----
// Set autoDownload to true temporarily for this download action
⋮----
// Reset autoDownload back to false after initiating
⋮----
autoUpdater.autoDownload = false; // Ensure it's reset on error

================
File: src/main/constants.ts
================
import path from 'path';
⋮----
import { is } from '@electron-toolkit/utils';
import { app } from 'electron';
⋮----
// constants for project directory files

================
File: src/main/events-handler.ts
================
import path from 'path';
import fs from 'fs/promises';
⋮----
import { BrowserWindow, clipboard, dialog, shell } from 'electron';
import {
  CloudflareTunnelStatus,
  CustomCommand,
  EditFormat,
  EnvironmentVariable,
  FileEdit,
  Font,
  McpServerConfig,
  McpTool,
  Mode,
  ModelInfo,
  Model,
  OS,
  ProjectData,
  ProjectSettings,
  ProviderProfile,
  ResponseCompletedData,
  SessionData,
  SettingsData,
  StartupMode,
  Theme,
  TodoItem,
  UsageDataRow,
  VersionsInfo,
  ProviderModelsData,
} from '@common/types';
import { normalizeBaseDir } from '@common/utils';
⋮----
import { Agent, McpManager } from '@/agent';
import { ModelManager } from '@/models';
import { ProjectManager } from '@/project';
import { CloudflareTunnelManager } from '@/server';
import { getDefaultProjectSettings, Store } from '@/store';
import { TelemetryManager } from '@/telemetry';
import { VersionsManager } from '@/versions';
import { DataManager } from '@/data-manager';
import { TerminalManager } from '@/terminal/terminal-manager';
import logger from '@/logger';
import { getEffectiveEnvironmentVariable, getFilePathSuggestions, isProjectPath, isValidPath, scrapeWeb } from '@/utils';
import { AIDER_DESK_TMP_DIR, LOGS_DIR } from '@/constants';
import { EventManager } from '@/events';
⋮----
export class EventsHandler
⋮----
constructor(
⋮----
loadSettings(): SettingsData
⋮----
async saveSettings(newSettings: SettingsData): Promise<SettingsData>
⋮----
saveTheme(theme: Theme): Theme | undefined
⋮----
saveFont(font: Font): Font | undefined
⋮----
saveFontSize(fontSize: number): number | undefined
⋮----
async loadModelsInfo(): Promise<Record<string, ModelInfo>>
⋮----
return {}; // Return empty object or handle error as appropriate
⋮----
getProjectSettings(baseDir: string): ProjectSettings
⋮----
patchProjectSettings(baseDir: string, settings: Partial<ProjectSettings>): ProjectSettings
⋮----
startProject(baseDir: string): void
⋮----
async stopProject(baseDir: string): Promise<void>
⋮----
async restartProject(baseDir: string, startupMode?: StartupMode): Promise<void>
⋮----
getOpenProjects(): ProjectData[]
⋮----
async addOpenProject(baseDir: string): Promise<ProjectData[]>
⋮----
removeOpenProject(baseDir: string): ProjectData[]
⋮----
// Set the last project as active if the current active project was removed
⋮----
async setActiveProject(baseDir: string): Promise<ProjectData[]>
⋮----
updateOpenProjectsOrder(baseDirs: string[]): ProjectData[]
⋮----
getRecentProjects(): string[]
⋮----
addRecentProject(baseDir: string): void
⋮----
removeRecentProject(baseDir: string): void
⋮----
interruptResponse(baseDir: string): void
⋮----
clearContext(baseDir: string, includeLastMessage = true): void
⋮----
async removeLastMessage(baseDir: string): Promise<void>
⋮----
async redoLastUserPrompt(baseDir: string, mode: Mode, updatedPrompt?: string): Promise<void>
⋮----
async compactConversation(baseDir: string, mode: Mode, customInstructions?: string): Promise<void>
⋮----
async loadInputHistory(baseDir: string): Promise<string[]>
⋮----
async getAddableFiles(baseDir: string, searchRegex?: string): Promise<string[]>
⋮----
async addFile(baseDir: string, filePath: string, readOnly = false): Promise<void>
⋮----
dropFile(baseDir: string, filePath: string): void
⋮----
async pasteImage(baseDir: string): Promise<void>
⋮----
applyEdits(baseDir: string, edits: FileEdit[]): void
⋮----
async runPrompt(baseDir: string, prompt: string, mode?: Mode): Promise<ResponseCompletedData[]>
⋮----
answerQuestion(baseDir: string, answer: string): void
⋮----
runCommand(baseDir: string, command: string): void
⋮----
async getCustomCommands(baseDir: string): Promise<CustomCommand[]>
⋮----
async runCustomCommand(baseDir: string, commandName: string, args: string[], mode: Mode): Promise<void>
⋮----
updateMainModel(baseDir: string, mainModel: string): void
⋮----
updateWeakModel(baseDir: string, weakModel: string): void
⋮----
updateArchitectModel(baseDir: string, architectModel: string): void
⋮----
updateEditFormats(baseDir: string, updatedFormats: Record<string, EditFormat>): void
⋮----
// Update just the current model's edit format while preserving others
⋮----
async loadMcpServerTools(serverName: string, config?: McpServerConfig): Promise<McpTool[] | null>
⋮----
async reloadMcpServers(mcpServers: Record<string, McpServerConfig>, force = false): Promise<void>
⋮----
// Get the currently active project's base directory
⋮----
async createTerminal(baseDir: string, cols?: number, rows?: number): Promise<string>
⋮----
writeToTerminal(terminalId: string, data: string): void
⋮----
resizeTerminal(terminalId: string, cols: number, rows: number): void
⋮----
closeTerminal(terminalId: string): void
⋮----
getTerminalForProject(baseDir: string): string | null
⋮----
getTerminalsForProject(baseDir: string):
⋮----
async scrapeWeb(baseDir: string, url: string, filePath?: string): Promise<void>
⋮----
// Normalize URL for filename
⋮----
// Truncate if too long
⋮----
// Check if path looks like a directory (ends with separator)
⋮----
async saveSession(baseDir: string, name: string): Promise<boolean>
⋮----
async loadSessionMessages(baseDir: string, name: string): Promise<void>
⋮----
async loadSessionFiles(baseDir: string, name: string): Promise<void>
⋮----
async deleteSession(baseDir: string, name: string): Promise<boolean>
⋮----
async listSessions(baseDir: string): Promise<SessionData[]>
⋮----
async exportSessionToMarkdown(baseDir: string): Promise<void>
⋮----
setZoomLevel(zoomLevel: number): void
⋮----
async getVersions(forceRefresh = false): Promise<VersionsInfo>
⋮----
async downloadLatestAiderDesk(): Promise<void>
⋮----
getReleaseNotes(): string | null
⋮----
clearReleaseNotes(): void
⋮----
getOS(): OS
⋮----
async queryUsageData(from: Date, to: Date): Promise<UsageDataRow[]>
⋮----
getEffectiveEnvironmentVariable(key: string, baseDir?: string): EnvironmentVariable | undefined
⋮----
async getProviderModels(): Promise<ProviderModelsData>
⋮----
getProviders(): ProviderProfile[]
⋮----
async updateProviders(providers: ProviderProfile[]): Promise<void>
⋮----
async upsertModel(providerId: string, modelId: string, model: Model): Promise<void>
⋮----
async deleteModel(providerId: string, modelId: string): Promise<void>
⋮----
async showOpenDialog(options: Electron.OpenDialogSyncOptions): Promise<Electron.OpenDialogReturnValue>
⋮----
async openLogsDirectory(): Promise<boolean>
⋮----
async isProjectPath(path: string): Promise<boolean>
⋮----
async isValidPath(baseDir: string, path: string): Promise<boolean>
⋮----
async getFilePathSuggestions(currentPath: string, directoriesOnly = true): Promise<string[]>
⋮----
async getTodos(baseDir: string): Promise<TodoItem[]>
⋮----
async addTodo(baseDir: string, name: string): Promise<TodoItem[]>
⋮----
async updateTodo(baseDir: string, name: string, updates: Partial<TodoItem>): Promise<TodoItem[]>
⋮----
async deleteTodo(baseDir: string, name: string): Promise<TodoItem[]>
⋮----
async clearAllTodos(baseDir: string): Promise<TodoItem[]>
⋮----
async initProjectRulesFile(baseDir: string): Promise<void>
⋮----
enableServer(username?: string, password?: string): SettingsData
⋮----
disableServer(): SettingsData
⋮----
async startCloudflareTunnel(): Promise<CloudflareTunnelStatus | null>
⋮----
stopCloudflareTunnel(): void
⋮----
getCloudflareTunnelStatus(): CloudflareTunnelStatus

================
File: src/main/index.ts
================
import { join } from 'path';
import { createServer } from 'http';
import { existsSync, statSync } from 'fs';
⋮----
import { compareBaseDirs, delay } from '@common/utils';
import { electronApp, is, optimizer } from '@electron-toolkit/utils';
import { app, BrowserWindow, dialog, Menu, shell } from 'electron';
⋮----
import icon from '../../resources/icon.png?asset';
⋮----
import { ProgressWindow } from '@/progress-window';
import { Agent, McpManager } from '@/agent';
import { CloudflareTunnelManager, ServerController } from '@/server';
import { ConnectorManager } from '@/connector';
import { setupIpcHandlers } from '@/ipc-handlers';
import { ProjectManager } from '@/project';
import { performStartUp, UpdateProgressData } from '@/start-up';
import { getDefaultProjectSettings, Store } from '@/store';
import { VersionsManager } from '@/versions';
import logger from '@/logger';
import { TelemetryManager } from '@/telemetry';
import { EventManager } from '@/events';
import { ModelManager } from '@/models';
import { DataManager } from '@/data-manager';
import { TerminalManager } from '@/terminal';
import { EventsHandler } from '@/events-handler';
import { HEADLESS_MODE, SERVER_PORT } from '@/constants';
⋮----
const setupCustomMenu = (): void =>
⋮----
// Edit menu (without Select All)
⋮----
// View menu
⋮----
// Settings menu
⋮----
const initStore = async (): Promise<Store> =>
⋮----
const initManagers = async (
  mainWindow: BrowserWindow | null,
  store: Store,
): Promise<
⋮----
// Initialize telemetry manager
⋮----
// Initialize MCP manager
⋮----
// Initialize event manager
⋮----
// Initialize model manager
⋮----
// Initialize data manager
⋮----
// Initialize agent
⋮----
// Initialize project manager
⋮----
// Initialize terminal manager
⋮----
// Initialize Versions Manager (this also sets up listeners)
⋮----
// Create HTTP server
⋮----
// Initialize Cloudflare tunnel manager
⋮----
// Initialize events handler
⋮----
// Create and initialize REST API controller with the server
⋮----
// Initialize connector manager with the server
⋮----
// start listening
⋮----
const beforeQuit = async () =>
⋮----
// Handle CTRL+C (SIGINT)
⋮----
const initWindow = async (store: Store): Promise<BrowserWindow> =>
⋮----
const saveWindowState = (): void =>
⋮----
// Initialize IPC handlers
⋮----
// HMR for renderer base on electron-vite cli.
// Load the remote URL for development or the local html file for production.
⋮----
// Apply saved zoom level
⋮----
// Setup custom menu only in GUI mode
⋮----
updateProgress = (
⋮----
// In headless mode, use a no-op updateProgress
updateProgress = () =>
⋮----
// Initialize managers without window in headless mode

================
File: src/main/ipc-handlers.ts
================
import { EditFormat, FileEdit, ProviderProfile, McpServerConfig, Mode, Model, ProjectSettings, SettingsData, StartupMode, TodoItem } from '@common/types';
import { ipcMain } from 'electron';
⋮----
import { EventsHandler } from './events-handler';
⋮----
import { ServerController } from '@/server';
⋮----
export const setupIpcHandlers = (eventsHandler: EventsHandler, serverController: ServerController) =>
⋮----
// Terminal handlers
⋮----
// Server control handlers
⋮----
// Cloudflare tunnel handlers

================
File: src/main/logger.ts
================
import winston from 'winston';
import DailyRotateFile from 'winston-daily-rotate-file';
⋮----
import { LOGS_DIR } from '@/constants';
⋮----
// If we're not in production, also log to the console

================
File: src/main/messages.ts
================
import {
  ContextFileSourceType,
  ContextFile,
  TokensCost,
  FileEdit,
  UsageReportData,
  LogLevel,
  Mode,
  MessageRole,
  RawModelInfo,
  EditFormat,
  PromptContext,
} from '@common/types';
⋮----
export type MessageAction =
  | 'init'
  | 'prompt'
  | 'prompt-finished'
  | 'response'
  | 'add-file'
  | 'drop-file'
  | 'update-autocompletion'
  | 'ask-question'
  | 'answer-question'
  | 'set-models'
  | 'update-context-files'
  | 'use-command-output'
  | 'run-command'
  | 'tokens-info'
  | 'add-message'
  | 'interrupt-response'
  | 'apply-edits'
  | 'compact-conversation'
  | 'update-repo-map'
  | 'update-env-vars'
  | 'request-context-info'
  | 'subscribe-events'
  | 'unsubscribe-events';
⋮----
export interface Message {
  action: MessageAction;
}
⋮----
export interface LogMessage {
  message: string;
  level: LogLevel;
  finished?: boolean;
  promptContext?: PromptContext;
}
⋮----
export interface InitMessage {
  action: 'init';
  baseDir: string;
  source?: string;
  contextFiles?: ContextFile[];
  listenTo?: MessageAction[];
  inputHistoryFile?: string;
}
⋮----
export const isInitMessage = (message: Message): message is InitMessage =>
⋮----
export interface PromptMessage extends Message {
  action: 'prompt';
  prompt: string;
  mode: Mode | null;
  architectModel: string | null;
  promptContext: PromptContext;
  messages?: { role: MessageRole; content: string }[];
  files?: ContextFile[];
}
⋮----
export interface ResponseMessage extends Message {
  id: string;
  action: 'response';
  content: string;
  reflectedMessage?: string;
  finished: boolean;
  usageReport?: string | UsageReportData;
  editedFiles?: string[];
  commitHash?: string;
  commitMessage?: string;
  diff?: string;
  sequenceNumber?: number;
  promptContext?: PromptContext;
}
⋮----
export const isResponseMessage = (message: Message): message is ResponseMessage =>
⋮----
export interface AddFileMessage extends Message {
  action: 'add-file';
  path: string;
  sourceType?: ContextFileSourceType;
  readOnly?: boolean;
  noUpdate?: boolean;
}
⋮----
export const isAddFileMessage = (message: Message): message is AddFileMessage =>
⋮----
export interface DropFileMessage extends Message {
  action: 'drop-file';
  path: string;
  readOnly?: boolean;
  noUpdate?: boolean;
}
⋮----
export const isDropFileMessage = (message: Message): message is DropFileMessage =>
⋮----
export interface RunCommandMessage extends Message {
  action: 'run-command';
  command: string;
  messages?: { role: MessageRole; content: string }[];
  files?: ContextFile[];
}
⋮----
export interface UpdateAutocompletionMessage extends Message {
  action: 'update-autocompletion';
  words: string[];
  allFiles: string[];
  models: string[];
}
⋮----
export const isUpdateAutocompletionMessage = (message: Message): message is UpdateAutocompletionMessage =>
⋮----
export interface AskQuestionMessage extends Message {
  action: 'ask-question';
  question: string;
  subject?: string;
  defaultAnswer: string;
  isGroupQuestion?: boolean;
}
⋮----
export const isAskQuestionMessage = (message: Message): message is AskQuestionMessage =>
⋮----
export interface AnswerQuestionMessage extends Message {
  action: 'answer-question';
  answer: string;
}
⋮----
export interface SetModelsMessage extends Message {
  action: 'set-models';
  mainModel: string;
  weakModel?: string | null;
  editFormat?: EditFormat;
  environmentVariables?: Record<string, string>;
  info?: RawModelInfo;
  hasError?: boolean;
}
⋮----
export const isSetModelsMessage = (message: Message): message is SetModelsMessage =>
⋮----
export interface UpdateContextFilesMessage extends Message {
  action: 'update-context-files';
  files: ContextFile[];
}
⋮----
export const isUpdateContextFilesMessage = (message: Message): message is UpdateContextFilesMessage =>
⋮----
export interface UseCommandOutputMessage extends Message {
  action: 'use-command-output';
  command: string;
  addToContext?: boolean;
  finished: boolean;
}
⋮----
export const isUseCommandOutputMessage = (message: Message): message is UseCommandOutputMessage =>
⋮----
export interface TokensInfoMessage extends Message {
  action: 'tokens-info';
  info: {
    files: Record<string, TokensCost>;
    systemMessages: TokensCost;
    chatHistory: TokensCost;
    repoMap: TokensCost;
  };
}
⋮----
export const isTokensInfoMessage = (message: Message): message is TokensInfoMessage =>
⋮----
export interface AddMessageMessage extends Message {
  action: 'add-message';
  content: string;
  role: MessageRole;
  acknowledge: boolean;
  usageReport?: UsageReportData;
}
⋮----
export const isAddMessageMessage = (message: Message): message is AddMessageMessage =>
⋮----
export interface InterruptResponseMessage extends Message {
  action: 'interrupt-response';
}
⋮----
export interface PromptFinishedMessage extends Message {
  action: 'prompt-finished';
  promptId: string;
}
⋮----
export const isPromptFinishedMessage = (message: Message): message is PromptFinishedMessage =>
⋮----
export interface ApplyEditsMessage extends Message {
  action: 'apply-edits';
  edits: FileEdit[];
}
⋮----
export interface CompactConversationMessage extends Message {
  action: 'compact-conversation';
  customInstructions?: string;
}
⋮----
export interface UpdateRepoMapMessage extends Message {
  action: 'update-repo-map';
  repoMap: string;
}
⋮----
export const isUpdateRepoMapMessage = (message: Message): message is UpdateRepoMapMessage =>
⋮----
export interface UpdateEnvVarsMessage extends Message {
  action: 'update-env-vars';
  environmentVariables: Record<string, unknown>;
}
⋮----
export const isUpdateEnvVarsMessage = (message: Message): message is UpdateEnvVarsMessage =>
⋮----
export interface RequestContextInfoMessage extends Message {
  action: 'request-context-info';
  messages?: { role: MessageRole; content: string }[];
  files?: ContextFile[];
}
⋮----
export const isRequestContextInfoMessage = (message: Message): message is RequestContextInfoMessage =>
⋮----
export interface SubscribeEventsMessage extends Message {
  action: 'subscribe-events';
  eventTypes?: string[];
  baseDirs?: string[];
}
⋮----
export const isSubscribeEventsMessage = (message: Message): message is SubscribeEventsMessage =>
⋮----
export interface UnsubscribeEventsMessage extends Message {
  action: 'unsubscribe-events';
}
⋮----
export const isUnsubscribeEventsMessage = (message: Message): message is UnsubscribeEventsMessage =>

================
File: src/main/progress-window.ts
================
import { join } from 'path';
⋮----
import { BrowserWindow, ipcMain } from 'electron';
import { is } from '@electron-toolkit/utils';
⋮----
export class ProgressWindow
⋮----
constructor(options:
⋮----
on(event: 'ready', callback: () => void): void
⋮----
set title(value: string)
⋮----
setDetail(value: string, subtitle?: string): void
⋮----
setCompleted(): void
⋮----
setProgress(progress: number): void
⋮----
close(): void

================
File: src/main/start-up.ts
================
import { exec } from 'child_process';
⋮----
import { promisify } from 'util';
⋮----
import { delay } from '@common/utils';
import { is } from '@electron-toolkit/utils';
⋮----
import logger from '@/logger';
import { getCurrentPythonLibVersion, getLatestPythonLibVersion, getPythonVenvBinPath } from '@/utils';
import {
  AIDER_DESK_DATA_DIR,
  SETUP_COMPLETE_FILENAME,
  PYTHON_VENV_DIR,
  AIDER_DESK_CONNECTOR_DIR,
  RESOURCES_DIR,
  AIDER_DESK_MCP_SERVER_DIR,
  UV_EXECUTABLE,
} from '@/constants';
⋮----
/**
 * Checks if uv is available and accessible.
 */
const checkUvAvailable = async (): Promise<void> =>
⋮----
const createVirtualEnv = async (): Promise<void> =>
⋮----
const setupAiderConnector = async (cleanInstall: boolean, updateProgress?: UpdateProgressFunction): Promise<void> =>
⋮----
// Copy connector.py from resources
⋮----
const installAiderConnectorRequirements = async (cleanInstall: boolean, updateProgress?: UpdateProgressFunction): Promise<void> =>
⋮----
// Version-pinned package - check if matches required version
⋮----
// For non-version-pinned packages, check if newer version is available
⋮----
// If currentVersion is null, the package is not installed, so proceed with installation.
⋮----
const setupMcpServer = async () =>
⋮----
// Copy all files from the MCP server directory
⋮----
// Skip directories for now, only copy files
⋮----
const performUpdateCheck = async (updateProgress: UpdateProgressFunction): Promise<void> =>
⋮----
export type UpdateProgressData = {
  step: string;
  message: string;
  info?: string;
  progress?: number; // 0-100
};
⋮----
progress?: number; // 0-100
⋮----
export type UpdateProgressFunction = (data: UpdateProgressData) => void;
⋮----
export const performStartUp = async (updateProgress: UpdateProgressFunction): Promise<boolean> =>
⋮----
// Create setup complete file
⋮----
// Clean up if setup fails

================
File: src/mcp-server/aider-desk-mcp-server.ts
================
/* eslint-disable func-style,@typescript-eslint/no-explicit-any */
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import axios from 'axios';
import { z } from 'zod';
⋮----
// Get project directory from command line arguments or use default
⋮----
// AiderDesk API configuration
⋮----
// eslint-disable-next-line no-console
⋮----
// Create MCP server
⋮----
// Define tool schemas
⋮----
// Add tools to the server
⋮----
// Start the server
async function main()
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console

================
File: src/preload/index.d.ts
================
import { ApplicationAPI } from '@common/api';
⋮----
import type { ElectronAPI } from '@electron-toolkit/preload';
⋮----
interface Window {
    electron: ElectronAPI;
    api: ApplicationAPI;
  }

================
File: src/preload/index.ts
================
import {
  AutocompletionData,
  ClearProjectData,
  CommandOutputData,
  ContextFilesUpdatedData,
  CustomCommandsUpdatedData,
  FileEdit,
  InputHistoryData,
  LogData,
  McpServerConfig,
  ModelsData,
  OS,
  ProjectStartedData,
  QuestionData,
  ResponseChunkData,
  ResponseCompletedData,
  TerminalData,
  TerminalExitData,
  TokensInfoData,
  ToolData,
  UserMessageData,
  VersionsInfo,
  ProviderModelsData,
  ProvidersUpdatedData,
  SettingsData,
} from '@common/types';
import { electronAPI } from '@electron-toolkit/preload';
⋮----
import { contextBridge, ipcRenderer, webUtils } from 'electron';
import { ApplicationAPI } from '@common/api';
import { compareBaseDirs } from '@common/utils';
⋮----
const listener = (_: Electron.IpcRendererEvent, data: SettingsData) =>
⋮----
// Terminal operations
⋮----
// eslint-disable-next-line no-console

================
File: src/renderer/src/api/browser-api.ts
================
import {
  AutocompletionData,
  ClearProjectData,
  CommandOutputData,
  ContextFilesUpdatedData,
  CustomCommand,
  CustomCommandsUpdatedData,
  EditFormat,
  EnvironmentVariable,
  FileEdit,
  InputHistoryData,
  LogData,
  McpServerConfig,
  McpTool,
  Mode,
  ModelInfo,
  Model,
  ModelsData,
  OS,
  ProjectData,
  ProjectSettings,
  ProjectStartedData,
  QuestionData,
  ResponseChunkData,
  ResponseCompletedData,
  SessionData,
  SettingsData,
  StartupMode,
  TerminalData,
  TerminalExitData,
  TodoItem,
  TokensInfoData,
  ToolData,
  UsageDataRow,
  UserMessageData,
  VersionsInfo,
  CloudflareTunnelStatus,
  ProviderProfile,
  ProviderModelsData,
  ProvidersUpdatedData,
} from '@common/types';
import { ApplicationAPI } from '@common/api';
import axios, { type AxiosInstance } from 'axios';
import { io, Socket } from 'socket.io-client';
import { compareBaseDirs } from '@common/utils';
import { v4 as uuidv4 } from 'uuid';
⋮----
type EventDataMap = {
  'settings-updated': SettingsData;
  'response-chunk': ResponseChunkData;
  'response-completed': ResponseCompletedData;
  log: LogData;
  'context-files-updated': ContextFilesUpdatedData;
  'custom-commands-updated': CustomCommandsUpdatedData;
  'update-autocompletion': AutocompletionData;
  'ask-question': QuestionData;
  'update-aider-models': ModelsData;
  'command-output': CommandOutputData;
  'update-tokens-info': TokensInfoData;
  tool: ToolData;
  'user-message': UserMessageData;
  'input-history-updated': InputHistoryData;
  'clear-project': ClearProjectData;
  'project-started': ProjectStartedData;
  'provider-models-updated': ProviderModelsData;
  'providers-updated': ProvidersUpdatedData;
};
⋮----
type EventCallback<T> = (data: T) => void;
⋮----
interface ListenerEntry<T> {
  callback: EventCallback<T>;
  baseDir?: string;
}
⋮----
class UnsupportedError extends Error
⋮----
constructor(message: string)
⋮----
export class BrowserApi implements ApplicationAPI
⋮----
constructor()
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
private ensureSocketConnected(): void
⋮----
private addListener<T extends keyof EventDataMap>(eventType: T, baseDir: string | undefined, callback: EventCallback<EventDataMap[T]>): () => void
⋮----
private async post<B, R>(endpoint: string, body: B): Promise<R>
⋮----
private async get<T>(endpoint: string, params?: Record<string, unknown>): Promise<T>
⋮----
private async patch<B, R>(endpoint: string, body: B): Promise<R>
⋮----
private async delete<T>(endpoint: string): Promise<T>
⋮----
private async put<B, R>(endpoint: string, body: B): Promise<R>
⋮----
isOpenLogsDirectorySupported(): boolean
openLogsDirectory(): Promise<boolean>
loadSettings(): Promise<SettingsData>
saveSettings(settings: SettingsData): Promise<SettingsData>
startProject(baseDir: string): void
stopProject(baseDir: string): void
restartProject(baseDir: string, startupMode?: StartupMode): void
runPrompt(baseDir: string, prompt: string, mode?: Mode): void
redoLastUserPrompt(baseDir: string, mode: Mode, updatedPrompt?: string): void
answerQuestion(baseDir: string, answer: string): void
loadInputHistory(baseDir: string): Promise<string[]>
isOpenDialogSupported(): boolean
showOpenDialog(options: Electron.OpenDialogSyncOptions): Promise<Electron.OpenDialogReturnValue>
getPathForFile(file: File): string
getOpenProjects(): Promise<ProjectData[]>
addOpenProject(baseDir: string): Promise<ProjectData[]>
setActiveProject(baseDir: string): Promise<ProjectData[]>
removeOpenProject(baseDir: string): Promise<ProjectData[]>
updateOpenProjectsOrder(baseDirs: string[]): Promise<ProjectData[]>
updateMainModel(baseDir: string, model: string): void
updateWeakModel(baseDir: string, model: string): void
updateArchitectModel(baseDir: string, model: string): void
updateEditFormats(baseDir: string, editFormats: Record<string, EditFormat>): void
getProjectSettings(baseDir: string): Promise<ProjectSettings>
patchProjectSettings(baseDir: string, settings: Partial<ProjectSettings>): Promise<ProjectSettings>
getFilePathSuggestions(currentPath: string, directoriesOnly?: boolean): Promise<string[]>
getAddableFiles(baseDir: string): Promise<string[]>
addFile(baseDir: string, filePath: string, readOnly?: boolean): void
async isValidPath(baseDir: string, path: string): Promise<boolean>
async isProjectPath(path: string): Promise<boolean>
dropFile(baseDir: string, path: string): void
runCommand(baseDir: string, command: string): void
pasteImage(baseDir: string): void
scrapeWeb(baseDir: string, url: string, filePath?: string): Promise<string>
initProjectRulesFile(baseDir: string): Promise<void>
getTodos(baseDir: string): Promise<TodoItem[]>
addTodo(baseDir: string, name: string): Promise<TodoItem[]>
updateTodo(baseDir: string, name: string, updates: Partial<TodoItem>): Promise<TodoItem[]>
deleteTodo(baseDir: string, name: string): Promise<TodoItem[]>
clearAllTodos(baseDir: string): Promise<TodoItem[]>
loadMcpServerTools(serverName: string, config?: McpServerConfig): Promise<McpTool[] | null>
reloadMcpServers(mcpServers: Record<string, McpServerConfig>, force = false): Promise<void>
saveSession(baseDir: string, name: string): Promise<boolean>
deleteSession(baseDir: string, name: string): Promise<boolean>
loadSessionMessages(baseDir: string, name: string): Promise<void>
loadSessionFiles(baseDir: string, name: string): Promise<void>
listSessions(baseDir: string): Promise<SessionData[]>
exportSessionToMarkdown(baseDir: string): Promise<void>
getRecentProjects(): Promise<string[]>
addRecentProject(baseDir: string): Promise<void>
removeRecentProject(baseDir: string): Promise<void>
interruptResponse(baseDir: string): void
applyEdits(baseDir: string, edits: FileEdit[]): void
clearContext(baseDir: string): void
removeLastMessage(baseDir: string): void
compactConversation(baseDir: string, mode: Mode, customInstructions?: string): void
setZoomLevel(level: number): Promise<void>
⋮----
// eslint-disable-next-line no-console
⋮----
getVersions(forceRefresh = false): Promise<VersionsInfo | null>
downloadLatestAiderDesk(): Promise<void>
async getReleaseNotes(): Promise<string | null>
clearReleaseNotes(): Promise<void>
async getOS(): Promise<OS>
loadModelsInfo(): Promise<Record<string, ModelInfo>>
getProviderModels(): Promise<ProviderModelsData>
getProviders(): Promise<ProviderProfile[]>
updateProviders(providers: ProviderProfile[]): Promise<ProviderProfile[]>
upsertModel(providerId: string, modelId: string, model: Model): Promise<Model[]>
deleteModel(providerId: string, modelId: string): Promise<Model[]>
queryUsageData(from: string, to: string): Promise<UsageDataRow[]>
getEffectiveEnvironmentVariable(key: string, baseDir?: string): Promise<EnvironmentVariable | undefined>
addSettingsUpdatedListener(callback: (data: SettingsData) => void): () => void
addResponseChunkListener(baseDir: string, callback: (data: ResponseChunkData) => void): () => void
addResponseCompletedListener(baseDir: string, callback: (data: ResponseCompletedData) => void): () => void
addLogListener(baseDir: string, callback: (data: LogData) => void): () => void
addContextFilesUpdatedListener(baseDir: string, callback: (data: ContextFilesUpdatedData) => void): () => void
addCustomCommandsUpdatedListener(baseDir: string, callback: (data: CustomCommandsUpdatedData) => void): () => void
addUpdateAutocompletionListener(baseDir: string, callback: (data: AutocompletionData) => void): () => void
addAskQuestionListener(baseDir: string, callback: (data: QuestionData) => void): () => void
addUpdateAiderModelsListener(baseDir: string, callback: (data: ModelsData) => void): () => void
addCommandOutputListener(baseDir: string, callback: (data: CommandOutputData) => void): () => void
addTokensInfoListener(baseDir: string, callback: (data: TokensInfoData) => void): () => void
addToolListener(baseDir: string, callback: (data: ToolData) => void): () => void
addUserMessageListener(baseDir: string, callback: (data: UserMessageData) => void): () => void
addInputHistoryUpdatedListener(baseDir: string, callback: (data: InputHistoryData) => void): () => void
addClearProjectListener(baseDir: string, callback: (data: ClearProjectData) => void): () => void
addProjectStartedListener(baseDir: string, callback: (data: ProjectStartedData) => void): () => void
addVersionsInfoUpdatedListener(callback: (data: VersionsInfo) => void): () => void
⋮----
addProviderModelsUpdatedListener(callback: (data: ProviderModelsData) => void): () => void
⋮----
addProvidersUpdatedListener(callback: (data: ProvidersUpdatedData) => void): () => void
addTerminalDataListener(baseDir: string, callback: (data: TerminalData) => void): () => void
addTerminalExitListener(baseDir: string, callback: (data: TerminalExitData) => void): () => void
addContextMenuListener(callback: (params: Electron.ContextMenuParams) => void): () => void
addOpenSettingsListener(callback: (tabIndex: number) => void): () => void
getCustomCommands(baseDir: string): Promise<CustomCommand[]>
runCustomCommand(baseDir: string, commandName: string, args: string[], mode: Mode): Promise<void>
isTerminalSupported(): boolean
createTerminal(baseDir: string, cols?: number, rows?: number): Promise<string>
writeToTerminal(terminalId: string, data: string): Promise<boolean>
resizeTerminal(terminalId: string, cols: number, rows: number): Promise<boolean>
closeTerminal(terminalId: string): Promise<boolean>
getTerminalForProject(baseDir: string): Promise<string | null>
getAllTerminalsForProject(baseDir: string): Promise<Array<
isManageServerSupported(): boolean
⋮----
startServer(username?: string, password?: string): Promise<boolean>
⋮----
// Server control not supported in browser mode
⋮----
stopServer(): Promise<boolean>
⋮----
// Server control not supported in browser mode
⋮----
startCloudflareTunnel(): Promise<boolean>
⋮----
stopCloudflareTunnel(): Promise<void>
⋮----
getCloudflareTunnelStatus(): Promise<CloudflareTunnelStatus>

================
File: src/renderer/src/components/AgentSelector/AgentSelector.tsx
================
import { useCallback, useEffect, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { MdCheck, MdDoneAll, MdFlashOn, MdOutlineChecklist, MdOutlineFileCopy, MdOutlineHdrAuto, MdOutlineMap } from 'react-icons/md';
import { RiToolsFill } from 'react-icons/ri';
import { clsx } from 'clsx';
import { AgentProfile, ToolApprovalState } from '@common/types';
import { getActiveAgentProfile } from '@common/utils';
import { BiCog } from 'react-icons/bi';
import { TOOL_GROUP_NAME_SEPARATOR } from '@common/tools';
import { useHotkeys } from 'react-hotkeys-hook';
⋮----
import { McpServerSelectorItem } from './McpServerSelectorItem';
⋮----
import { useClickOutside } from '@/hooks/useClickOutside';
import { IconButton } from '@/components/common/IconButton';
import { StyledTooltip } from '@/components/common/StyledTooltip';
import { Accordion } from '@/components/common/Accordion';
import { useSettings } from '@/context/SettingsContext';
import { useProjectSettings } from '@/context/ProjectSettingsContext';
import { Checkbox } from '@/components/common/Checkbox';
import { SettingsDialog } from '@/components/settings/SettingsDialog';
import { useApi } from '@/context/ApiContext';
⋮----
type Props = {
  isActive: boolean;
};
⋮----
const calculateEnabledTools = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
const handleSwitchProfile = (profileId: string) =>
⋮----
const handleToggleServer = (serverName: string) =>
⋮----
// Remove tool approvals for this server
⋮----
const handleOpenAgentProfiles = () =>
⋮----
{/* Profiles List */}
⋮----
{/* MCP Servers */}
⋮----
<span className="text-xs flex-1 font-medium text-text-secondary text-left px-1 uppercase">
⋮----
{/* Quick Settings */}
⋮----
label=
⋮----
onChange=

================
File: src/renderer/src/components/AgentSelector/index.ts
================


================
File: src/renderer/src/components/AgentSelector/McpServerSelectorItem.tsx
================
import { useEffect, useState } from 'react';
import { CgSpinner } from 'react-icons/cg';
import { ToolApprovalState } from '@common/types';
import { TOOL_GROUP_NAME_SEPARATOR } from '@common/tools';
import { useTranslation } from 'react-i18next';
⋮----
import { Checkbox } from '../common/Checkbox';
⋮----
import { useApi } from '@/context/ApiContext';
⋮----
type Props = {
  serverName: string;
  disabled: boolean;
  toolApprovals: Record<string, ToolApprovalState>;
  onToggle: (serverName: string) => void;
};
⋮----
const loadTools = async () =>
⋮----
// eslint-disable-next-line no-console

================
File: src/renderer/src/components/common/DiffViewer/DiffViewer.scss
================
.diff-viewer {
  .diff-gutter {
    color: var(--color-text-muted);
    text-align: center; // Better alignment for line numbers

    &.diff-gutter-omit {
      &:before {
        background-color: var(--color-bg-tertiary);
      }
    }
  }

  .diff-code {
    padding: 0;
    font-family: 'Sono', monospace;
  }

  .diff-code-insert {
    background-color: var(--color-bg-diff-viewer-new-primary);

    .diff-code-edit {
      background-color: var(--color-bg-diff-viewer-new-secondary);
    }
  }

  .diff-code-delete {
    background-color: var(--color-bg-diff-viewer-old-primary);

    .diff-code-edit {
      background-color: var(--color-bg-diff-viewer-old-secondary);
    }
  }

  .diff-gutter-insert {
    background-color: var(--color-bg-diff-viewer-new-primary);
    width: 16px;
    min-width: 16px;
    max-width: 16px;
  }

  .diff-gutter-delete {
    background-color: var(--color-bg-diff-viewer-old-primary);
  }

  ::selection {
    background-color: var(--color-bg-tertiary);
    color: var(--color-text-primary);
  }
}

================
File: src/renderer/src/components/common/DiffViewer/DiffViewer.tsx
================
import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { Diff, Hunk, parseDiff } from 'react-diff-view';
import { diffLines, formatLines } from 'unidiff';
import { useDebounce } from '@reactuses/core';
⋮----
import { createTokens } from './utils';
⋮----
import { useResponsive } from '@/hooks/useResponsive';
⋮----
type Props = {
  oldValue: string;
  newValue: string;
  language: string;
  isComplete?: boolean;
};
⋮----
export const DiffViewer = (
⋮----
// eslint-disable-next-line no-console
⋮----
Please report an issue in https://github.com/hotovo/aider-desk/issues.
⋮----
// No error, but no diff file (e.g., identical content)

================
File: src/renderer/src/components/common/DiffViewer/index.tsx
================


================
File: src/renderer/src/components/common/DiffViewer/UDiffViewer.tsx
================
import { useMemo } from 'react';
import { Diff, Hunk, parseDiff } from 'react-diff-view';
⋮----
import { createTokens } from './utils';
⋮----
type Props = {
  udiff: string;
  language: string;
};
⋮----
// eslint-disable-next-line no-console

================
File: src/renderer/src/components/common/DiffViewer/utils.ts
================
import { tokenize } from 'react-diff-view';
import refractor from 'refractor';
import { HunkData } from 'react-diff-view/types/utils';
⋮----
export const createTokens = (hunks: HunkData[], language: string) =>
⋮----
// eslint-disable-next-line no-console

================
File: src/renderer/src/components/common/Accordion.tsx
================
import { ReactNode, useEffect, useRef, useState } from 'react';
import { FaChevronDown } from 'react-icons/fa';
import { clsx } from 'clsx';
import { useTranslation } from 'react-i18next';
import { twMerge } from 'tailwind-merge';
⋮----
type Props = {
  title: ReactNode;
  children: ReactNode;
  className?: string;
  buttonClassName?: string;
  defaultOpen?: boolean;
  chevronPosition?: 'left' | 'right';
  isOpen?: boolean;
  onOpenChange?: (isOpen: boolean) => void;
  noMaxHeight?: boolean;
  scrollToVisibleWhenExpanded?: boolean;
  showCollapseButton?: boolean;
};
⋮----
const handleOpenChange = () =>
⋮----
className=

================
File: src/renderer/src/components/common/BaseDialog.tsx
================
import { FocusTrap } from 'focus-trap-react';
import { ReactNode, useEffect, useRef } from 'react';
import { useTranslation } from 'react-i18next';
import { twMerge } from 'tailwind-merge';
⋮----
type Props = {
  title: string;
  onClose?: () => void;
  children: ReactNode;
  contentClass?: string;
  footer?: ReactNode;
  width?: number;
  closeOnEscape?: boolean;
};
⋮----
const handleKeyDown = (event: KeyboardEvent) =>
⋮----
className=

================
File: src/renderer/src/components/common/Button.tsx
================
import { ReactNode } from 'react';
import { twMerge } from 'tailwind-merge';
⋮----
type ButtonVariant = 'contained' | 'text' | 'outline';
type ButtonColor = 'primary' | 'secondary' | 'danger';
type ButtonSize = 'sm' | 'md' | 'xs';
⋮----
type Props = {
  children: ReactNode;
  onClick?: () => void;
  variant?: ButtonVariant;
  color?: ButtonColor;
  className?: string;
  disabled?: boolean;
  autoFocus?: boolean;
  size?: ButtonSize;
  type?: 'button' | 'submit' | 'reset';
};
⋮----
export const Button = ({
  children,
  onClick,
  variant = 'contained',
  color = 'primary',
  className = '',
  disabled = false,
  autoFocus = false,
  size = 'md',
  type = 'button',
}: Props) =>
⋮----
className=

================
File: src/renderer/src/components/common/Checkbox.tsx
================
import { InputHTMLAttributes, ReactNode } from 'react';
import { clsx } from 'clsx';
⋮----
type Props = Omit<InputHTMLAttributes<HTMLInputElement>, 'size' | 'onChange'> & {
  label?: ReactNode;
  checked: boolean;
  onChange: (checked: boolean) => void;
  className?: string;
  size?: 'sm' | 'md';
  tooltip?: string;
  tooltipId?: string;
};
⋮----
className="sr-only" // Hide the actual input but keep it accessible

================
File: src/renderer/src/components/common/CodeBlock.tsx
================
import Prism from 'prismjs';
import { useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { AiOutlineLoading3Quarters } from 'react-icons/ai';
import { MdKeyboardArrowDown, MdUndo } from 'react-icons/md';
import { VscCode } from 'react-icons/vsc';
⋮----
import { CopyMessageButton } from '../message/CopyMessageButton';
⋮----
import { IconButton } from './IconButton';
⋮----
import { DiffViewer, UDiffViewer } from '@/components/common/DiffViewer';
import { useApi } from '@/context/ApiContext';
⋮----
const isCustomDiffContent = (content: string): boolean =>
⋮----
const isUdiffContent = (content: string): boolean =>
⋮----
const parseDiffContent = (content: string):
⋮----
// We have old value complete and new value being streamed
⋮----
// We have complete diff
⋮----
type Props = {
  baseDir: string;
  language: string;
  children?: string;
  file?: string;
  isComplete?: boolean;
  oldValue?: string;
  newValue?: string;
};
⋮----
diffOldValue = oldValue!; // Known to be string
diffNewValue = newValue!; // Known to be string
⋮----
const parsed = parseDiffContent(children!); // children is non-null and a diff
⋮----
// Not a diff, display children as plain code (if it exists)
⋮----
// eslint-disable-next-line no-console
⋮----
const handleRevertChanges = () =>
⋮----
tooltip=

================
File: src/renderer/src/components/common/CodeInline.tsx
================
import { clsx } from 'clsx';
import { ReactNode } from 'react';
⋮----
type Props = {
  className?: string;
  children?: ReactNode;
};
⋮----
export const CodeInline = (
⋮----
className=

================
File: src/renderer/src/components/common/ConfirmDialog.tsx
================
import { ReactNode } from 'react';
import { useTranslation } from 'react-i18next';
⋮----
import { BaseDialog } from './BaseDialog';
import { Button } from './Button';
⋮----
type Props = {
  title: string;
  onConfirm: () => void;
  onCancel: () => void;
  confirmButtonText?: string;
  cancelButtonText?: string;
  contentClass?: string;
  children: ReactNode;
  disabled?: boolean;
  confirmButtonClass?: string;
  width?: number;
  closeOnEscape?: boolean;
};
⋮----
export const ConfirmDialog = ({
  title,
  onConfirm,
  onCancel,
  confirmButtonText,
  cancelButtonText,
  contentClass,
  children,
  disabled = false,
  confirmButtonClass,
  width,
  closeOnEscape = false,
}: Props) =>

================
File: src/renderer/src/components/common/DatePicker.css
================
.react-datepicker {
⋮----
.react-datepicker__header {
⋮----
.react-datepicker__triangle {
⋮----
@apply hidden;
⋮----
.react-datepicker__current-month,
⋮----
@apply text-text-primary;
⋮----
.react-datepicker__day-name,
⋮----
.react-datepicker__day:hover {
⋮----
@apply bg-bg-tertiary;
⋮----
.react-datepicker__day--selected,
⋮----
@apply bg-info-light;
⋮----
.react-datepicker__day--keyboard-selected {

================
File: src/renderer/src/components/common/DatePicker.tsx
================
import { forwardRef, ReactNode } from 'react';
import ReactDatePicker, { type DatePickerProps } from 'react-datepicker';
⋮----
import { FaCalendarAlt } from 'react-icons/fa';
import { clsx } from 'clsx';
⋮----
import { Input } from './Input';
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
⋮----
type Props = DatePickerProps & {
  label?: ReactNode;
};
⋮----
className=

================
File: src/renderer/src/components/common/FileChip.tsx
================
import { IoClose } from 'react-icons/io5';
import { useTranslation } from 'react-i18next';
⋮----
import { IconButton } from '@/components/common/IconButton';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  path: string;
  onRemove: (path: string) => void;
};

================
File: src/renderer/src/components/common/HtmlInfoDialog.tsx
================
import { BaseDialog } from '@/components/common/BaseDialog';
⋮----
type Props = {
  title: string;
  text: string;
  onClose: () => void;
};

================
File: src/renderer/src/components/common/IconButton.tsx
================
import { MouseEvent, ReactNode, useRef } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { twMerge } from 'tailwind-merge';
⋮----
import { StyledTooltip } from './StyledTooltip';
⋮----
type Props = {
  icon: ReactNode;
  onClick?: () => void;
  tooltip?: ReactNode;
  className?: string;
  tooltipId?: string;
  disabled?: boolean;
};
⋮----
const handleClick = (e: MouseEvent<HTMLDivElement>) =>
⋮----

================
File: src/renderer/src/components/common/InfoIcon.tsx
================
import { FaInfoCircle } from 'react-icons/fa';
import { ReactNode } from 'react';
import { clsx } from 'clsx';
⋮----
import { IconButton } from './IconButton';
⋮----
type Props = {
  tooltip: ReactNode;
  tooltipId?: string;
  className?: string;
  size?: 'sm' | 'md' | 'lg';
};
⋮----
export const InfoIcon = (
⋮----
className=

================
File: src/renderer/src/components/common/Input.tsx
================
import { forwardRef, InputHTMLAttributes, ReactNode } from 'react';
⋮----
export type Props = InputHTMLAttributes<HTMLInputElement> & {
  wrapperClassName?: string;
  label?: ReactNode;
};

================
File: src/renderer/src/components/common/MarkdownInfoDialog.tsx
================
import ReactMarkdown from 'react-markdown';
⋮----
import { BaseDialog } from '@/components/common/BaseDialog';
⋮----
type Props = {
  title: string;
  text: string;
  onClose: () => void;
};

================
File: src/renderer/src/components/common/ModalOverlayLayout.tsx
================
import { ReactNode } from 'react';
import { useTranslation } from 'react-i18next';
import { IoMdClose } from 'react-icons/io';
⋮----
import { IconButton } from './IconButton';
⋮----
type Props = {
  title: string;
  onClose: () => void;
  children: ReactNode;
};
⋮----
tooltip=

================
File: src/renderer/src/components/common/MultiSelect.tsx
================
import { useState, useRef, ReactNode } from 'react';
import { createPortal } from 'react-dom';
import { HiChevronUpDown } from 'react-icons/hi2';
import { useTranslation } from 'react-i18next';
⋮----
import { Checkbox } from './Checkbox';
⋮----
import { useClickOutside } from '@/hooks/useClickOutside';
⋮----
type Option = {
  value: string;
  label: string;
};
⋮----
type Props = {
  options: Option[];
  selected: string[];
  onChange: (selected: string[]) => void;
  label?: ReactNode;
  className?: string;
  size?: 'sm' | 'md' | 'lg';
  noneSelectedLabel?: string;
  filterInput?: boolean;
};
⋮----
const handleToggle = () =>
⋮----
const handleCheckboxChange = (value: string) =>
⋮----
const handleSelectAll = () =>
⋮----
? noneSelectedLabel || t('multiselect.noneSelected')
? t('multiselect.allSelected')
⋮----
<Checkbox label=

================
File: src/renderer/src/components/common/RadioButton.tsx
================
import { ReactNode } from 'react';
⋮----
type Props = {
  id: string;
  name: string;
  value: string;
  checked: boolean;
  onChange: (value: string) => void;
  label?: ReactNode;
  className?: string;
};
⋮----
export const RadioButton = (
⋮----
const handleChange = () =>
⋮----
className="sr-only" // Hide the actual input but keep it accessible

================
File: src/renderer/src/components/common/Section.tsx
================
import { ReactNode } from 'react';
import { clsx } from 'clsx';
⋮----
type Props = {
  title?: string;
  children: ReactNode;
  className?: string;
};

================
File: src/renderer/src/components/common/Select.tsx
================
import { ReactNode, useRef, useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { HiChevronUpDown, HiCheck } from 'react-icons/hi2';
import { useTranslation } from 'react-i18next';
⋮----
import { useClickOutside } from '@/hooks/useClickOutside';
⋮----
export type Option = {
  label: ReactNode;
  value: string;
  style?: React.CSSProperties;
};
⋮----
type Props = {
  label?: ReactNode;
  options?: Option[];
  value?: string;
  onChange?: (value: string) => void;
  className?: string;
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
};
⋮----
const dropdownRef = useRef<HTMLUListElement>(null); // Ref for the dropdown itself
⋮----
// Pass both refs to useClickOutside
⋮----
const handleToggleDropdown = () =>
⋮----
const handleKeyDown = (e: React.KeyboardEvent) =>
⋮----
const handleOptionSelect = (option: Option) =>
⋮----
{/* Button container */}
⋮----
{/* Portal for Dropdown */}
⋮----
document.body, // Render into the body

================
File: src/renderer/src/components/common/Slider.tsx
================
import { ChangeEvent, CSSProperties, ReactNode } from 'react';
⋮----
type Props = {
  label?: ReactNode;
  min: number;
  max: number;
  step?: number;
  value: number;
  onChange: (value: number) => void;
  className?: string;
  showValue?: boolean;
};
⋮----
const handleChange = (e: ChangeEvent<HTMLInputElement>) =>

================
File: src/renderer/src/components/common/StyledTooltip.tsx
================
import { ReactNode } from 'react';
import { Tooltip } from 'react-tooltip';
⋮----
type Props = {
  id: string;
  content?: ReactNode;
  maxWidth?: number | string;
};

================
File: src/renderer/src/components/common/Table.tsx
================
import { ReactNode } from 'react';
⋮----
export type Column<T> = {
  accessor?: keyof T;
  header: string;
  cell?: (value: T[keyof T] | null, row: T) => ReactNode;
  headerClassName?: string;
  cellClassName?: string;
  align?: 'left' | 'center' | 'right';
  maxWidth?: string | number;
};
⋮----
export type FooterColumn = {
  cell: ReactNode;
  colSpan?: number;
  className?: string;
};
⋮----
type Props<T> = {
  data: T[];
  columns: Column<T>[];
  footerColumns?: FooterColumn[];
};

================
File: src/renderer/src/components/common/TextArea.tsx
================
import { ReactNode, TextareaHTMLAttributes } from 'react';
⋮----
export type Props = TextareaHTMLAttributes<HTMLTextAreaElement> & {
  label?: ReactNode;
};
⋮----
export const TextArea = (

================
File: src/renderer/src/components/common/TriStateCheckbox.tsx
================
import { InputHTMLAttributes } from 'react';
⋮----
type TriState = 'checked' | 'unchecked' | 'indeterminate';
⋮----
type Props = InputHTMLAttributes<HTMLInputElement> & {
  label?: string;
  state: TriState;
  onChange: () => void;
  className?: string;
};

================
File: src/renderer/src/components/common/VirtualTable.tsx
================
import { ReactNode, useMemo } from 'react';
⋮----
import { useVirtualizer } from '@tanstack/react-virtual';
import { flexRender, getCoreRowModel, useReactTable, type ColumnDef } from '@tanstack/react-table';
⋮----
import { Column, FooterColumn } from './Table';
⋮----
type Props<T> = {
  data: T[];
  columns: Column<T>[];
  footerColumns?: FooterColumn[];
  rowHeight?: number | ((params: { index: number }) => number);
  overscanCount?: number;
  disableHeader?: boolean;
};
⋮----
// Convert Column<T> to ColumnDef<T> for @tanstack/react-table
⋮----
// Create table instance
⋮----
// Parent ref for virtualizer
⋮----
// Create virtualizer
⋮----
{/* Header - Outside virtualized area */}
⋮----
{/* Virtualized body */}
⋮----
{/* Footer - Outside virtualized area */}

================
File: src/renderer/src/components/common/WarningIcon.tsx
================
import { FaExclamationTriangle } from 'react-icons/fa';
import { ReactNode } from 'react';
import { clsx } from 'clsx';
⋮----
import { IconButton } from './IconButton';
⋮----
type Props = {
  tooltip: ReactNode;
  tooltipId?: string;
  className?: string;
  size?: 'sm' | 'md' | 'lg';
};
⋮----
export const WarningIcon = (
⋮----
className=

================
File: src/renderer/src/components/ContextFiles/ContextFiles.css
================
.rct-tree-items-container {
⋮----
.rct-tree-root {
⋮----
@apply p-0;
⋮----
.flash-highlight {
⋮----
.context-dimmed {
⋮----
@apply text-text-muted;
⋮----
body.theme-light .context-dimmed {
⋮----
.context-files-root.drag-over {
⋮----
@apply bg-bg-tertiary;
⋮----
@tailwind utilities;

================
File: src/renderer/src/components/ContextFiles/ContextFiles.tsx
================
import { ContextFile, ContextFilesUpdatedData, OS, TokensInfoData } from '@common/types';
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import objectHash from 'object-hash';
import { ControlledTreeEnvironment, Tree } from 'react-complex-tree';
import { HiChevronDown, HiChevronRight, HiOutlineTrash, HiPlus, HiX } from 'react-icons/hi';
import { BiCollapseVertical, BiExpandVertical } from 'react-icons/bi';
import { LuFolderTree } from 'react-icons/lu';
import { TbPencilOff } from 'react-icons/tb';
import { useTranslation } from 'react-i18next';
⋮----
import { StyledTooltip } from '../common/StyledTooltip';
⋮----
import { useOS } from '@/hooks/useOS';
import { useApi } from '@/context/ApiContext';
⋮----
interface TreeItem {
  index: string;
  isFolder: boolean;
  children: string[];
  data: string;
  file?: ContextFile;
}
⋮----
const normalizePath = (path: string): string =>
⋮----
const createFileTree = (files: ContextFile[]) =>
⋮----
// Sort children: folders first, then files, both alphabetically
⋮----
type Props = {
  baseDir: string;
  allFiles: string[];
  showFileDialog: () => void;
  tokensInfo?: TokensInfoData | null;
};
⋮----
// Handle highlighting of new files
⋮----
const checkChild = (childKey: string) =>
⋮----
// Check if any descendant file of this folder is in the context files list
⋮----
const handleExpandAll = () =>
⋮----
const handleCollapseAll = () =>
⋮----
const handleDropAllFiles = () =>
⋮----
const handleDragOver = (event: React.DragEvent<HTMLDivElement>) =>
⋮----
const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) =>
⋮----
const dropFile = (item: TreeItem) => (e: React.MouseEvent<HTMLButtonElement>) =>
⋮----
const addFile = (item: TreeItem) => (event: React.MouseEvent<HTMLButtonElement>) =>
⋮----
data-tooltip-content=
⋮----
onClick=

================
File: src/renderer/src/components/ContextFiles/index.ts
================


================
File: src/renderer/src/components/message/BashToolMessage.tsx
================
import { useTranslation } from 'react-i18next';
import { RiTerminalLine, RiErrorWarningFill, RiCheckboxCircleFill } from 'react-icons/ri';
import { CgSpinner } from 'react-icons/cg';
⋮----
import { ToolMessage } from '@/types/message';
import { CodeInline } from '@/components/common/CodeInline';
import { ExpandableMessageBlock } from '@/components/message/ExpandableMessageBlock';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};

================
File: src/renderer/src/components/message/CommandOutputMessageBlock.tsx
================
import { BiTerminal } from 'react-icons/bi';
import { useTranslation } from 'react-i18next';
⋮----
import { CopyMessageButton } from './CopyMessageButton';
⋮----
import { CommandOutputMessage } from '@/types/message';
⋮----
type Props = {
  message: CommandOutputMessage;
  compact?: boolean;
};

================
File: src/renderer/src/components/message/CopyMessageButton.tsx
================
import { BiCopy } from 'react-icons/bi';
import { useTranslation } from 'react-i18next';
⋮----
import { IconButton } from '../common/IconButton';
⋮----
import { showInfoNotification } from '@/utils/notifications';
⋮----
type Props = {
  content: string;
  className?: string;
  alwaysShow?: boolean;
};
⋮----
const copyToClipboard = () =>
⋮----
tooltip=

================
File: src/renderer/src/components/message/CustomCommandBashBlock.tsx
================
import { useState } from 'react';
import { FaChevronDown, FaChevronRight } from 'react-icons/fa';
import { BiTerminal } from 'react-icons/bi';
⋮----
import { CodeBlock } from '@/components/common/CodeBlock';
⋮----
type Props = {
  baseDir: string;
  command: string;
  output: string;
};
⋮----
const toggleAccordion = () =>

================
File: src/renderer/src/components/message/ExpandableMessageBlock.tsx
================
import { ReactNode, useEffect, useState, forwardRef, useImperativeHandle } from 'react';
import { UsageReportData } from '@common/types';
⋮----
import { MessageBar } from './MessageBar';
⋮----
import { Accordion } from '@/components/common/Accordion';
⋮----
type Props = {
  title: ReactNode;
  content: ReactNode;
  copyContent?: string;
  usageReport?: UsageReportData;
  onRemove?: () => void;
  initialExpanded?: boolean;
};
⋮----
export interface ExpandableMessageBlockRef {
  open: () => void;
  close: () => void;
}
⋮----
const handleExpandedChange = (open: boolean) =>
⋮----
{/* Gradient overlay for initial auto-expand */}

================
File: src/renderer/src/components/message/FetchToolMessage.tsx
================
import { useTranslation } from 'react-i18next';
import { RiLinkM, RiErrorWarningFill, RiCheckboxCircleFill } from 'react-icons/ri';
import { CgSpinner } from 'react-icons/cg';
⋮----
import { ToolMessage } from '@/types/message';
import { CodeInline } from '@/components/common/CodeInline';
import { ExpandableMessageBlock } from '@/components/message/ExpandableMessageBlock';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};
⋮----
if (isError)

================
File: src/renderer/src/components/message/FileEditToolMessage.tsx
================
import { useEffect, useRef, useState } from 'react';
import { RiCheckboxCircleFill, RiEditLine, RiErrorWarningFill } from 'react-icons/ri';
import { getLanguageFromPath } from '@common/utils';
import { CgSpinner } from 'react-icons/cg';
import { useTranslation } from 'react-i18next';
⋮----
import { ToolMessage } from '@/types/message';
import { CodeBlock } from '@/components/common/CodeBlock';
import { CodeInline } from '@/components/common/CodeInline';
import { ExpandableMessageBlock, ExpandableMessageBlockRef } from '@/components/message/ExpandableMessageBlock';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};
⋮----
<strong>
⋮----
content=

================
File: src/renderer/src/components/message/FileReadToolMessage.tsx
================
import { useTranslation } from 'react-i18next';
import { RiFileTextLine, RiCheckboxCircleFill, RiErrorWarningFill } from 'react-icons/ri';
import { getLanguageFromPath } from '@common/utils';
import { CgSpinner } from 'react-icons/cg';
⋮----
import { ToolMessage } from '@/types/message';
import { CodeBlock } from '@/components/common/CodeBlock';
import { CodeInline } from '@/components/common/CodeInline';
import { ExpandableMessageBlock } from '@/components/message/ExpandableMessageBlock';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};

================
File: src/renderer/src/components/message/FileWriteToolMessage.tsx
================
import { useEffect, useRef, useState } from 'react';
import { RiCheckboxCircleFill, RiEditLine, RiErrorWarningFill } from 'react-icons/ri';
import { CgSpinner } from 'react-icons/cg';
import { useTranslation } from 'react-i18next';
import { FileWriteMode } from '@common/types';
import { getLanguageFromPath } from '@common/utils';
⋮----
import { ToolMessage } from '@/types/message';
import { CodeBlock } from '@/components/common/CodeBlock';
import { CodeInline } from '@/components/common/CodeInline';
import { ExpandableMessageBlock, ExpandableMessageBlockRef } from '@/components/message/ExpandableMessageBlock';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};
⋮----
const formatName = (name: string): string =>
⋮----
const getToolName = (): string =>
⋮----
content=

================
File: src/renderer/src/components/message/GlobToolMessage.tsx
================
import { useTranslation } from 'react-i18next';
import { RiFolderLine, RiFileTextLine, RiErrorWarningFill, RiCheckboxCircleFill } from 'react-icons/ri';
import { LuFolderSearch } from 'react-icons/lu';
import { CgSpinner } from 'react-icons/cg';
⋮----
import { ToolMessage } from '@/types/message';
import { CodeInline } from '@/components/common/CodeInline';
import { ExpandableMessageBlock } from '@/components/message/ExpandableMessageBlock';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};
⋮----
if (isError)

================
File: src/renderer/src/components/message/GrepToolMessage.tsx
================
import { useTranslation } from 'react-i18next';
import { RiErrorWarningFill, RiCheckboxCircleFill } from 'react-icons/ri';
import { LuFileSearch } from 'react-icons/lu';
import { CgSpinner } from 'react-icons/cg';
⋮----
import { ToolMessage } from '@/types/message';
import { CodeInline } from '@/components/common/CodeInline';
import { ExpandableMessageBlock } from '@/components/message/ExpandableMessageBlock';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};
⋮----
if (isError)
⋮----
<span className="text-text-muted">

================
File: src/renderer/src/components/message/GroupMessageBlock.tsx
================
import { AnimatePresence, motion } from 'framer-motion';
import { useMemo, useState } from 'react';
import { clsx } from 'clsx';
import { useTranslation } from 'react-i18next';
import { LocalizedString, UsageReportData } from '@common/types';
⋮----
import { MessageBlock } from './MessageBlock';
import { MessageBar } from './MessageBar';
⋮----
import { Accordion } from '@/components/common/Accordion';
import { GroupMessage, Message, ResponseMessage, ToolMessage, isResponseMessage, isToolMessage, isUserMessage } from '@/types/message';
⋮----
type Props = {
  baseDir: string;
  message: GroupMessage;
  allFiles: string[];
  renderMarkdown: boolean;
  remove?: (message: Message) => void;
  redo?: () => void;
  edit?: (content: string) => void;
};
⋮----
const aggregateUsage = (messages: Message[]): UsageReportData | undefined =>
⋮----
// Find all messages with usageReport and the last one
⋮----
// Use tokens from the last message with usage
⋮----
// Sum costs from all messages with usage
⋮----
const getGroupDisplayName = (name?: string | LocalizedString) =>
⋮----
// name is LocalizedString
⋮----
{/* Color Bar */}
⋮----
{/* Content */}

================
File: src/renderer/src/components/message/index.ts
================


================
File: src/renderer/src/components/message/LoadingMessageBlock.tsx
================
import { useEffect, useState } from 'react';
⋮----
import { Message } from '@/types/message';
⋮----
type Props = {
  message: Message;
};
⋮----
export const LoadingMessageBlock = (
⋮----
// Reset animation when message content changes
⋮----
// When we reach the end, wait a bit longer before restarting
⋮----
}, 3000); // 1 second pause before restarting
⋮----
// Letter-by-letter typing animation
⋮----
}, 60); // Adjust speed as needed

================
File: src/renderer/src/components/message/LogMessageBlock.tsx
================
import { FaInfoCircle, FaExclamationTriangle, FaExclamationCircle } from 'react-icons/fa';
import { MdClose } from 'react-icons/md';
import { useTranslation } from 'react-i18next';
⋮----
import { CopyMessageButton } from './CopyMessageButton';
⋮----
import { LogMessage } from '@/types/message';
import { IconButton } from '@/components/common/IconButton';
⋮----
type Props = {
  message: LogMessage;
  onRemove?: () => void;
  compact?: boolean;
};
⋮----
const renderMessage = () => (
    <div className="flex items-start gap-3">
      <Icon className="inline-block h-3 w-3 flex-shrink-0 mt-[3px]" />
      <div>{t(message.content)}</div>
    </div>
  );
⋮----
tooltip=

================
File: src/renderer/src/components/message/MessageBar.tsx
================
import { useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { UsageReportData } from '@common/types';
import { MdDeleteForever, MdRedo, MdEdit } from 'react-icons/md';
import { FaEllipsisVertical } from 'react-icons/fa6';
import { twMerge } from 'tailwind-merge';
⋮----
import { IconButton } from '../common/IconButton';
⋮----
import { CopyMessageButton } from './CopyMessageButton';
import { UsageInfo } from './UsageInfo';
⋮----
import { useClickOutside } from '@/hooks/useClickOutside';
⋮----
type Props = {
  className?: string;
  content?: string;
  usageReport?: UsageReportData;
  remove?: () => void;
  redo?: () => void;
  edit?: () => void;
};
⋮----
const handleRemoveClick = () =>
⋮----
const handleRedoClick = () =>
⋮----
const handleEditClick = () =>

================
File: src/renderer/src/components/message/MessageBlock.tsx
================
import { useTranslation } from 'react-i18next';
import {
  HELPERS_TOOL_GROUP_NAME,
  HELPERS_TOOL_INVALID_TOOL_ARGUMENTS,
  HELPERS_TOOL_NO_SUCH_TOOL,
  POWER_TOOL_BASH,
  POWER_TOOL_FETCH,
  POWER_TOOL_FILE_EDIT,
  POWER_TOOL_FILE_READ,
  POWER_TOOL_FILE_WRITE,
  POWER_TOOL_GLOB,
  POWER_TOOL_GREP,
  POWER_TOOL_GROUP_NAME,
  POWER_TOOL_SEMANTIC_SEARCH,
  SUBAGENTS_TOOL_GROUP_NAME,
  SUBAGENTS_TOOL_RUN_TASK,
} from '@common/tools';
⋮----
import { CommandOutputMessageBlock } from './CommandOutputMessageBlock';
import { LoadingMessageBlock } from './LoadingMessageBlock';
import { LogMessageBlock } from './LogMessageBlock';
import { UserMessageBlock } from './UserMessageBlock';
import { ReflectedMessageBlock } from './ReflectedMessageBlock';
import { ResponseMessageBlock } from './ResponseMessageBlock';
import { ToolMessageBlock } from './ToolMessageBlock';
import { FileWriteToolMessage } from './FileWriteToolMessage';
import { FileEditToolMessage } from './FileEditToolMessage';
import { FileReadToolMessage } from './FileReadToolMessage';
import { GlobToolMessage } from './GlobToolMessage';
import { GrepToolMessage } from './GrepToolMessage';
import { BashToolMessage } from './BashToolMessage';
import { FetchToolMessage } from './FetchToolMessage';
import { SemanticSearchToolMessage } from './SemanticSearchToolMessage';
import { SubagentToolMessage } from './SubagentToolMessage';
⋮----
import {
  isCommandOutputMessage,
  isLoadingMessage,
  isLogMessage,
  isReflectedMessage,
  isResponseMessage,
  isToolMessage,
  isUserMessage,
  LogMessage,
  Message,
  ToolMessage,
} from '@/types/message';
⋮----
type Props = {
  baseDir: string;
  message: Message;
  allFiles: string[];
  renderMarkdown: boolean;
  compact?: boolean;
  remove?: () => void;
  redo?: () => void;
  edit?: (content: string) => void;
};
⋮----
export const MessageBlock = (

================
File: src/renderer/src/components/message/Messages.tsx
================
import React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';
import { toPng } from 'html-to-image';
import { MdKeyboardArrowDown } from 'react-icons/md';
import { useTranslation } from 'react-i18next';
⋮----
import { MessageBlock } from './MessageBlock';
import { GroupMessageBlock } from './GroupMessageBlock';
⋮----
import { isGroupMessage, isUserMessage, Message } from '@/types/message';
import { IconButton } from '@/components/common/IconButton';
import { StyledTooltip } from '@/components/common/StyledTooltip';
import { groupMessagesByPromptContext } from '@/components/message/utils';
⋮----
export type MessagesRef = {
  exportToImage: () => void;
  container: HTMLDivElement | null;
  scrollToBottom: () => void;
};
⋮----
type Props = {
  baseDir: string;
  messages: Message[];
  allFiles?: string[];
  renderMarkdown: boolean;
  removeMessage: (message: Message) => void;
  redoLastUserPrompt: () => void;
  editLastUserMessage: (content: string) => void;
};
⋮----
// Group messages by promptContext.group.id
⋮----
const handleScroll = (e: React.UIEvent<HTMLDivElement>) =>
⋮----
const exportToImage = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const scrollToBottom = () =>
⋮----
tooltip=
⋮----
aria-label=
⋮----
remove=

================
File: src/renderer/src/components/message/ReflectedMessageBlock.tsx
================
import { useState } from 'react';
import { MdKeyboardArrowDown, MdKeyboardArrowRight } from 'react-icons/md';
import { useTranslation } from 'react-i18next';
⋮----
import { CopyMessageButton } from './CopyMessageButton';
⋮----
import { useParsedContent } from '@/hooks/useParsedContent';
import { Message } from '@/types/message';
⋮----
type Props = {
  baseDir: string;
  message: Message;
  allFiles: string[];
  compact?: boolean;
};

================
File: src/renderer/src/components/message/ResponseMessageBlock.tsx
================
import { clsx } from 'clsx';
import { RiRobot2Line } from 'react-icons/ri';
⋮----
import { MessageBar } from './MessageBar';
⋮----
import { useParsedContent } from '@/hooks/useParsedContent';
import { ResponseMessage } from '@/types/message';
⋮----
type Props = {
  baseDir: string;
  message: ResponseMessage;
  allFiles: string[];
  renderMarkdown: boolean;
  compact?: boolean;
  onRemove?: () => void;
};

================
File: src/renderer/src/components/message/SemanticSearchToolMessage.tsx
================
import { useTranslation } from 'react-i18next';
import { RiErrorWarningFill, RiCheckboxCircleFill } from 'react-icons/ri';
import { FaSearchengin } from 'react-icons/fa6';
import { CgSpinner } from 'react-icons/cg';
⋮----
import { ToolMessage } from '@/types/message';
import { CodeInline } from '@/components/common/CodeInline';
import { ExpandableMessageBlock } from '@/components/message/ExpandableMessageBlock';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};
⋮----
if (isError)

================
File: src/renderer/src/components/message/SubagentToolMessage.tsx
================
import { useTranslation } from 'react-i18next';
import { RiToolsFill } from 'react-icons/ri';
import { CgSpinner } from 'react-icons/cg';
⋮----
import { ToolMessage } from '@/types/message';
import { MessageBar } from '@/components/message/MessageBar';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};
⋮----
const getToolName = (): string =>
⋮----
const renderHeader = () => (
    <div className="flex items-center gap-2 mb-2">
      <div className={`text-text-muted ${isExecuting ? 'animate-pulse' : ''}`}>
        <RiToolsFill className="w-4 h-4" />
      </div>
      <div className={`text-xs text-text-primary flex items-center gap-1 ${isExecuting ? 'animate-pulse' : ''}`}>
        <span>{getToolName()}</span>
        {isExecuting && <CgSpinner className="animate-spin w-3 h-3 text-text-muted-light" />}
      </div>
    </div>
  );

================
File: src/renderer/src/components/message/ThinkingAnswerBlock.tsx
================
import { MouseEvent, useState } from 'react';
import { FaBrain, FaChevronDown, FaChevronRight } from 'react-icons/fa';
import { useTranslation } from 'react-i18next';
import { clsx } from 'clsx';
⋮----
import { CopyMessageButton } from './CopyMessageButton';
⋮----
import { useParsedContent } from '@/hooks/useParsedContent';
⋮----
type Props = {
  thinking: string;
  answer?: string | null;
  baseDir?: string;
  allFiles?: string[];
  renderMarkdown: boolean;
};
⋮----
const handleToggleThinking = (e: MouseEvent<HTMLDivElement>) =>
⋮----
{/* Thinking section */}
⋮----
{/* Answer section - only show if we have an answer or we're streaming */}

================
File: src/renderer/src/components/message/ToolMessageBlock.tsx
================
import { ReactNode } from 'react';
import { CgSpinner } from 'react-icons/cg';
import { RiToolsFill } from 'react-icons/ri';
import { useTranslation } from 'react-i18next';
import { VscError } from 'react-icons/vsc';
import {
  AIDER_TOOL_ADD_CONTEXT_FILES,
  AIDER_TOOL_DROP_CONTEXT_FILES,
  AIDER_TOOL_GROUP_NAME,
  AIDER_TOOL_RUN_PROMPT,
  POWER_TOOL_BASH,
  POWER_TOOL_FETCH,
  POWER_TOOL_FILE_READ,
  POWER_TOOL_GLOB,
  POWER_TOOL_GREP,
  POWER_TOOL_GROUP_NAME,
  POWER_TOOL_SEMANTIC_SEARCH,
} from '@common/tools';
⋮----
import { CopyMessageButton } from './CopyMessageButton';
import { parseToolContent } from './utils';
import { ExpandableMessageBlock } from './ExpandableMessageBlock';
⋮----
import { ToolMessage } from '@/types/message';
import { CodeInline } from '@/components/common/CodeInline';
⋮----
type Props = {
  message: ToolMessage;
  onRemove?: () => void;
  compact?: boolean;
};
⋮----
const formatName = (name: string): string =>
⋮----
const defaultLabel = () => t('toolMessage.toolLabel',
⋮----
// Handles message.args.paths (array) or fallback to message.args.path (string)
⋮----
// Handles message.args.paths (array) or fallback to message.args.path (string)
⋮----
// Display pretty-printed JSON
⋮----
rawContentToCopy = JSON.stringify(parsedResult.json); // Copy raw JSON
⋮----
// Display extracted text if inner JSON parsing failed
⋮----
// Fallback to the original raw content if no text was extracted
⋮----

⋮----
{/* Tool Specific Content */}

================
File: src/renderer/src/components/message/UsageInfo.tsx
================
import { useTranslation } from 'react-i18next';
import { FaArrowRightFromBracket, FaArrowRightToBracket, FaDollarSign, FaDownload, FaUpload } from 'react-icons/fa6';
import { UsageReportData } from '@common/types';
⋮----
type Props = {
  usageReport: UsageReportData;
  className?: string;
};

================
File: src/renderer/src/components/message/UserMessageBlock.tsx
================
import { FaRegUser } from 'react-icons/fa';
import { clsx } from 'clsx';
⋮----
import { MessageBar } from './MessageBar';
⋮----
import { useParsedContent } from '@/hooks/useParsedContent';
import { UserMessage } from '@/types/message';
⋮----
type Props = {
  baseDir: string;
  message: UserMessage;
  allFiles: string[];
  renderMarkdown: boolean;
  compact?: boolean;
  onRemove?: () => void;
  onRedo?: () => void;
  onEdit?: (content: string) => void;
};
⋮----
const handleEdit = () =>

================
File: src/renderer/src/components/message/utils.tsx
================
import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Group } from '@common/types';
⋮----
import { CustomCommandBashBlock } from './CustomCommandBashBlock';
import { ThinkingAnswerBlock } from './ThinkingAnswerBlock';
⋮----
import { CodeBlock } from '@/components/common/CodeBlock';
import { CodeInline } from '@/components/common/CodeInline';
import { GroupMessage, Message } from '@/types/message';
⋮----
// First check if the content matches the thinking/answer format
⋮----
// Use CodeInline for inline code elements generated by markdown
⋮----
// Basic styling for preformatted blocks (e.g., indented code)
⋮----
// Table styling
⋮----
const findFileInPreviousLine = (currentLine: number):
⋮----
// Check if the line is just a filepath
⋮----
// Check if line ends with a filepath
⋮----
const findFileInNextLine = (currentLine: number):
⋮----
// Check if the next line is just a filepath
⋮----
// Check if the next line starts with a filepath
⋮----
// Check for custom-command-bash blocks
⋮----
// Process any accumulated text first
⋮----
// Find the end of the custom-command-bash block
⋮----
// Extract the content between the tags
⋮----
// Skip to after the closing tag
⋮----
// Check if line starts a code block
⋮----
// Try finding the file in the previous line first
⋮----
// Remove the last line from currentText if it contains the filename
⋮----
// If not found in the previous line, check the next line
⋮----
// Skip the next line in the loop
⋮----
// Extract language for ``` fence
⋮----
// Handle inline code ticks
⋮----
// Check if line ends the code block
⋮----
// Handle any remaining content
⋮----
export const parseThinkingAnswerFormat = (
  content: string,
  baseDir: string = '',
  allFiles: string[] = [],
  renderMarkdown = false,
  renderThinking = true,
): React.ReactNode | null =>
⋮----
// Check for the thinking section first
⋮----
// Check if the answer section exists
⋮----
export const parseCustomCommandBashFormat = (baseDir: string, content: string): React.ReactNode | null =>
⋮----
// Find the opening tag
⋮----
// Find the closing tag
⋮----
// Extract content between opening and closing tags
⋮----
// Find command tags
⋮----
// Find output tags (search after the command closing tag)
⋮----
// Extract command and output content
⋮----
// --- Tool Message Parsing ---
interface ParsedToolContentItem {
  type: string;
  text?: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  [key: string]: any; // Allow other properties
}
⋮----
// eslint-disable-next-line @typescript-eslint/no-explicit-any
[key: string]: any; // Allow other properties
⋮----
interface ParsedToolMessage {
  content: ParsedToolContentItem[];
  isError: boolean;
}
⋮----
export interface ToolContentResult {
  extractedText: string | null;
  json: object | null;
  isError: boolean | null;
  rawContent: string; // Always include the original raw content
}
⋮----
rawContent: string; // Always include the original raw content
⋮----
/**
 * Parses the content string from a ToolMessage.
 * Expected format: A JSON string containing an object with 'content' (an array) and 'isError' (boolean).
 * The 'content' array items should have a 'text' property.
 * The concatenated 'text' properties might themselves be a JSON string.
 */
export const parseToolContent = (rawContent: string): ToolContentResult =>
⋮----
return result; // Return default if rawContent is empty
⋮----
// Type check for the expected outer structure
⋮----
// Extract text from the 'content' array
⋮----
// Try parsing the extracted text as JSON
⋮----
// Ignore error if inner content is not valid JSON
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
// Ignore error if the raw content is not valid JSON
// eslint-disable-next-line no-console
⋮----
export const groupMessagesByPromptContext = (messages: Message[]): Message[] =>
⋮----
// First pass: collect messages with groups
⋮----
// Track the latest group information for this group ID, but only update if current group isn't finished
⋮----
// Create GroupMessage for the first message in the group
⋮----
// Only create the group once

================
File: src/renderer/src/components/message/VirtualizedMessages.tsx
================
import React, { forwardRef, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { toPng } from 'html-to-image';
import { MdKeyboardArrowDown } from 'react-icons/md';
import { useTranslation } from 'react-i18next';
import { useVirtualizer } from '@tanstack/react-virtual';
⋮----
import { MessageBlock } from './MessageBlock';
import { GroupMessageBlock } from './GroupMessageBlock';
⋮----
import { isGroupMessage, isUserMessage, Message } from '@/types/message';
import { IconButton } from '@/components/common/IconButton';
import { StyledTooltip } from '@/components/common/StyledTooltip';
import { groupMessagesByPromptContext } from '@/components/message/utils';
⋮----
export type VirtualizedMessagesRef = {
  exportToImage: () => void;
  container: HTMLDivElement | null;
  scrollToBottom: () => void;
};
⋮----
type Props = {
  baseDir: string;
  messages: Message[];
  allFiles?: string[];
  renderMarkdown: boolean;
  removeMessage: (message: Message) => void;
  redoLastUserPrompt: () => void;
  editLastUserMessage: (content: string) => void;
};
⋮----
// Group messages by promptContext.group.id
⋮----
// Create virtualizer for dynamic sized items
⋮----
estimateSize: () => 100, // Initial estimate, will be measured
⋮----
const handleScroll = (e: React.UIEvent<HTMLDivElement>) =>
⋮----
// Check if content is smaller than scroll area (no scrollbar needed)
⋮----
// If content is smaller than area, never pause scrolling
⋮----
// Detect scroll direction by comparing current scrollTop with previous scrollTop
⋮----
// Store current scrollTop for next scroll event
⋮----
// If scrolling up, always pause
// If scrolling down, only pause if not at bottom
⋮----
// Scroll to the last item when new messages arrive
⋮----
// eslint-disable-next-line react-hooks/exhaustive-deps
⋮----
const exportToImage = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const scrollToBottom = () =>
⋮----
tooltip=
⋮----
aria-label=

================
File: src/renderer/src/components/ModelLibrary/providers/AnthropicParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { AnthropicProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: AnthropicProvider;
  onChange: (updated: AnthropicProvider) => void;
};
⋮----
export const AnthropicParameters = (
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',

================
File: src/renderer/src/components/ModelLibrary/providers/AzureParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { AzureProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: AzureProvider;
  onChange: (updated: AzureProvider) => void;
};
⋮----
// Environment variable hooks for placeholders
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleResourceNameChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleApiVersionChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',
⋮----
<p className="text-xs text-info-lightest">

================
File: src/renderer/src/components/ModelLibrary/providers/BedrockParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { BedrockProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { InfoIcon } from '@/components/common/InfoIcon';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: BedrockProvider;
  onChange: (updated: BedrockProvider) => void;
};
⋮----
const handleRegionChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleAccessKeyIdChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleSecretAccessKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleSessionTokenChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
placeholder=
⋮----
<span>

================
File: src/renderer/src/components/ModelLibrary/providers/CerebrasParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { CerebrasProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: CerebrasProvider;
  onChange: (updated: CerebrasProvider) => void;
};
⋮----
export const CerebrasParameters = (
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',

================
File: src/renderer/src/components/ModelLibrary/providers/DeepseekParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { DeepseekProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: DeepseekProvider;
  onChange: (updated: DeepseekProvider) => void;
};
⋮----
export const DeepseekParameters = (
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',

================
File: src/renderer/src/components/ModelLibrary/providers/GeminiAdvancedSettings.tsx
================
import { useTranslation } from 'react-i18next';
import { GeminiProvider } from '@common/agent';
⋮----
import { Slider } from '@/components/common/Slider';
import { Checkbox } from '@/components/common/Checkbox';
import { InfoIcon } from '@/components/common/InfoIcon';
import { WarningIcon } from '@/components/common/WarningIcon';
⋮----
type Props = {
  provider: GeminiProvider;
  onChange: (updated: GeminiProvider) => void;
};
⋮----
const handleThinkingBudgetChange = (value: number) =>
⋮----
const handleIncludeThoughtsChange = (checked: boolean) =>
⋮----
const handleUseSearchGroundingChange = (checked: boolean) =>
⋮----
label=
⋮----
<InfoIcon tooltip=
⋮----

================
File: src/renderer/src/components/ModelLibrary/providers/GeminiModelOverrides.tsx
================
import { getDefaultProviderParams, GeminiProvider } from '@common/agent';
⋮----
import { GeminiAdvancedSettings } from './GeminiAdvancedSettings';
⋮----
type Props = {
  overrides: Partial<GeminiProvider>;
  onChange: (overrides: Record<string, unknown>) => void;
};
⋮----
export const GeminiModelOverrides = (
⋮----
// Convert overrides to GeminiProvider format for AdvancedSettings
⋮----
// Convert GeminiProvider back to overrides format
const handleProviderChange = (updatedProvider: GeminiProvider) =>
⋮----
// Remove undefined values

================
File: src/renderer/src/components/ModelLibrary/providers/GeminiParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { GeminiProvider } from '@common/agent';
⋮----
import { GeminiAdvancedSettings } from './GeminiAdvancedSettings';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: GeminiProvider;
  onChange: (updated: GeminiProvider) => void;
};
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleCustomBaseUrlChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',

================
File: src/renderer/src/components/ModelLibrary/providers/GroqParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { GroqProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: GroqProvider;
  onChange: (updated: GroqProvider) => void;
};
⋮----
export const GroqParameters = (
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',

================
File: src/renderer/src/components/ModelLibrary/providers/index.ts
================
// Advanced Settings
⋮----
// Model Overrides

================
File: src/renderer/src/components/ModelLibrary/providers/LmStudioParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { LmStudioProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: LmStudioProvider;
  onChange: (updated: LmStudioProvider) => void;
};
⋮----
export const LmStudioParameters = (
⋮----
const handleBaseUrlChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
placeholder=

================
File: src/renderer/src/components/ModelLibrary/providers/OllamaParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { OllamaProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: OllamaProvider;
  onChange: (updated: OllamaProvider) => void;
};
⋮----
export const OllamaParameters = (
⋮----
const handleBaseUrlChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
placeholder=

================
File: src/renderer/src/components/ModelLibrary/providers/OpenAiAdvancedSettings.tsx
================
import { useTranslation } from 'react-i18next';
import { OpenAiProvider } from '@common/agent';
import { ReasoningEffort } from '@common/types';
⋮----
import { Select, Option } from '@/components/common/Select';
⋮----
type Props = {
  provider: OpenAiProvider;
  onChange: (updated: OpenAiProvider) => void;
};
⋮----
export const OpenAiAdvancedSettings = (
⋮----
const handleReasoningEffortChange = (value: string) =>
⋮----
<Select label=

================
File: src/renderer/src/components/ModelLibrary/providers/OpenAiCompatibleParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { OpenAiCompatibleProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: OpenAiCompatibleProvider;
  onChange: (updated: OpenAiCompatibleProvider) => void;
};
⋮----
const handleBaseUrlChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
placeholder=

================
File: src/renderer/src/components/ModelLibrary/providers/OpenAiModelOverrides.tsx
================
import { getDefaultProviderParams, OpenAiProvider } from '@common/agent';
⋮----
import { OpenAiAdvancedSettings } from './OpenAiAdvancedSettings';
⋮----
type Props = {
  overrides: Partial<OpenAiProvider>;
  onChange: (overrides: Record<string, unknown>) => void;
};
⋮----
export const OpenAiModelOverrides = (
⋮----
// Convert overrides to OpenAiProvider format for AdvancedSettings
⋮----
// Convert OpenAiProvider back to overrides format
const handleProviderChange = (updatedProvider: OpenAiProvider) =>
⋮----
// Remove undefined values

================
File: src/renderer/src/components/ModelLibrary/providers/OpenAiParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { OpenAiProvider } from '@common/agent';
⋮----
import { OpenAiAdvancedSettings } from './OpenAiAdvancedSettings';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: OpenAiProvider;
  onChange: (updated: OpenAiProvider) => void;
};
⋮----
export const OpenAiParameters = (
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',

================
File: src/renderer/src/components/ModelLibrary/providers/OpenRouterAdvancedSettings.tsx
================
import { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { OpenRouterProvider } from '@common/agent';
⋮----
import { InfoIcon } from '@/components/common/InfoIcon';
import { Input } from '@/components/common/Input';
import { Select } from '@/components/common/Select';
import { Checkbox } from '@/components/common/Checkbox';
⋮----
type Props = {
  provider: OpenRouterProvider;
  onChange: (updated: OpenRouterProvider) => void;
};
⋮----
const handleOrderChange = (e: React.ChangeEvent<HTMLInputElement>) =>
⋮----
const handleOrderBlur = () =>
⋮----
const handleOnlyChange = (e: React.ChangeEvent<HTMLInputElement>) =>
⋮----
const handleOnlyBlur = () =>
⋮----
const handleIgnoreChange = (e: React.ChangeEvent<HTMLInputElement>) =>
⋮----
const handleIgnoreBlur = () =>
⋮----
const handleQuantizationsChange = (e: React.ChangeEvent<HTMLInputElement>) =>
⋮----
const handleQuantizationsBlur = () =>
⋮----
const handleAllowFallbacksChange = (checked: boolean) =>
⋮----
const handleDataCollectionChange = (value: string) =>
⋮----
const handleSortChange = (value: string) =>
⋮----
const handleRequireParametersChange = (checked: boolean) =>
⋮----
href="https://openrouter.ai/docs/features/provider-routing#ordering-specific-providers"
⋮----
href="https://openrouter.ai/docs/features/provider-routing#disabling-fallbacks"
⋮----
href="https://openrouter.ai/docs/features/provider-routing#allowing-only-specific-providers"
⋮----
href="https://openrouter.ai/docs/features/provider-routing#quantization"
⋮----
href="https://openrouter.ai/docs/features/provider-routing#provider-sorting"

================
File: src/renderer/src/components/ModelLibrary/providers/OpenRouterModelOverrides.tsx
================
import { getDefaultProviderParams, OpenRouterProvider } from '@common/agent';
⋮----
import { OpenRouterAdvancedSettings } from './OpenRouterAdvancedSettings';
⋮----
type Props = {
  overrides: Partial<OpenRouterProvider>;
  onChange: (overrides: Record<string, unknown>) => void;
};
⋮----
export const OpenRouterModelOverrides = (
⋮----
// Convert overrides to OpenRouterProvider format for AdvancedSettings
⋮----
// Convert OpenRouterProvider back to overrides format
const handleProviderChange = (updatedProvider: OpenRouterProvider) =>
⋮----
// Remove undefined values

================
File: src/renderer/src/components/ModelLibrary/providers/OpenRouterParameters.tsx
================
import { ChangeEvent, ReactNode } from 'react';
import { useTranslation } from 'react-i18next';
import { OpenRouterProvider } from '@common/agent';
⋮----
import { OpenRouterAdvancedSettings } from './OpenRouterAdvancedSettings';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
import { Accordion } from '@/components/common/Accordion';
⋮----
type Props = {
  provider: OpenRouterProvider;
  onChange: (updated: OpenRouterProvider) => void;
};
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const renderSectionAccordion = (title: ReactNode, children: ReactNode, open?: boolean, setOpen?: (open: boolean) => void) => (
    <Accordion
      title={<div className="flex-1 text-left text-sm font-medium px-2">{title}</div>}
      chevronPosition="right"
      className="mb-2 border rounded-md border-border-default-dark"
      isOpen={open}
      onOpenChange={setOpen}
    >
      <div className="p-4 pt-2">{children}</div>
    </Accordion>
  );
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',

================
File: src/renderer/src/components/ModelLibrary/providers/ProviderModels.tsx
================
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { IoClose } from 'react-icons/io5';
import { HiPlus } from 'react-icons/hi';
import { clsx } from 'clsx';
⋮----
import { Input } from '@/components/common/Input';
import { Button } from '@/components/common/Button';
import { IconButton } from '@/components/common/IconButton';
import { MultiSelect } from '@/components/common/MultiSelect';
⋮----
type Props = {
  models: string[];
  onChange: (updatedModels: string[]) => void;
  placeholder?: string;
  availableModels?: string[];
};
⋮----
const handleModelsChange = (updatedModels: string[]) =>
⋮----
const handleRemoveModel = (index: number) =>
⋮----
const handleAddModels = () =>
⋮----
// Add all selected models at once
⋮----
onChange=
placeholder=

================
File: src/renderer/src/components/ModelLibrary/providers/RequestyAdvancedSettings.tsx
================
import { useTranslation } from 'react-i18next';
import { RequestyProvider } from '@common/agent';
import { ReasoningEffort } from '@common/types';
⋮----
import { Checkbox } from '@/components/common/Checkbox';
import { InfoIcon } from '@/components/common/InfoIcon';
import { Select, Option } from '@/components/common/Select';
⋮----
type Props = {
  provider: RequestyProvider;
  onChange: (updated: RequestyProvider) => void;
};
⋮----
const handleUseAutoCacheChange = (checked: boolean) =>
⋮----
const handleReasoningEffortChange = (value: string) =>
⋮----
<Checkbox label=
<InfoIcon tooltip=
⋮----
<span>

================
File: src/renderer/src/components/ModelLibrary/providers/RequestyModelOverrides.tsx
================
import { getDefaultProviderParams, RequestyProvider } from '@common/agent';
⋮----
import { RequestyAdvancedSettings } from './RequestyAdvancedSettings';
⋮----
type Props = {
  overrides: Partial<RequestyProvider>;
  onChange: (overrides: Record<string, unknown>) => void;
};
⋮----
export const RequestyModelOverrides = (
⋮----
// Convert overrides to RequestyProvider format for AdvancedSettings
⋮----
// Convert RequestyProvider back to overrides format
const handleProviderChange = (updatedProvider: RequestyProvider) =>
⋮----
// Remove undefined values

================
File: src/renderer/src/components/ModelLibrary/providers/RequestyParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { RequestyProvider } from '@common/agent';
⋮----
import { RequestyAdvancedSettings } from './RequestyAdvancedSettings';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: RequestyProvider;
  onChange: (updated: RequestyProvider) => void;
};
⋮----
export const RequestyParameters = (
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',

================
File: src/renderer/src/components/ModelLibrary/providers/VertexAiAdvancedSettings.tsx
================
import { useTranslation } from 'react-i18next';
import { VertexAiProvider } from '@common/agent';
⋮----
import { Slider } from '@/components/common/Slider';
import { Checkbox } from '@/components/common/Checkbox';
import { InfoIcon } from '@/components/common/InfoIcon';
⋮----
type Props = {
  provider: VertexAiProvider;
  onChange: (updated: VertexAiProvider) => void;
};
⋮----
const handleThinkingBudgetChange = (value: number) =>
⋮----
const handleIncludeThoughtsChange = (checked: boolean) =>
⋮----
label=
⋮----
<InfoIcon tooltip=

================
File: src/renderer/src/components/ModelLibrary/providers/VertexAiModelOverrides.tsx
================
import { getDefaultProviderParams, VertexAiProvider } from '@common/agent';
⋮----
import { VertexAiAdvancedSettings } from './VertexAiAdvancedSettings';
⋮----
type Props = {
  overrides: Partial<VertexAiProvider>;
  onChange: (overrides: Record<string, unknown>) => void;
};
⋮----
export const VertexAiModelOverrides = (
⋮----
// Convert overrides to VertexAiProvider format for AdvancedSettings
⋮----
// Convert VertexAiProvider back to overrides format
const handleProviderChange = (updatedProvider: VertexAiProvider) =>
⋮----
// Remove undefined values

================
File: src/renderer/src/components/ModelLibrary/providers/VertexAIParameters.tsx
================
import { useTranslation } from 'react-i18next';
import { VertexAiProvider } from '@common/agent';
import { ChangeEvent } from 'react';
⋮----
import { VertexAiAdvancedSettings } from './VertexAiAdvancedSettings';
⋮----
import { Input } from '@/components/common/Input';
import { TextArea } from '@/components/common/TextArea';
⋮----
type Props = {
  provider: VertexAiProvider;
  onChange: (updated: VertexAiProvider) => void;
};
⋮----
const handleProjectChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleLocationChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleCredentialsChange = (e: ChangeEvent<HTMLTextAreaElement>) =>
⋮----
label=
placeholder=

================
File: src/renderer/src/components/ModelLibrary/providers/ZaiPlanParameters.tsx
================
import { ChangeEvent } from 'react';
import { useTranslation } from 'react-i18next';
import { ZaiPlanProvider } from '@common/agent';
⋮----
import { Input } from '@/components/common/Input';
import { useEffectiveEnvironmentVariable } from '@/hooks/useEffectiveEnvironmentVariable';
⋮----
type Props = {
  provider: ZaiPlanProvider;
  onChange: (updated: ZaiPlanProvider) => void;
};
⋮----
export const ZaiPlanParameters = (
⋮----
const handleApiKeyChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
label=
⋮----
? t('settings.agent.envVarFoundPlaceholder',

================
File: src/renderer/src/components/ModelLibrary/index.ts
================


================
File: src/renderer/src/components/ModelLibrary/ModelDialog.tsx
================
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { Model, ProviderProfile } from '@common/types';
⋮----
import { ModelParameterOverrides } from './ModelParameterOverrides';
⋮----
import { Input } from '@/components/common/Input';
import { Select } from '@/components/common/Select';
import { Checkbox } from '@/components/common/Checkbox';
import { ConfirmDialog } from '@/components/common/ConfirmDialog';
⋮----
type Props = {
  model?: Model;
  providers: ProviderProfile[];
  onSave: (model: Model) => void;
  onCancel: () => void;
};
⋮----
const validateForm = (): boolean =>
⋮----
const handleSubmit = () =>
⋮----
const handleInputChange = (field: keyof Model, value: unknown) =>
⋮----
// Clear error when user starts typing
⋮----
label=
⋮----
onChange=
⋮----
disabled={!!model} // Don't allow changing provider for existing models
⋮----
placeholder=
disabled={!!model} // Don't allow changing ID for existing models
⋮----
const perMillionValue = e.target.value ? parseFloat(e.target.value) : undefined;
⋮----
handleInputChange('inputCostPerToken', perTokenValue);
⋮----
handleInputChange('outputCostPerToken', perTokenValue);
⋮----
handleInputChange('cacheReadInputTokenCost', perTokenValue);
⋮----
{/* Advanced Settings - Provider Overrides */}
⋮----
<Checkbox label=

================
File: src/renderer/src/components/ModelLibrary/ModelLibrary.tsx
================
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { Model, ProviderProfile } from '@common/types';
import { LlmProviderName } from '@common/agent';
⋮----
import { ModelDialog } from './ModelDialog';
import { ProviderSelection } from './ProviderSelection';
import { ProviderProfileForm } from './ProviderProfileForm';
import { ProviderHeader } from './ProviderHeader';
import { ModelTableSection } from './ModelTableSection';
⋮----
import { ModalOverlayLayout } from '@/components/common/ModalOverlayLayout';
import { useModelProviders } from '@/contexts/ModelProviderContext';
⋮----
type Props = {
  onClose: () => void;
};
⋮----
const handleToggleProviderSelect = (profileId: string) =>
⋮----
const handleAddProvider = () =>
⋮----
const handleSelectProvider = (provider: LlmProviderName) =>
⋮----
const handleEditProfile = (profile: ProviderProfile) =>
⋮----
const handleDeleteProfile = async (profile: ProviderProfile) =>
⋮----
const handleCancelConfigure = () =>
⋮----
const handleSaveProfile = async (profile: ProviderProfile) =>
⋮----
const handleAddModel = () =>
⋮----
const handleEditModel = (model: Model) =>
⋮----
const handleDeleteModel = async (model: Model) =>
⋮----
const handleSaveModel = async (model: Model) =>
⋮----
const handleToggleHidden = async (model: Model) =>
⋮----
// Show provider selection when adding new provider
⋮----
<ModalOverlayLayout title=
⋮----
// Show provider configuration form

================
File: src/renderer/src/components/ModelLibrary/ModelParameterOverrides.tsx
================
import { useTranslation } from 'react-i18next';
import { LlmProvider, LlmProviderName } from '@common/agent';
import { ComponentType } from 'react';
⋮----
import { OpenRouterModelOverrides } from './providers/OpenRouterModelOverrides';
import { GeminiModelOverrides } from './providers/GeminiModelOverrides';
import { VertexAiModelOverrides } from './providers/VertexAiModelOverrides';
import { OpenAiModelOverrides } from './providers/OpenAiModelOverrides';
import { RequestyModelOverrides } from './providers/RequestyModelOverrides';
⋮----
import { Button } from '@/components/common/Button';
import { Accordion } from '@/components/common/Accordion';
⋮----
type ProviderOverridesProps = {
  overrides: Record<string, unknown>;
  onChange: (overrides: Record<string, unknown>) => void;
};
⋮----
type Props = {
  provider: LlmProvider;
  overrides: Record<string, unknown>;
  onChange: (overrides: Record<string, unknown>) => void;
  className?: string;
};
⋮----
const handleProviderOverrideChange = (providerOverrides: Record<string, unknown>) =>
⋮----
const handleResetToDefaults = () =>
⋮----
<div className="text-sm font-medium text-text-primary">

================
File: src/renderer/src/components/ModelLibrary/ModelTableSection.tsx
================
import { useState, ReactNode } from 'react';
import { useDebounce } from '@reactuses/core';
import { useTranslation } from 'react-i18next';
import { FiEdit2, FiTrash2, FiPlus, FiEye, FiSliders } from 'react-icons/fi';
import { Model, ProviderProfile } from '@common/types';
⋮----
import { Input } from '@/components/common/Input';
import { Button } from '@/components/common/Button';
import { Column } from '@/components/common/Table';
import { VirtualTable } from '@/components/common/VirtualTable';
import { IconButton } from '@/components/common/IconButton';
⋮----
type Props = {
  models: Model[];
  modelCount: number;
  selectedProviderIds: string[];
  providers: ProviderProfile[];
  onAddModel: () => void;
  onEditModel: (model: Model) => void;
  onDeleteModel: (model: Model) => void;
  onToggleHidden: (model: Model) => void;
};
⋮----
{/* Search and Info Header */}
⋮----
{/* Table */}

================
File: src/renderer/src/components/ModelLibrary/ProviderCard.tsx
================
import { ReactNode } from 'react';
⋮----
type Props = {
  name: string;
  icon: ReactNode;
  onClick: () => void;
};
⋮----
export const ProviderCard = (

================
File: src/renderer/src/components/ModelLibrary/ProviderHeader.tsx
================
import { useTranslation } from 'react-i18next';
import { FiPlus } from 'react-icons/fi';
import { ProviderProfile } from '@common/types';
⋮----
import { ProviderProfileCard } from './ProviderProfileCard';
⋮----
import { Button } from '@/components/common/Button';
⋮----
type Props = {
  providers: ProviderProfile[];
  providerErrors: Record<string, string>;
  selectedProfileIds: string[];
  onToggleSelect: (profileId: string) => void;
  onAddProvider: () => void;
  onEditProfile: (profile: ProviderProfile) => void;
  onDeleteProfile: (profile: ProviderProfile) => void;
};
⋮----
isSelected=

================
File: src/renderer/src/components/ModelLibrary/ProviderProfileCard.tsx
================
import { useState, ComponentType } from 'react';
import { useTranslation } from 'react-i18next';
import { FiEdit2, FiTrash2 } from 'react-icons/fi';
import { clsx } from 'clsx';
import { ProviderProfile } from '@common/types';
import { LlmProviderName } from '@common/agent';
import { FaExclamationCircle } from 'react-icons/fa';
⋮----
import { IconButton } from '@/components/common/IconButton';
import { ConfirmDialog } from '@/components/common/ConfirmDialog';
import {
  AnthropicIcon,
  AzureIcon,
  BedrockIcon,
  CerebrasIcon,
  DeepseekIcon,
  GeminiIcon,
  GroqIcon,
  LmStudioIcon,
  OllamaIcon,
  OpenAiCompatibleIcon,
  OpenAiIcon,
  OpenRouterIcon,
  RequestyIcon,
  VertexAiIcon,
  ZaiPlanIcon,
} from '@/icons';
import { useResponsive } from '@/hooks/useResponsive';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  provider: ProviderProfile;
  error?: string;
  isSelected: boolean;
  onToggleSelect: () => void;
  onEdit: () => void;
  onDelete: () => void;
};
⋮----
const handleCardClick = () =>
⋮----
// If already selected and no actions showing, show actions (mobile behavior)
⋮----
// Otherwise, toggle selection (mobile behavior)
⋮----
const handleEdit = () =>
⋮----
const handleDelete = () =>
⋮----
{/* Action buttons - shown on hover (desktop) or when showActions is true (mobile) */}
⋮----
title=

================
File: src/renderer/src/components/ModelLibrary/ProviderProfileForm.tsx
================
import { getDefaultProviderParams, LlmProvider, LlmProviderName } from '@common/agent';
import { ProviderProfile } from '@common/types';
import { useTranslation } from 'react-i18next';
import { ComponentType, ReactNode, useEffect, useState } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { FaPlus, FaTrash } from 'react-icons/fa';
⋮----
import {
  AnthropicParameters,
  AzureParameters,
  BedrockParameters,
  DeepseekParameters,
  GeminiParameters,
  GroqParameters,
  LmStudioParameters,
  OllamaParameters,
  OpenAiCompatibleParameters,
  OpenAiParameters,
  OpenRouterParameters,
  RequestyParameters,
  VertexAIParameters,
  ZaiPlanParameters,
} from '@/components/ModelLibrary/providers';
import { Input } from '@/components/common/Input';
import { Button } from '@/components/common/Button';
import { IconButton } from '@/components/common/IconButton';
import { Accordion } from '@/components/common/Accordion';
⋮----
type ProviderParametersProps<T extends LlmProvider> = {
  provider: T;
  onChange: (updated: T) => void;
};
⋮----
// @ts-expect-error using LlmProvider as type
⋮----
type Header = { id: string; key: string; value: string };
⋮----
type Props = {
  provider: LlmProviderName;
  editProfile?: ProviderProfile; // for editing
  providers: ProviderProfile[];
  onSave: (profile: ProviderProfile) => void;
  onCancel: () => void;
};
⋮----
editProfile?: ProviderProfile; // for editing
⋮----
// Set defaults for new profile
⋮----
const handleIdChange = (value: string) =>
⋮----
// Clear error when user starts typing
⋮----
const handleHeaderChange = (id: string, field: 'key' | 'value', value: string) =>
⋮----
const addHeader = () =>
⋮----
const removeHeader = (id: string) =>
⋮----
const validateForm = (): boolean =>
⋮----
// Check for duplicate IDs
⋮----
const handleSave = () =>
⋮----
const renderSectionAccordion = (title: ReactNode, children: ReactNode, open?: boolean, setOpen?: (open: boolean) => void) => (
    <Accordion
      title={<div className="flex-1 text-left text-sm font-medium px-2">{title}</div>}
      chevronPosition="right"
      className="mb-2 border rounded-md border-border-default-dark"
      isOpen={open}
      onOpenChange={setOpen}
    >
      <div className="p-4 pt-2">{children}</div>
    </Accordion>
  );
⋮----
placeholder=
⋮----
onChange=

================
File: src/renderer/src/components/ModelLibrary/ProviderSelection.tsx
================
import { LlmProviderName, AVAILABLE_PROVIDERS } from '@common/agent';
import { useTranslation } from 'react-i18next';
import { ComponentType } from 'react';
import { FiArrowLeft } from 'react-icons/fi';
⋮----
import { ProviderCard } from './ProviderCard';
⋮----
import { IconButton } from '@/components/common/IconButton';
import {
  AnthropicIcon,
  AzureIcon,
  BedrockIcon,
  CerebrasIcon,
  DeepseekIcon,
  GeminiIcon,
  GroqIcon,
  LmStudioIcon,
  OllamaIcon,
  OpenAiCompatibleIcon,
  OpenAiIcon,
  OpenRouterIcon,
  RequestyIcon,
  VertexAiIcon,
  ZaiPlanIcon,
} from '@/icons';
⋮----
type Props = {
  onSelectProvider: (provider: LlmProviderName) => void;
  onCancel?: () => void;
  showTitle?: boolean;
};
⋮----
name=
⋮----
onClick={() => onSelectProvider(provider)}
            />
          );

================
File: src/renderer/src/components/onboarding/OnboardingProviderSetup.tsx
================
import { useState } from 'react';
import { ProviderProfile } from '@common/types';
import { LlmProviderName } from '@common/agent';
⋮----
import { ProviderSelection } from '@/components/ModelLibrary/ProviderSelection';
import { ProviderProfileForm } from '@/components/ModelLibrary/ProviderProfileForm';
import { useModelProviders } from '@/contexts/ModelProviderContext';
import { ProviderHeader } from '@/components/ModelLibrary/ProviderHeader';
⋮----
export const OnboardingProviderSetup = () =>
⋮----
const handleAddProvider = () =>
⋮----
const handleSelectProvider = (provider: LlmProviderName) =>
⋮----
const handleEditProfile = (profile: ProviderProfile) =>
⋮----
const handleDeleteProfile = async (profile: ProviderProfile) =>
⋮----
const handleCancelConfigure = () =>
⋮----
const handleSaveProfile = async (profile: ProviderProfile) =>
⋮----
// Show provider configuration form
⋮----
// Show provider selection when adding new provider

================
File: src/renderer/src/components/onboarding/OnboardingStepper.tsx
================
import { HiCheck } from 'react-icons/hi';
import { clsx } from 'clsx';
⋮----
type Step = {
  title: string;
};
⋮----
type Props = {
  steps: Step[];
  currentStep: number;
};
⋮----
{/* Step Circle */}
⋮----
className=
⋮----
{/* Step Title */}
⋮----
{/* Connector Line */}

================
File: src/renderer/src/components/project/AddFileDialog.tsx
================
import { useCallback, useEffect, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
⋮----
import { FileFinder } from '@/components/project/FileFinder';
import { FileChip } from '@/components/common/FileChip';
import { ConfirmDialog } from '@/components/common/ConfirmDialog';
import { Checkbox } from '@/components/common/Checkbox';
import { useApi } from '@/context/ApiContext';
⋮----
type Props = {
  baseDir: string;
  onClose: () => void;
  onAddFiles: (filePaths: string[], readOnly?: boolean) => void;
  initialReadOnly?: boolean;
};
⋮----
const handleDragEnter = (event: DragEvent) =>
⋮----
const handleDragOver = (event: DragEvent) =>
⋮----
const handleDrop = async (event: DragEvent) =>
⋮----
const handleOnPaste = async (pastedText: string) =>
⋮----
const handleRemovePath = (pathToRemove: string) =>
⋮----
const handleAddFiles = () =>
⋮----
// onClose will be called by ConfirmDialog's onConfirm
⋮----
title=
⋮----
confirmButtonText=
⋮----
className="w-full" // Changed from flex-1 as it's the only main element now
⋮----
<Checkbox label=

================
File: src/renderer/src/components/project/FileFinder.tsx
================
import { matchSorter } from 'match-sorter';
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { FaFile, FaFolder } from 'react-icons/fa';
import { PiKeyReturn } from 'react-icons/pi';
⋮----
import { AutocompletionInput } from '@/components/AutocompletionInput';
import { IconButton } from '@/components/common/IconButton';
import { StyledTooltip } from '@/components/common/StyledTooltip';
import { useApi } from '@/context/ApiContext';
⋮----
type Props = {
  baseDir?: string;
  isReadOnly: boolean;
  selectedPaths: string[];
  onPathAdded: (path: string) => void;
  onSubmit?: () => void;
  onPaste?: (pastedText: string) => Promise<void>;
  autoFocus?: boolean;
  className?: string;
  allowFiles?: boolean;
  allowDirectories?: boolean;
};
⋮----
const checkValidPath = async () =>
⋮----
const updateSuggestions = async () =>
⋮----
const getParentDirectories = () =>
⋮----
continue; // No parent directories if it's a root file or empty/invalid path
⋮----
// Construct the parent path by joining segments from start up to current segment 'i'
⋮----
// Add to set if it's not an empty string (e.g. from a path like "/file.txt" where first segment is empty)
⋮----
// Deduplicate in case a path could be sourced from both lists or if suggestionFiles had duplicates
⋮----
const handleInputSubmit = () =>
⋮----
const handleAutocompleteInputChange = (value: string, isFromSuggestion?: boolean) =>
⋮----
setInputValue(''); // Clear input after adding from suggestion
setShowSuggestions(false); // Hide suggestions after selection
⋮----
const getPlaceholderKey = (isForSelectedPaths: boolean) =>
⋮----
// Fallback, though ideally one of them should always be true
⋮----
const handleBrowse = async (browseType: 'file' | 'directory') =>
⋮----
// eslint-disable-next-line no-console

================
File: src/renderer/src/components/project/MobileSidebar.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { clsx } from 'clsx';
import { Mode, TokensInfoData } from '@common/types';
import { FiChevronDown } from 'react-icons/fi';
⋮----
import { SidebarContent } from '@/components/project/SidebarContent';
⋮----
type AddFileDialogOptions = {
  readOnly: boolean;
};
⋮----
type Props = {
  showSidebar: boolean;
  setShowSidebar: (show: boolean) => void;
  baseDir: string;
  allFiles: string[];
  tokensInfo: TokensInfoData | null;
  aiderTotalCost: number;
  maxInputTokens: number;
  clearMessages: (clearContext?: boolean) => void;
  runCommand: (command: string) => void;
  restartProject: () => void;
  mode: Mode;
  setAddFileDialogOptions: React.Dispatch<React.SetStateAction<AddFileDialogOptions | null>>;
};
⋮----
export const MobileSidebar = ({
  showSidebar,
  setShowSidebar,
  baseDir,
  allFiles,
  tokensInfo,
  aiderTotalCost,
  maxInputTokens,
  clearMessages,
  runCommand,
  restartProject,
  mode,
  setAddFileDialogOptions,
}: Props) =>

================
File: src/renderer/src/components/project/NoProjectsOpen.tsx
================
import { useTranslation } from 'react-i18next';
⋮----
// @ts-expect-error TypeScript is not aware of asset import
import icon from '../../../../../resources/icon.png?asset';
⋮----
type Props = {
  onOpenProject: () => void;
};

================
File: src/renderer/src/components/project/OpenProjectDialog.tsx
================
import { useEffect, useState } from 'react';
import { FaFolder } from 'react-icons/fa';
import { useTranslation } from 'react-i18next';
import { ProjectData } from '@common/types';
⋮----
import { AutocompletionInput } from '@/components/AutocompletionInput';
import { Accordion } from '@/components/common/Accordion';
import { ConfirmDialog } from '@/components/common/ConfirmDialog';
import { IconButton } from '@/components/common/IconButton';
import { StyledTooltip } from '@/components/common/StyledTooltip';
import { useApi } from '@/context/ApiContext';
⋮----
type Props = {
  onClose: () => void;
  onAddProject: (baseDir: string) => void;
  openProjects: ProjectData[];
};
⋮----
const loadRecentProjects = async () =>
⋮----
const updateSuggestions = async () =>
⋮----
const handleSelectProject = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleAddProject = () =>
⋮----
title=
⋮----
confirmButtonText=

================
File: src/renderer/src/components/project/ProjectBar.tsx
================
import { EditFormat, Mode, Model, ModelsData, RawModelInfo, SessionData } from '@common/types';
import React, { ReactNode, useCallback, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';
import { BsCodeSlash, BsFilter, BsLayoutSidebar } from 'react-icons/bs';
import { CgTerminal } from 'react-icons/cg';
import { GoProjectRoadmap } from 'react-icons/go';
import { IoMdClose } from 'react-icons/io';
import { MdHistory } from 'react-icons/md';
import { RiRobot2Line } from 'react-icons/ri';
import { useTranslation } from 'react-i18next';
import { getProviderModelId } from '@common/agent';
⋮----
import { IconButton } from '@/components/common/IconButton';
import { AgentModelSelector } from '@/components/AgentModelSelector';
import { ModelSelector, ModelSelectorRef } from '@/components/ModelSelector';
import { EditFormatSelector } from '@/components/PromptField/EditFormatSelector';
import { SessionsPopup } from '@/components/SessionsPopup';
import { StyledTooltip } from '@/components/common/StyledTooltip';
import { useSettings } from '@/context/SettingsContext';
import { useProjectSettings } from '@/context/ProjectSettingsContext';
import { useClickOutside } from '@/hooks/useClickOutside';
import { useBooleanState } from '@/hooks/useBooleanState';
import { showSuccessNotification } from '@/utils/notifications';
import { useApi } from '@/context/ApiContext';
import { useResponsive } from '@/hooks/useResponsive';
import { useModelProviders } from '@/contexts/ModelProviderContext';
⋮----
export type ProjectTopBarRef = {
  openMainModelSelector: (model?: string) => void;
  openAgentModelSelector: (model?: string) => void;
};
⋮----
type Props = {
  baseDir: string;
  modelsData: ModelsData | null;
  mode: Mode;
  onModelsChange?: (modelsData: ModelsData | null) => void;
  onExportSessionToImage: () => void;
  runCommand: (command: string) => void;
  onToggleSidebar: () => void;
};
⋮----
// optimistic update
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
// Two-row layout for Agent mode with Aider tools
⋮----
{/* Row 1: AGENT */}
⋮----
{/* Row 2: AIDER */}
⋮----
// Original horizontal layout for other modes
⋮----
data-tooltip-content=
⋮----
tooltip=

================
File: src/renderer/src/components/project/ProjectTabs.tsx
================
import { ProjectData } from '@common/types';
import { CSS } from '@dnd-kit/utilities';
import { useEffect, useMemo, useRef, useState } from 'react';
import { Tab, TabGroup, TabList } from '@headlessui/react';
import { clsx } from 'clsx';
import { MdAdd, MdClose, MdChevronLeft, MdChevronRight } from 'react-icons/md';
import { DndContext, closestCenter, KeyboardSensor, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';
import { SortableContext, sortableKeyboardCoordinates, arrayMove, useSortable, horizontalListSortingStrategy } from '@dnd-kit/sortable';
import { useTranslation } from 'react-i18next';
⋮----
import type { DragEndEvent } from '@dnd-kit/core';
⋮----
import { MenuOption, useContextMenu } from '@/context/ContextMenuContext';
⋮----
type ProjectOperations = {
  onCloseProject: (baseDir: string) => Promise<void>;
  onCloseOtherProjects: (baseDir: string) => Promise<void>;
  onCloseAllProjects: () => Promise<void>;
};
⋮----
type Props = {
  openProjects: ProjectData[];
  activeProject: ProjectData | undefined;
  onAddProject: () => void;
  onSetActiveProject: (baseDir: string) => void;
  projectOperations: ProjectOperations;
  onReorderProjects: (projects: ProjectData[]) => void;
};
⋮----
const checkScrollButtonsVisibility = () =>
⋮----
const handleScroll = () =>
⋮----
const handleScrollLeft = () =>
⋮----
const handleScrollRight = () =>
⋮----
const handleDragEnd = (event: DragEndEvent) =>
⋮----
// useMemo for project IDs to prevent SortableContext from re-rendering unnecessarily
⋮----
onChange=
⋮----
<DndContext sensors={sensors} collisionDetection={closestCenter} onDragStart={() => setDragging(true)} onDragEnd={handleDragEnd}>
            <SortableContext items={projectIds} strategy={horizontalListSortingStrategy}>
              {openProjects.map((project) => (
                <SortableTabItem
                  key={project.baseDir}
                  project={project}
                  activeProject={activeProject}
                  projectOperations={projectOperations}
                  openProjectsNumber={openProjects.length}
                />
              ))}
            </SortableContext>
          </DndContext>
        </div>
        {showRightScrollButton && (
          <button
            className="absolute right-[52px] z-10 h-full flex items-center px-2 bg-bg-primary-light hover:bg-bg-secondary transition-colors duration-200"
            onClick={handleScrollRight}
          >
            <MdChevronRight className="h-5 w-5 text-text-muted-light" />
          </button>
        )}
        <button
          className="px-4 py-2 text-text-muted-light hover:text-text-secondary hover:bg-bg-secondary transition-colors duration-200 flex items-center justify-center"
          onClick={onAddProject}
        >
          <MdAdd className="h-5 w-5" />
        </button>
      </TabList>
    </TabGroup>
  );
⋮----
e.stopPropagation(); // Prevent tab selection/drag initiation

================
File: src/renderer/src/components/project/ProjectView.tsx
================
import {
  AutocompletionData,
  ClearProjectData,
  CommandOutputData,
  InputHistoryData,
  LogData,
  Mode,
  Model,
  ModelsData,
  ProjectData,
  QuestionData,
  ResponseChunkData,
  ResponseCompletedData,
  TodoItem,
  TokensInfoData,
  ToolData,
  UserMessageData,
} from '@common/types';
import { useTranslation } from 'react-i18next';
import { useEffect, useMemo, useRef, useState } from 'react';
import { CgSpinner } from 'react-icons/cg';
import { ResizableBox } from 'react-resizable';
import { v4 as uuidv4 } from 'uuid';
import { clsx } from 'clsx';
import { getActiveAgentProfile } from '@common/utils';
import { TODO_TOOL_CLEAR_ITEMS, TODO_TOOL_GET_ITEMS, TODO_TOOL_GROUP_NAME, TODO_TOOL_SET_ITEMS, TODO_TOOL_UPDATE_ITEM_COMPLETION } from '@common/tools';
import { getProviderModelId } from '@common/agent';
⋮----
import {
  CommandOutputMessage,
  isCommandOutputMessage,
  isLoadingMessage,
  isLogMessage,
  isResponseMessage,
  isToolMessage,
  isUserMessage,
  LoadingMessage,
  LogMessage,
  Message,
  ReflectedMessage,
  ResponseMessage,
  ToolMessage,
  UserMessage,
} from '@/types/message';
import { Messages, MessagesRef } from '@/components/message/Messages';
import { VirtualizedMessages, VirtualizedMessagesRef } from '@/components/message/VirtualizedMessages';
import { useSettings } from '@/context/SettingsContext';
import { useProjectSettings } from '@/context/ProjectSettingsContext';
import { AddFileDialog } from '@/components/project/AddFileDialog';
import { ProjectBar, ProjectTopBarRef } from '@/components/project/ProjectBar';
import { PromptField, PromptFieldRef } from '@/components/PromptField';
import { Button } from '@/components/common/Button';
import { TodoWindow } from '@/components/project/TodoWindow';
import { TerminalView, TerminalViewRef } from '@/components/terminal/TerminalView';
import { MobileSidebar } from '@/components/project/MobileSidebar';
import { SidebarContent } from '@/components/project/SidebarContent';
⋮----
import { useSearchText } from '@/hooks/useSearchText';
import { useApi } from '@/context/ApiContext';
import { useResponsive } from '@/hooks/useResponsive';
import { useModelProviders } from '@/contexts/ModelProviderContext';
⋮----
type AddFileDialogOptions = {
  readOnly: boolean;
};
⋮----
type Props = {
  project: ProjectData;
  isActive?: boolean;
};
⋮----
const handleProjectStarted = () =>
⋮----
// Load existing todos
const loadTodos = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleResponseChunk = (
⋮----
const handleResponseCompleted = (
⋮----
// If no processing message exists, find the last response message
⋮----
// If no response message exists, create a new one
⋮----
const handleCommandOutput = (
⋮----
const handleTodoTool = (toolName: string, args: Record<string, unknown> | undefined, response: string | undefined) =>
⋮----
// If response is not JSON, it might be a message like "No todo items found"
⋮----
// eslint-disable-next-line no-console
⋮----
const handleTool = (
⋮----
const createNewToolMessage = () =>
⋮----
const handleLog = (
⋮----
// Mark all messages in the same group as finished before removing loading messages
⋮----
// Create a new message object with updated promptContext.group.finished
⋮----
// Then remove loading messages
⋮----
// Update existing loading message
⋮----
// Add new loading message
⋮----
const handleUpdateAutocompletion = (
⋮----
const handleUpdateAiderModels = (data: ModelsData) =>
⋮----
const handleTokensInfo = (data: TokensInfoData) =>
⋮----
const handleQuestion = (data: QuestionData) =>
⋮----
const handleInputHistoryUpdate = (data: InputHistoryData) =>
⋮----
const handleUserMessage = (data: UserMessageData) =>
⋮----
mode: data.mode || projectSettings?.currentMode || 'code', // Use projectSettings.currentMode as fallback
⋮----
const handleClearProject = (
⋮----
// eslint-disable-next-line react-hooks/exhaustive-deps
⋮----
const handleAddFiles = (filePaths: string[], readOnly = false) =>
⋮----
const showFileDialog = (readOnly: boolean) =>
⋮----
const clearSession = () =>
⋮----
const clearMessages = (clearContext = true) =>
⋮----
const toggleTerminal = () =>
⋮----
const clearLogMessages = () =>
⋮----
const runCommand = (command: string) =>
⋮----
const runTests = (testCmd?: string) =>
⋮----
const answerQuestion = (answer: string) =>
⋮----
const scrapeWeb = async (url: string, filePath?: string) =>
⋮----
const getMessage = () =>
⋮----
const handleInterruptResponse = () =>
⋮----
const handleModelChange = (modelsData: ModelsData | null) =>
⋮----
const handleModeChange = (mode: Mode) =>
⋮----
const runPrompt = (prompt: string) =>
⋮----
} // Should not happen if component is rendered
⋮----
// This submission is an edit of a previous message
⋮----
setEditingMessageIndex(null); // Clear editing state
⋮----
const handleEditLastUserMessage = (content?: string) =>
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
const restartProject = () =>
⋮----
const exportMessagesToImage = () =>
⋮----
const handleRedoLastUserPrompt = () =>
⋮----
// Keep messages up to and excluding the one being redone
⋮----
// Ensure projectSettings is available
⋮----
const handleRemoveMessage = (messageToRemove: Message) =>
⋮----
const handleAddTodo = async (name: string) =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleToggleTodo = async (name: string, completed: boolean) =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleUpdateTodo = async (name: string, updates: Partial<TodoItem>) =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleDeleteTodo = async (name: string) =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleClearAllTodos = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleTerminalViewResize = () =>
⋮----
const handleCopyTerminalOutput = (output: string) =>

================
File: src/renderer/src/components/project/SidebarContent.tsx
================
import { TokensInfoData, Mode } from '@common/types';
⋮----
import { ContextFiles } from '@/components/ContextFiles';
import { CostInfo } from '@/components/CostInfo';
⋮----
type Props = {
  baseDir: string;
  allFiles: string[];
  tokensInfo: TokensInfoData | null;
  aiderTotalCost: number;
  maxInputTokens: number;
  clearMessages: (clearContext?: boolean) => void;
  runCommand: (command: string) => void;
  restartProject: () => void;
  mode: Mode;
  showFileDialog: () => void;
};
⋮----
export const SidebarContent = ({
  baseDir,
  allFiles,
  tokensInfo,
  aiderTotalCost,
  maxInputTokens,
  clearMessages,
  runCommand,
  restartProject,
  mode,
  showFileDialog,
}: Props) =>

================
File: src/renderer/src/components/project/TodoListItem.tsx
================
import { useState } from 'react';
import { clsx } from 'clsx';
import { MdEdit, MdDelete, MdCheck, MdClose } from 'react-icons/md';
import { useTranslation } from 'react-i18next';
import { TodoItem } from '@common/types';
⋮----
import { Checkbox } from '../common/Checkbox';
import { IconButton } from '../common/IconButton';
⋮----
type Props = {
  item: TodoItem;
  onToggle?: (name: string, completed: boolean) => void;
  onUpdate?: (name: string, updates: Partial<TodoItem>) => void;
  onDelete?: (name: string) => void;
};
⋮----
const handleToggle = (checked: boolean) =>
⋮----
const handleEdit = () =>
⋮----
const handleSaveEdit = () =>
⋮----
const handleCancelEdit = () =>
⋮----
const handleKeyPress = (e: React.KeyboardEvent) =>
⋮----
const handleDelete = () =>
⋮----
onChange=
⋮----
disabled=
⋮----
tooltip=

================
File: src/renderer/src/components/project/TodoWindow.tsx
================
import { useEffect, useState } from 'react';
import { MdAdd, MdExpandLess, MdOutlineChecklist, MdPlaylistRemove } from 'react-icons/md';
import { useTranslation } from 'react-i18next';
import { TodoItem } from '@common/types';
⋮----
import { IconButton } from '../common/IconButton';
import { Button } from '../common/Button';
⋮----
import { TodoListItem } from './TodoListItem';
⋮----
import { Input } from '@/components/common/Input';
⋮----
type Props = {
  todos: TodoItem[];
  onToggleTodo?: (name: string, completed: boolean) => void;
  onAddTodo?: (name: string) => void;
  onUpdateTodo?: (name: string, updates: Partial<TodoItem>) => void;
  onDeleteTodo?: (name: string) => void;
  onClearAllTodos: () => void;
};
⋮----
const handleToggleExpand = () =>
⋮----
const handleAddTodo = () =>
⋮----
const handleSaveTodo = () =>
⋮----
const handleCancelAdd = () =>
⋮----
const handleKeyPress = (e: React.KeyboardEvent) =>
⋮----
// Auto-collapse when all todo items are completed
⋮----
{/* Header */}
⋮----
tooltip=
⋮----
{/* Content */}
⋮----
{/* Add Todo Input */}
⋮----
placeholder=
⋮----

⋮----
{/* Todo List */}
⋮----
/* Collapsed state */

================
File: src/renderer/src/components/PromptField/CommandSuggestion.tsx
================
import { useTranslation } from 'react-i18next';
import { ReactNode } from 'react';
⋮----
type Props = {
  command: string;
  description?: ReactNode;
};
⋮----
export const CommandSuggestion = (

================
File: src/renderer/src/components/PromptField/EditFormatSelector.tsx
================
import { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { MdKeyboardArrowUp } from 'react-icons/md';
import { EditFormat } from '@common/types';
⋮----
import { useClickOutside } from '@/hooks/useClickOutside';
import { useBooleanState } from '@/hooks/useBooleanState';
⋮----
export type EditFormatSelectorRef = {
  open: () => void;
};
⋮----
// Define available edit formats based on the EditFormat type
⋮----
type Props = {
  currentFormat: EditFormat;
  onFormatChange: (format: EditFormat) => void;
};
⋮----
const handleFormatSelected = (format: EditFormat) =>
⋮----
const renderFormatItem = (format: EditFormat, index: number) => (
    <div
      key={format}
      ref={index === highlightedIndex ? highlightedItemRef : undefined}
      className={`flex items-center w-full hover:bg-bg-tertiary transition-colors duration-200 ${index === highlightedIndex ? 'bg-bg-tertiary' : 'text-text-tertiary'}`}
    >
      <button
        onClick={() => handleFormatSelected(format)}
        className={`flex-grow px-3 py-1 text-left text-xs ${format === currentFormat ? 'text-text-primary font-bold' : ''}`}
      >
        {format}
      </button>
    </div>
  );

================
File: src/renderer/src/components/PromptField/index.ts
================


================
File: src/renderer/src/components/PromptField/InputHistoryMenu.tsx
================
import { useEffect, useRef } from 'react';
⋮----
import { useClickOutside } from '@/hooks/useClickOutside';
⋮----
type Props = {
  items: string[];
  highlightedIndex: number;
  onSelect: (item: string) => void;
  onClose: () => void;
  onScrollTop?: () => void;
  keepHighlightAtTop?: boolean;
};
⋮----
const handleScroll = () =>
⋮----
onClick=

================
File: src/renderer/src/components/PromptField/ModeSelector.tsx
================
import { ElementType, useRef, useState } from 'react';
import { CgTerminal } from 'react-icons/cg';
import { FaRegQuestionCircle } from 'react-icons/fa';
import { AiOutlineFileSearch } from 'react-icons/ai';
import { RiRobot2Line } from 'react-icons/ri';
import { GoProjectRoadmap } from 'react-icons/go';
import { MdKeyboardArrowDown, MdKeyboardArrowUp } from 'react-icons/md';
import { Mode } from '@common/types';
import { useTranslation } from 'react-i18next';
⋮----
import { useClickOutside } from '@/hooks/useClickOutside';
⋮----
type ModeConfig = {
  icon: ElementType;
  labelKey: string;
  tooltipKey: string;
};
⋮----
type Props = {
  mode: Mode;
  onModeChange: (mode: Mode) => void;
};
⋮----
const toggleModeSelectorVisible = ()
⋮----
const handleModeChange = (newMode: Mode) =>

================
File: src/renderer/src/components/PromptField/PromptField.tsx
================
import {
  acceptCompletion,
  autocompletion,
  CompletionContext,
  type CompletionResult,
  currentCompletions,
  moveCompletionSelection,
  startCompletion,
} from '@codemirror/autocomplete';
import { EditorView, keymap } from '@codemirror/view';
import { vim } from '@replit/codemirror-vim';
import { Mode, PromptBehavior, QuestionData, SuggestionMode } from '@common/types';
import { githubDarkInit } from '@uiw/codemirror-theme-github';
import CodeMirror, { Prec, type ReactCodeMirrorRef, Annotation } from '@uiw/react-codemirror';
import { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState } from 'react';
import { useDebounce } from '@reactuses/core';
import { useTranslation } from 'react-i18next';
import { BiSend } from 'react-icons/bi';
import { MdPlaylistRemove, MdStop } from 'react-icons/md';
import { VscTerminal } from 'react-icons/vsc';
⋮----
import { AgentSelector } from '@/components/AgentSelector';
import { InputHistoryMenu } from '@/components/PromptField/InputHistoryMenu';
import { ModeSelector } from '@/components/PromptField/ModeSelector';
import { showErrorNotification } from '@/utils/notifications';
import { Button } from '@/components/common/Button';
import { useCustomCommands } from '@/hooks/useCustomCommands';
import { useApi } from '@/context/ApiContext';
⋮----
const isPathLike = (input: string): boolean =>
⋮----
export interface PromptFieldRef {
  focus: () => void;
  setText: (text: string) => void;
  appendText: (text: string) => void;
}
⋮----
type Props = {
  baseDir: string;
  processing: boolean;
  isActive: boolean;
  words?: string[];
  inputHistory?: string[];
  openModelSelector?: (model?: string) => void;
  openAgentModelSelector?: (model?: string) => void;
  mode: Mode;
  onModeChanged: (mode: Mode) => void;
  runPrompt: (prompt: string) => void;
  showFileDialog: (readOnly: boolean) => void;
  addFiles?: (filePaths: string[], readOnly?: boolean) => void;
  clearMessages: () => void;
  scrapeWeb: (url: string, filePath?: string) => void;
  question?: QuestionData | null;
  answerQuestion: (answer: string) => void;
  interruptResponse: () => void;
  runCommand: (command: string) => void;
  runTests: (testCmd?: string) => void;
  redoLastUserPrompt: () => void;
  editLastUserMessage: () => void;
  disabled?: boolean;
  promptBehavior: PromptBehavior;
  clearLogMessages: () => void;
  toggleTerminal?: () => void;
  terminalVisible?: boolean;
  scrollToBottom?: () => void;
};
⋮----
const completionSource = async (context: CompletionContext): Promise<CompletionResult | null> =>
⋮----
// Handle @-based file suggestions (exclusive)
⋮----
// Handle command suggestions
⋮----
// Add custom commands to the list
⋮----
// Ensure cursor is at the end after setting text
⋮----
// Ensure cursor is at the end after appending text
⋮----
const setTextWithDispatch = (newText: string) =>
⋮----
url = commandArgs; // Only URL provided
⋮----
filePath = undefined; // If only spaces after URL, treat as no filePath
⋮----
const requiresConfirmation = (command: string): boolean =>
⋮----
const handleConfirmCommand = () =>
⋮----
const onChange = (newText: string) =>
⋮----
const handleSubmit = () =>
⋮----
// Check if it's a custom command
⋮----
const getAutocompleteDetailLabel = (item: string): [string | null, boolean] =>
⋮----
// Check if it's a custom command
⋮----
placeholder=
⋮----
promptBehavior.useVimBindings ? vim() : keymap.of([]),
⋮----
EditorView.domEventHandlers({
paste(event)
⋮----
paste(event)
⋮----
autocompletion({
                  override: question || historyMenuVisible ? [] : [completionSource],
                  activateOnTyping:
                    promptBehavior.suggestionMode === SuggestionMode.Automatically || promptBehavior.suggestionMode === SuggestionMode.MentionAtSign,
                  activateOnTypingDelay: promptBehavior.suggestionDelay,
                  aboveCursor: true,
                  icons: false,
                  selectOnOpen: false,
                  addToOptions: [
                    {
render: (completion) =>
Prec.high(keymapExtension),
⋮----
onClose=

================
File: src/renderer/src/components/settings/agent/AgentProfileItem.tsx
================
import { AgentProfile } from '@common/types';
import { useTranslation } from 'react-i18next';
import { clsx } from 'clsx';
⋮----
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  profile: AgentProfile;
  isSelected: boolean;
  onClick: (id: string) => void;
  isDefault: boolean;
};
⋮----
const handleClick = () =>
⋮----
<StyledTooltip id=

================
File: src/renderer/src/components/settings/agent/AgentRules.tsx
================
import { Trans, useTranslation } from 'react-i18next';
import { AgentProfile } from '@common/types';
⋮----
import { TextArea } from '@/components/common/TextArea';
import { CodeInline } from '@/components/common/CodeInline';
⋮----
type AgentRulesProps = {
  profile: AgentProfile;
  handleProfileSettingChange: <K extends keyof AgentProfile>(field: K, value: AgentProfile[K]) => void;
};

================
File: src/renderer/src/components/settings/agent/AgentSettings.tsx
================
import { AgentProfile, ContextMemoryMode, GenericTool, InvocationMode, McpServerConfig, SettingsData, ToolApprovalState } from '@common/types';
import React, { ReactNode, useRef, useState } from 'react';
import { v4 as uuidv4 } from 'uuid';
import { FaPencilAlt, FaPlus, FaSyncAlt } from 'react-icons/fa';
import { DEFAULT_AGENT_PROFILE } from '@common/agent';
import { BiTrash } from 'react-icons/bi';
import { clsx } from 'clsx';
import Sketch from '@uiw/react-color-sketch';
import {
  AIDER_TOOL_ADD_CONTEXT_FILES,
  AIDER_TOOL_DESCRIPTIONS,
  AIDER_TOOL_DROP_CONTEXT_FILES,
  AIDER_TOOL_GET_CONTEXT_FILES,
  AIDER_TOOL_GROUP_NAME,
  AIDER_TOOL_RUN_PROMPT,
  POWER_TOOL_BASH,
  POWER_TOOL_DESCRIPTIONS,
  POWER_TOOL_FILE_EDIT,
  POWER_TOOL_FILE_READ,
  POWER_TOOL_FILE_WRITE,
  POWER_TOOL_GLOB,
  POWER_TOOL_GREP,
  POWER_TOOL_GROUP_NAME,
  POWER_TOOL_SEMANTIC_SEARCH,
  POWER_TOOL_FETCH,
  TODO_TOOL_CLEAR_ITEMS,
  TODO_TOOL_DESCRIPTIONS,
  TODO_TOOL_GET_ITEMS,
  TODO_TOOL_GROUP_NAME,
  TODO_TOOL_SET_ITEMS,
  TODO_TOOL_UPDATE_ITEM_COMPLETION,
} from '@common/tools';
import { useTranslation } from 'react-i18next';
import { MdFlashOn, MdOutlineChecklist, MdOutlineFileCopy, MdOutlineHdrAuto, MdOutlineMap, MdRepeat, MdThermostat } from 'react-icons/md';
import { FaArrowRightFromBracket } from 'react-icons/fa6';
⋮----
import { McpServer, McpServerForm } from './McpServerForm';
import { McpServerItem } from './McpServerItem';
import { GenericToolGroupItem } from './GenericToolGroupItem';
import { AgentProfileItem } from './AgentProfileItem';
import { AgentRules } from './AgentRules';
⋮----
import { AgentModelSelector } from '@/components/AgentModelSelector';
import { Button } from '@/components/common/Button';
import { Slider } from '@/components/common/Slider';
import { InfoIcon } from '@/components/common/InfoIcon';
import { Accordion } from '@/components/common/Accordion';
import { Input } from '@/components/common/Input';
import { Checkbox } from '@/components/common/Checkbox';
import { Select } from '@/components/common/Select';
import { TextArea } from '@/components/common/TextArea';
import { useApi } from '@/context/ApiContext';
⋮----
// Helper functions for accordion summaries
const getRunSettingsSummary = (profile: AgentProfile) =>
⋮----
type Props = {
  settings: SettingsData;
  setSettings: (settings: SettingsData) => void;
  initialProfileId?: string;
};
⋮----
const getSubagentSummary = (profile: AgentProfile) =>
⋮----
const handleCreateNewProfile = () =>
⋮----
}, 0); // Focus the input after the state update
⋮----
const handleDeleteProfile = () =>
⋮----
const handleProfileSettingChange = <K extends keyof AgentProfile>(field: K, value: AgentProfile[K]) =>
⋮----
const handleToggleServerEnabled = (serverKey: string, checked: boolean) =>
⋮----
const handleMcpServersReload = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleMcpServerRemove = (serverName: string) =>
⋮----
// eslint-disable-next-line @typescript-eslint/no-unused-vars
⋮----
const handleServersConfigSave = (servers: Record<string, McpServerConfig>) =>
⋮----
// Add new servers to the existing ones
⋮----
// If editing and the server name did not change, preserve the order
⋮----
// Replace the server at the same position
⋮----
// fallback: just replace as before
⋮----
// Remove the old server and add the updated one(s)
⋮----
// Replace all servers with the new set
⋮----
const handleToolApprovalChange = (toolId: string, approval: ToolApprovalState) =>
⋮----
const renderSectionAccordion = (title: ReactNode, children: ReactNode, open?: boolean, setOpen?: (open: boolean) => void, summary?: ReactNode) => (
    <Accordion
      title={
        <div className="flex-1 text-left text-sm font-medium px-2 flex items-center justify-between">
          <div>{title}</div>
          {summary && <div className="text-xs text-text-muted-light ml-2">{summary}</div>}
        </div>
      }
      chevronPosition="right"
      className="mb-2 border rounded-md border-border-default-dark"
      isOpen={open}
      onOpenChange={setOpen}
      scrollToVisibleWhenExpanded={true}
    >
      <div className="p-4 pt-2">{children}</div>
    </Accordion>
  );
⋮----
{/* Left sidebar with profiles and providers */}
⋮----
setSelectedProfileId(id);
⋮----
{/* Center content area for profile settings */}
⋮----
label=
⋮----
onChange=
⋮----
<span>
⋮----
onRemove=
onEdit=
⋮----
placeholder=

================
File: src/renderer/src/components/settings/agent/GenericToolGroupItem.tsx
================
import { GenericTool, ToolApprovalState } from '@common/types';
import { useTranslation } from 'react-i18next';
import { TOOL_GROUP_NAME_SEPARATOR } from '@common/tools';
⋮----
import { GenericToolItem } from './GenericToolItem';
⋮----
import { Accordion } from '@/components/common/Accordion';
import { Checkbox } from '@/components/common/Checkbox';
⋮----
type Props = {
  name: string;
  tools: GenericTool[];
  toolApprovals: Record<string, ToolApprovalState>;
  onApprovalChange: (toolId: string, approval: ToolApprovalState) => void;
  enabled?: boolean;
  onEnabledChange?: (enabled: boolean) => void;
};
⋮----
<Accordion title=

================
File: src/renderer/src/components/settings/agent/GenericToolItem.tsx
================
import { useTranslation } from 'react-i18next';
import { GenericTool, ToolApprovalState } from '@common/types';
import { TOOL_GROUP_NAME_SEPARATOR } from '@common/tools';
⋮----
import { Select } from '@/components/common/Select';
import { InfoIcon } from '@/components/common/InfoIcon';
⋮----
type Props = {
  tool: GenericTool;
  toolApprovals?: Record<string, ToolApprovalState>;
  onApprovalChange?: (toolId: string, approval: ToolApprovalState) => void;
};
⋮----
// Default to 'Always' if approvals are not being managed in this context
⋮----
const handleApprovalChange = (value: string) =>
⋮----
{/* Conditionally render the approval select only if onApprovalChange is provided */}

================
File: src/renderer/src/components/settings/agent/McpServerForm.tsx
================
import { McpServerConfig } from '@common/types';
import { useState, useMemo, ChangeEvent } from 'react';
import { z } from 'zod';
import { useTranslation } from 'react-i18next';
import { MdInfoOutline } from 'react-icons/md';
⋮----
import { StyledTooltip } from '@/components/common/StyledTooltip';
import { TextArea } from '@/components/common/TextArea';
import { Button } from '@/components/common/Button';
⋮----
export type McpServer = {
  name: string;
  config: McpServerConfig;
};
⋮----
type Props = {
  onSave: (servers: Record<string, McpServerConfig>) => void;
  onCancel: () => void;
  servers?: McpServer[];
};
⋮----
// If multiple servers, merge them into a single object
⋮----
// Try to parse as JSON, or as a "bare" object (without enclosing {})
const parseConfig = (text: string) =>
⋮----
// Try as full JSON first
⋮----
// Try as "bare" object: wrap in braces and parse
⋮----
const handleAddServer = () =>
⋮----
// Accept both { mcpServers: {...} } and just { ... }
⋮----
const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) =>
⋮----
<StyledTooltip id=

================
File: src/renderer/src/components/settings/agent/McpServerItem.tsx
================
import { McpServerConfig, McpTool, ToolApprovalState } from '@common/types';
import { useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { FaPencilAlt, FaTrash } from 'react-icons/fa';
import { TOOL_GROUP_NAME_SEPARATOR } from '@common/tools';
⋮----
import { McpToolItem } from './McpToolItem';
⋮----
import { Accordion } from '@/components/common/Accordion';
import { IconButton } from '@/components/common/IconButton';
import { Checkbox } from '@/components/common/Checkbox';
import { useApi } from '@/context/ApiContext';
⋮----
type Props = {
  serverName: string;
  config: McpServerConfig;
  onRemove?: () => void;
  onEdit?: () => void;
  toolApprovals: Record<string, ToolApprovalState>;
  onApprovalChange: (toolId: string, approval: ToolApprovalState) => void;
  reloadTrigger?: number;
  enabled?: boolean;
  onEnabledChange?: (enabled: boolean) => void;
};
⋮----
const loadTools = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
<Accordion title=

================
File: src/renderer/src/components/settings/agent/McpToolItem.tsx
================
import { useTranslation } from 'react-i18next';
import { McpTool, ToolApprovalState } from '@common/types';
import { TOOL_GROUP_NAME_SEPARATOR } from '@common/tools';
⋮----
import { Select } from '@/components/common/Select';
import { InfoIcon } from '@/components/common/InfoIcon';
⋮----
type Props = {
  tool: McpTool;
  serverName: string;
  toolApprovals?: Record<string, ToolApprovalState>;
  onApprovalChange?: (toolId: string, approval: ToolApprovalState) => void;
};
⋮----
// Default to 'Always' if approvals are not being managed in this context
⋮----
const handleApprovalChange = (value: string) =>
⋮----
{/* Conditionally render the approval select only if onApprovalChange is provided */}

================
File: src/renderer/src/components/settings/AboutSettings.tsx
================
import { useTranslation } from 'react-i18next';
import { toast } from 'react-toastify';
import { SettingsData } from '@common/types';
⋮----
import { Button } from '@/components/common/Button';
import { Checkbox } from '@/components/common/Checkbox';
import { Section } from '@/components/common/Section';
import { useVersions } from '@/hooks/useVersions';
import { useApi } from '@/context/ApiContext';
⋮----
type Props = {
  settings: SettingsData;
  setSettings: (settings: SettingsData) => void;
};
⋮----
const openLogsDirectory = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleDownloadUpdate = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleTelemetryEnabledChange = (checked: boolean) =>
⋮----
label=
⋮----
onChange=
⋮----
<span>
⋮----
<Checkbox label=

================
File: src/renderer/src/components/settings/AiderSettings.tsx
================
import { useState } from 'react';
import { HiEye } from 'react-icons/hi';
import { Trans, useTranslation } from 'react-i18next';
import { SettingsData } from '@common/types';
⋮----
import { Button } from '@/components/common/Button';
import { Input } from '@/components/common/Input';
import { Section } from '@/components/common/Section';
import { TextArea } from '@/components/common/TextArea';
import { Checkbox } from '@/components/common/Checkbox';
import { CodeInline } from '@/components/common/CodeInline';
⋮----
type Props = {
  settings: SettingsData;
  setSettings: (settings: SettingsData) => void;
  initialShowEnvVars?: boolean;
};
⋮----
<Section title=
⋮----
label=
⋮----
setSettings({
                ...settings,
                aider: {
                  ...settings.aider,
                  autoCommits: checked,
                },
              });
⋮----
https://aider.chat/docs/config/options.html
⋮----
https://aider.chat/docs/config/dotenv.html

================
File: src/renderer/src/components/settings/GeneralSettings.tsx
================
import { useTranslation } from 'react-i18next';
import { Font, FONTS, SettingsData, StartupMode, SuggestionMode, Theme, THEMES } from '@common/types';
⋮----
import { Checkbox } from '../common/Checkbox';
import { RadioButton } from '../common/RadioButton';
import { Select, Option } from '../common/Select';
import { Section } from '../common/Section';
import { Slider } from '../common/Slider';
import { InfoIcon } from '../common/InfoIcon';
⋮----
import { LanguageSelector } from './LanguageSelector';
⋮----
type Props = {
  settings: SettingsData;
  setSettings: (settings: SettingsData) => void;
  onLanguageChange: (language: string) => void;
  onZoomChange: (zoomLevel: number) => void;
  onThemeChange: (themeName: Theme) => void;
  onFontChange: (fontName: Font) => void;
  onFontSizeChange: (fontSize: number) => void;
};
⋮----
const handleStartupModeChange = (mode: StartupMode) =>
⋮----
const handleStartupModeClick = (value: string) =>
⋮----
const handleZoomChange = (value: string) =>
⋮----
const handleNotificationsEnabledChange = (checked: boolean) =>
⋮----
const handleThemeChange = (value: string) =>
⋮----
const handleFontChange = (value: string) =>
⋮----
const handleFontSizeChange = (value: string) =>
⋮----
const handleSuggestionModeChange = (mode: SuggestionMode) =>
⋮----
const handleSuggestionModeClick = (value: string) =>
⋮----
const handleSuggestionDelayChange = (delay: number) =>
⋮----
const handleCommandConfirmationChange = (command: keyof typeof settings.promptBehavior.requireCommandConfirmation, checked: boolean) =>
⋮----
<Section title=
⋮----
<Select label=
⋮----
label=
⋮----
setSettings(
⋮----
onChange=
⋮----
{/* Vim key bindings */}
⋮----
<InfoIcon tooltip=
⋮----
<Checkbox label=

================
File: src/renderer/src/components/settings/LanguageSelector.tsx
================
import { ReactCountryFlag } from 'react-country-flag';
import { useTranslation } from 'react-i18next';
⋮----
import Select, { Option } from '../common/Select';
⋮----
import { SUPPORTED_LANGUAGES } from '@/i18n';
⋮----
type Props = {
  language: string;
  onChange: (language: string) => void;
  hideLabel?: boolean;
};
⋮----
export const LanguageSelector = (

================
File: src/renderer/src/components/settings/ServerSettings.tsx
================
import { ChangeEvent, useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { SettingsData, CloudflareTunnelStatus } from '@common/types';
import { clsx } from 'clsx';
import { BiCopy } from 'react-icons/bi';
⋮----
import { Input } from '../common/Input';
import { Section } from '../common/Section';
import { Button } from '../common/Button';
import { Checkbox } from '../common/Checkbox';
⋮----
import { useApi } from '@/context/ApiContext';
import { IconButton } from '@/components/common/IconButton';
⋮----
type Props = {
  settings: SettingsData;
  setSettings: (settings: SettingsData) => void;
};
⋮----
const loadTunnelStatus = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleServerToggle = async () =>
⋮----
// Start server with current credentials if basic auth is enabled
⋮----
// Stop server
⋮----
// Update settings to reflect the new server state
⋮----
// Handle failure (could add toast notification here)
⋮----
// Handle error (could add toast notification here)
⋮----
const handleBasicAuthEnabledChange = (checked: boolean) =>
⋮----
const handleUsernameChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handlePasswordChange = (e: ChangeEvent<HTMLInputElement>) =>
⋮----
const handleTunnelToggle = async () =>
⋮----
// Reload tunnel status
⋮----
// eslint-disable-next-line no-console
⋮----
const getButtonText = () =>
⋮----
const getTunnelButtonText = () =>
⋮----
<Section title=
⋮----
label=
⋮----
{/* Collapsible Authentication Inputs */}

================
File: src/renderer/src/components/settings/SettingsDialog.tsx
================
import { SettingsData, StartupMode } from '@common/types';
import { useEffect, useMemo, useState } from 'react';
import { isEqual } from 'lodash';
import { useTranslation } from 'react-i18next';
import { LlmProviderName } from '@common/agent';
⋮----
import { Settings } from '@/pages/Settings';
import { useSettings } from '@/context/SettingsContext';
import { ConfirmDialog } from '@/components/common/ConfirmDialog';
import { useApi } from '@/context/ApiContext';
⋮----
type Props = {
  onClose: () => void;
  initialTab?: number;
  initialAgentProfileId?: string;
  initialAgentProvider?: LlmProviderName;
};
⋮----
const handleCancel = () =>
⋮----
// Updated to use settings.mcpServers directly
⋮----
const handleSave = async () =>
⋮----
const handleLanguageChange = (language: string) =>
⋮----
const handleZoomChange = (zoomLevel: number) =>
⋮----
title=
⋮----
confirmButtonText=

================
File: src/renderer/src/components/terminal/Terminal.scss
================
.xterm-viewport {
  @apply scrollbar-thin scrollbar-track-bg-primary scrollbar-thumb-bg-secondary-light hover:scrollbar-thumb-bg-tertiary;
}

.xterm-screen {
  @apply px-3;
}

================
File: src/renderer/src/components/terminal/Terminal.tsx
================
import { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';
import { Terminal as XTerm } from '@xterm/xterm';
import { FitAddon } from '@xterm/addon-fit';
import { WebLinksAddon } from '@xterm/addon-web-links';
import { TerminalData, TerminalExitData } from '@common/types';
import { clsx } from 'clsx';
⋮----
import { useApi } from '@/context/ApiContext';
⋮----
export type TerminalRef = {
  focus: () => void;
  clear: () => void;
  resize: () => void;
  getOutput: () => string;
};
⋮----
type Props = {
  baseDir: string;
  visible: boolean;
  className?: string;
};
⋮----
// Initialize terminal
⋮----
// Handle terminal input
⋮----
// Handle terminal resize
⋮----
// Create terminal process
⋮----
const createTerminal = async () =>
⋮----
// Always create a new terminal for each Terminal component instance
⋮----
// Handle terminal input
⋮----
// Handle terminal resize
⋮----
// eslint-disable-next-line no-console
⋮----
// Handle terminal data
⋮----
const handleTerminalData = (data: TerminalData) =>
⋮----
const handleTerminalExit = (data: TerminalExitData) =>
⋮----
// Handle resize when visibility changes
⋮----
// Small delay to ensure the container is properly sized
⋮----
// Cleanup on unmount

================
File: src/renderer/src/components/terminal/TerminalView.tsx
================
import { useState, useRef, useEffect, forwardRef, useImperativeHandle } from 'react';
import { IoMdAdd, IoMdClose, IoMdRemove } from 'react-icons/io';
import { BiCopy } from 'react-icons/bi';
import { clsx } from 'clsx';
import { v4 as uuidv4 } from 'uuid';
import { useTranslation } from 'react-i18next';
⋮----
import { Terminal as TerminalComponent, TerminalRef } from '@/components/terminal/Terminal';
import { IconButton } from '@/components/common/IconButton';
⋮----
export type TerminalViewRef = {
  resize: () => void;
};
⋮----
type TerminalTab = {
  id: string;
  terminalId: string | null;
};
⋮----
type Props = {
  baseDir: string;
  visible: boolean;
  className?: string;
  onVisibilityChange: (visible: boolean) => void;
  onCopyOutput?: (output: string) => void;
};
⋮----
// Resize all terminal instances
⋮----
// Create a new terminal tab
const addTerminalTab = () =>
⋮----
// Close a terminal tab
const closeTerminalTab = (tabId: string) =>
⋮----
// If we're closing the active tab, activate the previous one
⋮----
// If we're closing the last tab, minimize the terminal
⋮----
// Focus the active terminal when it changes
⋮----
// Small delay to ensure terminal is rendered
⋮----
// Handle copying terminal output
const handleCopyOutput = () =>
⋮----
{/* Tab bar */}
⋮----
{/* Terminal content */}
⋮----
<div key=

================
File: src/renderer/src/components/usage/CostBreakdownChart.tsx
================
import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { UsageDataRow } from '@common/types';
⋮----
import { generateColorPalette, formatDateByGroup, GroupBy } from './utils';
⋮----
type CostChartDataPoint = {
  date: string;
  [projectKey: string]: string | number; // Dynamic project keys for stacked data
};
⋮----
[projectKey: string]: string | number; // Dynamic project keys for stacked data
⋮----
type Props = {
  data: UsageDataRow[];
  groupBy: GroupBy;
};
⋮----
// Process data for stacked bar chart (aggregate by day and project)
⋮----
// First pass: collect all projects and aggregate data
⋮----
// Convert to array format for Recharts
⋮----
// Generate consistent colors for projects
const projects = Array.from(projectSet).sort(); // Sort for consistency
⋮----
const formatCurrency = (value: number) =>
⋮----
// Limit legend items to prevent overcrowding
⋮----
<Bar key=
⋮----
{/* Render remaining projects without legend */}

================
File: src/renderer/src/components/usage/MessageBreakdownChart.tsx
================
import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { UsageDataRow } from '@common/types';
⋮----
import { generateColorPalette, formatDateByGroup, GroupBy } from './utils';
⋮----
type MessageChartDataPoint = {
  date: string;
  [projectKey: string]: string | number; // Dynamic project keys for stacked data
};
⋮----
[projectKey: string]: string | number; // Dynamic project keys for stacked data
⋮----
type Props = {
  data: UsageDataRow[];
  groupBy: GroupBy;
};
⋮----
// Process data for stacked bar chart (aggregate by day and project)
⋮----
// First pass: collect all projects and aggregate data
⋮----
dateMap.set(projectDisplayName, currentCount + 1); // Each row is one message
⋮----
// Convert to array format for Recharts
⋮----
// Generate consistent colors for projects
const projects = Array.from(projectSet).sort(); // Sort for consistency
⋮----
const formatCount = (value: number) =>
⋮----
// Limit legend items to prevent overcrowding
⋮----
<Bar key=
⋮----
{/* Render remaining projects without legend */}

================
File: src/renderer/src/components/usage/ModelUsageDistributionChart.tsx
================
import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from 'recharts';
import { UsageDataRow } from '@common/types';
⋮----
import { generateColorPalette } from './utils';
⋮----
type ModelDistributionDataPoint = {
  model: string;
  totalTokens: number;
  cost: number;
  percentage: number;
};
⋮----
type Props = {
  data: UsageDataRow[];
};
⋮----
// Process data for pie chart (aggregate by model)
⋮----
// First pass: aggregate data by model
⋮----
// Calculate total tokens for percentage calculation
⋮----
// Convert to array format for Recharts
⋮----
.sort((a, b) => b.totalTokens - a.totalTokens); // Sort by usage (descending)
⋮----
// Generate consistent colors for models
⋮----
const formatTokens = (value: number) =>
⋮----
const formatCurrency = (value: number) =>
⋮----
const formatPercentage = (value: number) =>
⋮----
<Cell key=
⋮----

⋮----
content=
⋮----
// Limit legend items to prevent overcrowding
⋮----
{/** @ts-expect-error: payload has model */}

================
File: src/renderer/src/components/usage/TokenUsageTrendChart.tsx
================
import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { UsageDataRow } from '@common/types';
⋮----
import { formatDateByGroup, GroupBy } from './utils';
⋮----
type ChartDataPoint = {
  date: string;
  inputTokens: number;
  outputTokens: number;
  totalTokens: number;
};
⋮----
type Props = {
  data: UsageDataRow[];
  groupBy: GroupBy;
};
⋮----
// Process data for trend chart (aggregate by day)
⋮----
const date = formatDateByGroup(row.timestamp, groupBy); // Get YYYY-MM-DD format
⋮----
const formatTokens = (value: number) =>

================
File: src/renderer/src/components/usage/UsageDashboard.tsx
================
import { useCallback, useEffect, useMemo, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { FaSync, FaTable, FaChartBar } from 'react-icons/fa';
import { CgSpinner } from 'react-icons/cg';
import { UsageDataRow } from '@common/types';
import { clsx } from 'clsx';
⋮----
import { Select } from '../common/Select';
import { ModalOverlayLayout } from '../common/ModalOverlayLayout';
⋮----
import { UsageTable } from './UsageTable';
import { TokenUsageTrendChart } from './TokenUsageTrendChart';
import { CostBreakdownChart } from './CostBreakdownChart';
import { MessageBreakdownChart } from './MessageBreakdownChart';
import { ModelUsageDistributionChart } from './ModelUsageDistributionChart';
import { GroupBy } from './utils';
⋮----
import { useApi } from '@/context/ApiContext';
import { DatePicker } from '@/components/common/DatePicker';
import { MultiSelect } from '@/components/common/MultiSelect';
import { IconButton } from '@/components/common/IconButton';
⋮----
type Props = {
  onClose: () => void;
};
⋮----
enum DatePeriod {
  All = 'all',
  ThisMonth = 'thisMonth',
  Today = 'today',
  Custom = 'custom',
}
⋮----
enum ViewTab {
  Table = 'table',
  Charts = 'charts',
}
⋮----
const handlePeriodChange = (period: DatePeriod) =>
⋮----
// This month
⋮----
const handleDateRangeChange = (update: [Date | null, Date | null]) =>
⋮----
// Treat empty selections as "all selected"
⋮----
const handleRefresh = () =>
⋮----
<ModalOverlayLayout title=
⋮----
label=
⋮----
tooltip=
⋮----
{/* Tab Navigation */}

================
File: src/renderer/src/components/usage/UsageTable.tsx
================
import { useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { UsageDataRow } from '@common/types';
⋮----
import { formatDateByGroup, GroupBy } from './utils';
⋮----
import { Column, FooterColumn, Table } from '@/components/common/Table';
⋮----
type Props = {
  data: UsageDataRow[];
  groupBy: GroupBy;
};

================
File: src/renderer/src/components/usage/utils.ts
================
// Generate a consistent color palette for charts
export const generateColorPalette = (count: number): string[] =>
⋮----
'#3b82f6', // blue
'#ef4444', // red
'#10b981', // green
'#f59e0b', // amber
'#8b5cf6', // purple
'#ec4899', // pink
'#06b6d4', // cyan
'#84cc16', // lime
'#f97316', // orange
'#6366f1', // indigo
⋮----
// Generate additional colors by varying hue
⋮----
const hue = (i * 137.508) % 360; // Golden angle approximation for good distribution
⋮----
export enum GroupBy {
  Year = 'year',
  Month = 'month',
  Day = 'day',
  Hour = 'hour',
}
⋮----
export const formatDateByGroup = (timestamp: string, groupBy: GroupBy): string =>

================
File: src/renderer/src/components/AgentModelSelector.tsx
================
import { forwardRef, useCallback, useMemo } from 'react';
import { useTranslation } from 'react-i18next';
import { AVAILABLE_PROVIDERS, getProviderModelId } from '@common/agent';
import { AgentProfile, Model, SettingsData } from '@common/types';
⋮----
import { ModelSelector, ModelSelectorRef } from './ModelSelector';
⋮----
import { useModelProviders } from '@/contexts/ModelProviderContext';
import { showErrorNotification } from '@/utils/notifications';
⋮----
type Props = {
  className?: string;
  settings: SettingsData | null;
  agentProfile: AgentProfile | undefined;
  saveSettings: (settings: SettingsData) => void;
};
⋮----
// Add the currently selected model if it's not in the known list (custom model)
⋮----
// Create a custom model object for the current model
⋮----
agentModels.unshift(customModel); // Add to the beginning for visibility

================
File: src/renderer/src/components/AutocompletionInput.tsx
================
import { useState, useRef, useEffect, ReactNode } from 'react';
import { useTranslation } from 'react-i18next';
import { createPortal } from 'react-dom';
import { clsx } from 'clsx';
⋮----
type Props = {
  value: string;
  suggestions: string[];
  onChange: (value: string, isFromSuggestion: boolean) => void;
  placeholder?: string;
  className?: string;
  inputClassName?: string;
  rightElement?: ReactNode;
  autoFocus?: boolean;
  onPaste?: (pastedText: string) => void;
  onSubmit?: () => void;
};
⋮----
const handleKeyDown = (e: React.KeyboardEvent) =>
⋮----
zIndex: 1000, // Ensure it's above other elements
⋮----
className=
⋮----
onChange=
⋮----
placeholder={placeholder ? t(placeholder) : undefined}
        autoFocus={autoFocus}
onPaste=

================
File: src/renderer/src/components/CostInfo.tsx
================
import { TokensInfoData, Mode } from '@common/types';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { IoClose, IoChevronDown, IoChevronUp } from 'react-icons/io5';
import { MdOutlineRefresh } from 'react-icons/md';
⋮----
import { StyledTooltip } from '@/components/common/StyledTooltip';
import { formatHumanReadable } from '@/utils/string-utils';
⋮----
type Props = {
  tokensInfo?: TokensInfoData | null;
  aiderTotalCost: number;
  clearMessages?: () => void;
  refreshRepoMap?: () => void;
  restartProject?: () => void;
  maxInputTokens?: number;
  mode: Mode;
};
⋮----
const filesTotalTokens = tokensInfo?.files ? Object.values(tokensInfo.files).reduce((sum, file)

================
File: src/renderer/src/components/ModelSelector.tsx
================
import { forwardRef, useCallback, useEffect, useImperativeHandle, useRef, useState, KeyboardEvent, MouseEvent, useOptimistic, startTransition } from 'react';
import { useTranslation } from 'react-i18next';
import { MdClose, MdKeyboardArrowUp, MdKeyboardReturn } from 'react-icons/md';
import { useDebounce } from '@reactuses/core';
import { twMerge } from 'tailwind-merge';
import { Model, ProviderProfile } from '@common/types';
import { getProviderModelId } from '@common/agent';
⋮----
import { useClickOutside } from '@/hooks/useClickOutside';
import { useBooleanState } from '@/hooks/useBooleanState';
⋮----
export type ModelSelectorRef = {
  open: (model?: string) => void;
};
⋮----
type Props = {
  className?: string;
  models: Model[];
  selectedModelId?: string;
  onChange: (model: Model) => void;
  preferredModelIds: string[];
  removePreferredModel: (modelId: string) => void;
  providers: ProviderProfile[];
};
⋮----
// Group filtered models by providerId
⋮----
const getProviderName = (providerId: string) =>
⋮----
const onModelSelected = (model: Model) =>
⋮----
const onModelSelectorSearchInputKeyDown = (e: KeyboardEvent<HTMLInputElement>) =>
⋮----
const handleRemovePreferredModel = (e: MouseEvent) =>
⋮----
placeholder=
⋮----
onChange=

================
File: src/renderer/src/components/SessionDialog.tsx
================
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
⋮----
import { BaseDialog } from './common/BaseDialog';
import { Button } from './common/Button';
import { Checkbox } from './common/Checkbox';
import { Input } from './common/Input';
⋮----
type Props = {
  onClose: () => void;
  onSave: (name: string, loadMessages: boolean, loadFiles: boolean) => void;
  initialName?: string;
  initialLoadMessages?: boolean;
  initialLoadFiles?: boolean;
  isEdit?: boolean;
};
⋮----
const handleSave = () =>
⋮----

⋮----
<Input label=
⋮----
<h3 className="text-sm font-medium mb-2">
⋮----
<Checkbox label=

================
File: src/renderer/src/components/SessionsPopup.tsx
================
import { SessionData } from '@common/types';
import { KeyboardEvent, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { IoDocumentTextOutline, IoListOutline, IoTrashOutline, IoAddOutline, IoSaveOutline, IoClose } from 'react-icons/io5';
import { LuImageDown } from 'react-icons/lu';
import { RiChatDownloadLine } from 'react-icons/ri';
⋮----
import { ConfirmDialog } from '@/components/common/ConfirmDialog';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
type Props = {
  sessions: SessionData[];
  onLoadSessionMessages: (name: string) => void;
  onLoadSessionFiles: (name: string) => void;
  onSaveSession: (name: string) => void;
  onDeleteSession: (name: string) => void;
  onExportSessionToMarkdown: () => void;
  onExportSessionToImage: () => void;
};
⋮----
const handleDeleteSession = () =>
⋮----
const handleSaveNewSession = () =>
⋮----
const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) =>
⋮----
data-tooltip-content=
⋮----
onChange=
⋮----
placeholder=
⋮----
setNewSessionName('');
⋮----
title=

================
File: src/renderer/src/components/TelemetryInfoDialog.tsx
================
import { useState } from 'react';
import { Trans, useTranslation } from 'react-i18next';
⋮----
import { BaseDialog } from '@/components/common/BaseDialog';
import { Button } from '@/components/common/Button';
import { Checkbox } from '@/components/common/Checkbox';
import { useSettings } from '@/context/SettingsContext';
⋮----
const handleOk = async () =>
⋮----
title=
⋮----

================
File: src/renderer/src/context/ApiContext.tsx
================
import { createContext, useMemo, ReactNode, useContext } from 'react';
import { ApplicationAPI } from '@common/api';
⋮----
import { BrowserApi } from '@/api/browser-api';
⋮----
export const ApiProvider = (
⋮----
export const useApi = (): ApplicationAPI =>

================
File: src/renderer/src/context/ContextMenuContext.tsx
================
import { createContext, ReactNode, useCallback, useContext, useEffect, useRef, useState } from 'react';
import { useTranslation } from 'react-i18next';
⋮----
import { useClickOutside } from '@/hooks/useClickOutside';
import { useApi } from '@/context/ApiContext';
⋮----
type ContextMenuContextType = {
  showMenu: (x: number, y: number, options: MenuOption[], targetElement?: Element | null) => void;
  hideMenu: () => void;
};
⋮----
export type MenuOption = {
  label: string;
  action: () => void;
  disabled?: boolean;
};
⋮----
type MenuState = {
  x: number;
  y: number;
  isVisible: boolean;
  options: MenuOption[];
  targetElement?: Element | null;
};
⋮----
type Props = {
  children: ReactNode;
};
⋮----
export const useContextMenu = () =>
⋮----
const handleContextMenu = (params: Electron.ContextMenuParams) =>
⋮----
// Capture the target element when context menu is triggered
⋮----
// Always show copy option
⋮----
// If there's selected text, copy that
⋮----
// Otherwise, use the stored target element
⋮----
// Handle input elements
⋮----
// Handle other elements with text content

================
File: src/renderer/src/context/ProjectSettingsContext.tsx
================
import { ProjectSettings } from '@common/types';
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { DEFAULT_AGENT_PROFILE } from '@common/agent';
⋮----
import { useSettings } from '@/context/SettingsContext';
import { useApi } from '@/context/ApiContext';
⋮----
type ProjectSettingsContextType = {
  projectSettings: ProjectSettings | null;
  saveProjectSettings: (settings: Partial<ProjectSettings>) => Promise<void>;
};
⋮----
type ProjectSettingsProviderProps = {
  baseDir: string;
  children: ReactNode;
};
⋮----
export const ProjectSettingsProvider = (
⋮----
const saveProjectSettings = async (updated: Partial<ProjectSettings>) =>
⋮----
// Optimistically update the state
⋮----
setProjectSettings(updatedSettings); // Ensure state is in sync with backend
⋮----
// eslint-disable-next-line no-console
⋮----
const loadSettings = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
// check if active agent profile still exists in settings
⋮----
// eslint-disable-next-line
⋮----
export const useProjectSettings = () =>

================
File: src/renderer/src/context/SettingsContext.tsx
================
import { Font, SettingsData, Theme } from '@common/types';
import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
⋮----
import { useApi } from '@/context/ApiContext';
⋮----
type SettingsContextType = {
  settings: SettingsData | null;
  saveSettings: (settings: SettingsData) => Promise<void>;
  theme: Theme | null;
  setTheme: (theme: Theme) => void;
  font: Font | null;
  setFont: (font: Font) => void;
  fontSize: number | null;
  setFontSize: (fontSize: number) => void;
};
⋮----
export const SettingsProvider = (
⋮----
const loadSettings = async () =>
⋮----
const saveSettings = async (updated: SettingsData) =>
⋮----
// eslint-disable-next-line no-console
⋮----
export const useSettings = () =>

================
File: src/renderer/src/contexts/ModelProviderContext.tsx
================
import React, { createContext, ReactNode, useCallback, useContext, useEffect, useState, useOptimistic, startTransition } from 'react';
import { Model, ProviderProfile } from '@common/types';
⋮----
import { useApi } from '@/context/ApiContext';
⋮----
type ModelProviderContextType = {
  refresh: () => void;
  models: Model[];
  providers: ProviderProfile[];
  saveProvider: (profile: ProviderProfile) => Promise<void>;
  deleteProvider: (profileId: string) => Promise<void>;
  upsertModel: (providerId: string, modelId: string, model: Model) => Promise<void>;
  deleteModel: (providerId: string, modelId: string) => Promise<void>;
  modelsLoading: boolean;
  providersLoading: boolean;
  errors: Record<string, string>;
};
⋮----
export const ModelProviderProvider: React.FC<
⋮----
// eslint-disable-next-line no-console
⋮----
// eslint-disable-next-line no-console
⋮----
export const useModelProviders = (): ModelProviderContextType =>

================
File: src/renderer/src/hooks/useBooleanState.ts
================
import { useState, useCallback } from 'react';
⋮----
export const useBooleanState = (initialState = false) =>

================
File: src/renderer/src/hooks/useClickOutside.ts
================
import { useEffect, RefObject } from 'react';
⋮----
type RefType = RefObject<HTMLElement | null>;
⋮----
export const useClickOutside = (refs: RefType | RefType[], handler: (event: MouseEvent) => void) =>
⋮----
const listener = (event: MouseEvent) =>
⋮----
// Check if the click is outside all provided refs
⋮----
// Ignore clicks on null refs or if the ref doesn't contain the target

================
File: src/renderer/src/hooks/useCustomCommands.ts
================
import { CustomCommand } from '@common/types';
import { useEffect, useState } from 'react';
⋮----
import { useApi } from '@/context/ApiContext';
⋮----
export const useCustomCommands = (baseDir: string) =>
⋮----
// Load initial commands
⋮----
// Listen for commands updates

================
File: src/renderer/src/hooks/useEffectiveEnvironmentVariable.ts
================
import { EnvironmentVariable } from '@common/types';
import { useEffect, useState } from 'react';
⋮----
import { useApi } from '@/context/ApiContext';
⋮----
type UseEffectiveEnvironmentVariableResult = {
  environmentVariable: EnvironmentVariable | null;
  loading: boolean;
  error: string | null;
};
⋮----
export const useEffectiveEnvironmentVariable = (key: string, baseDir?: string): UseEffectiveEnvironmentVariableResult =>
⋮----
const fetchEnvironmentVariable = async () =>

================
File: src/renderer/src/hooks/useLmStudioModels.ts
================
import { useEffect, useState } from 'react';
import axios from 'axios';
⋮----
export const useLmStudioModels = (baseUrl: string) =>
⋮----
const loadModels = async () =>
⋮----
const normalized = baseUrl.replace(/\/+$/g, ''); // Remove all trailing slashes

================
File: src/renderer/src/hooks/useOllamaModels.ts
================
import { useEffect, useState } from 'react';
import axios from 'axios';
⋮----
export const useOllamaModels = (baseUrl: string) =>
⋮----
const loadModels = async () =>
⋮----
let normalized = baseUrl.replace(/\/+$/, ''); // Remove all trailing slashes

================
File: src/renderer/src/hooks/useOpenRouterModels.ts
================
import { useEffect, useState } from 'react';
⋮----
interface OpenRouterModel {
  id: string;
  // others not needed
}
⋮----
// others not needed
⋮----
interface OpenRouterResponse {
  data: OpenRouterModel[];
}
⋮----
export const useOpenRouterModels = (apiKey: string) =>
⋮----
const fetchModels = async () =>
⋮----
// eslint-disable-next-line no-console

================
File: src/renderer/src/hooks/useOS.ts
================
import { OS } from '@common/types';
import { useEffect, useState } from 'react';
⋮----
import { useApi } from '@/context/ApiContext';
⋮----
export const useOS = (): OS | null =>
⋮----
const fetchOS = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
setOS(null); // Set to null or a default/unknown state in case of error

================
File: src/renderer/src/hooks/useParsedContent.ts
================
import { useMemo } from 'react';
⋮----
import { parseMessageContent } from '@/components/message/utils';
⋮----
export const useParsedContent = (
  baseDir: string,
  content: string | null | undefined,
  allFiles: string[],
  renderMarkdown?: boolean,
  renderThinking?: boolean,
) =>
⋮----
// we use allFiles.length to re-evaluate if the array content might have changed
// even if the array reference itself hasn't.
// eslint-disable-next-line react-hooks/exhaustive-deps

================
File: src/renderer/src/hooks/useRequestyModels.ts
================
import { useEffect, useState } from 'react';
⋮----
interface OpenRouterModel {
  id: string;
  // others not needed
}
⋮----
// others not needed
⋮----
interface OpenRouterResponse {
  data: OpenRouterModel[];
}
⋮----
export const useRequestyModels = (apiKey: string) =>
⋮----
const fetchModels = async () =>
⋮----
// eslint-disable-next-line no-console

================
File: src/renderer/src/hooks/useResponsive.ts
================
import { useState, useEffect } from 'react';
import { debounce } from 'lodash';
⋮----
export const useResponsive = () =>
⋮----
const checkScreenSize = () =>

================
File: src/renderer/src/hooks/useSearchText.tsx
================
import { useState, useRef, useEffect, useCallback, useLayoutEffect } from 'react';
import { useTranslation } from 'react-i18next';
import Mark from 'mark.js';
import { IoIosArrowUp, IoIosArrowDown, IoMdClose } from 'react-icons/io';
import { clsx } from 'clsx';
⋮----
import { Input } from '@/components/common/Input';
import { IconButton } from '@/components/common/IconButton';
import { StyledTooltip } from '@/components/common/StyledTooltip';
⋮----
// Remove highlight from previous element
⋮----
const handleKeyDown = (event: KeyboardEvent) =>
⋮----
// Clear previous search when opening
⋮----
markInstance.current.unmark(); // Remove previous highlights
⋮----
setCurrentElementIndex(-1); // Reset index
⋮----
navigateToElement(0); // Navigate to the first result
⋮----
// eslint-disable-next-line
⋮----
placeholder=
⋮----
onChange=

================
File: src/renderer/src/hooks/useVersions.ts
================
import { VersionsInfo } from '@common/types';
import { useCallback, useEffect, useState } from 'react';
⋮----
import { useApi } from '@/context/ApiContext';
⋮----
export const useVersions = () =>
⋮----
// eslint-disable-next-line no-console
⋮----
// Optionally set versions to indicate an error or keep them null

================
File: src/renderer/src/i18n/index.ts
================
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';
// Import your translation files
import en from '@common/locales/en.json';
import zh from '@common/locales/zh.json';
⋮----
// eslint-disable-next-line import/no-named-as-default-member

================
File: src/renderer/src/icons/AnthropicIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const AnthropicIcon = ({ width = 64, height = 64, className }: Props) => (
  <div
    aria-label="Anthropic"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundColor: 'rgb(241, 240, 232)',
      color: 'rgb(20, 20, 19)',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg fill="currentColor" fillRule="evenodd" viewBox="0 0 24 24" width={width * 0.75} height={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>Anthropic</title>
      <path d="M13.827 3.52h3.603L24 20h-3.603l-6.57-16.48zm-7.258 0h3.767L16.906 20h-3.674l-1.343-3.461H5.017l-1.344 3.46H0L6.57 3.522zm4.132 9.959L8.453 7.687 6.205 13.48H10.7z"></path>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/AzureIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};

================
File: src/renderer/src/icons/BedrockIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const BedrockIcon = ({ width = 64, height = 64, className }: Props) => (
  <div
    aria-label="Bedrock"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundImage: 'linear-gradient(45deg, rgb(154, 216, 248), rgb(61, 143, 255), rgb(99, 80, 251))',
      color: 'rgb(255, 255, 255)',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg fill="currentColor" fillRule="evenodd" viewBox="0 0 24 24" width={width * 0.75} height={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>Bedrock</title>
      <path d="M13.05 15.513h3.08c.214 0 .389.177.389.394v1.82a1.704 1.704 0 011.296 1.661c0 .943-.755 1.708-1.685 1.708-.931 0-1.686-.765-1.686-1.708 0-.807.554-1.484 1.297-1.662v-1.425h-2.69v4.663a.395.395 0 01-.188.338l-2.69 1.641a.385.385 0 01-.405-.002l-4.926-3.086a.395.395 0 01-.185-.336V16.3L2.196 14.87A.395.395 0 012 14.555L2 14.528V9.406c0-.14.073-.27.192-.34l2.465-1.462V4.448c0-.129.062-.249.165-.322l.021-.014L9.77 1.058a.385.385 0 01.407 0l2.69 1.675a.395.395 0 01.185.336V7.6h3.856V5.683a1.704 1.704 0 01-1.296-1.662c0-.943.755-1.708 1.685-1.708.931 0 1.685.765 1.685 1.708 0 .807-.553 1.484-1.296 1.662v2.311a.391.391 0 01-.389.394h-4.245v1.806h6.624a1.69 1.69 0 011.64-1.313c.93 0 1.685.764 1.685 1.707 0 .943-.754 1.708-1.685 1.708a1.69 1.69 0 01-1.64-1.314H13.05v1.937h4.953l.915 1.18a1.66 1.66 0 01.84-.227c.931 0 1.685.764 1.685 1.707 0 .943-.754 1.708-1.685 1.708-.93 0-1.685-.765-1.685-1.708 0-.346.102-.668.276-.937l-.724-.935H13.05v1.806zM9.973 1.856L7.93 3.122V6.09h-.778V3.604L5.435 4.669v2.945l2.11 1.36L9.712 7.61V5.334h.778V7.83c0 .136-.07.263-.184.335L7.963 9.638v2.081l1.422 1.009-.446.646-1.406-.998-1.53 1.005-.423-.66 1.605-1.055v-1.99L5.038 8.29l-2.26 1.34v1.676l1.972-1.189.398.677-2.37 1.429V14.3l2.166 1.258 2.27-1.368.397.677-2.176 1.311V19.3l1.876 1.175 2.365-1.426.398.678-2.017 1.216 1.918 1.201 2.298-1.403v-5.78l-4.758 2.893-.4-.675 5.158-3.136V3.289L9.972 1.856zM16.13 18.47a.913.913 0 00-.908.92c0 .507.406.918.908.918a.913.913 0 00.907-.919.913.913 0 00-.907-.92zm3.63-3.81a.913.913 0 00-.908.92c0 .508.406.92.907.92a.913.913 0 00.908-.92.913.913 0 00-.908-.92zm1.555-4.99a.913.913 0 00-.908.92c0 .507.407.918.908.918a.913.913 0 00.907-.919.913.913 0 00-.907-.92zM17.296 3.1a.913.913 0 00-.907.92c0 .508.406.92.907.92a.913.913 0 00.908-.92.913.913 0 00-.908-.92z"></path>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/CerebrasIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};

================
File: src/renderer/src/icons/DeepseekIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const DeepseekIcon = ({ width = 48, height = 48, className }: Props) => (
  <div
    aria-label="DeepSeek"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundColor: 'rgb(77, 107, 254)',
      color: 'white',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg fill="currentColor" fillRule="evenodd" viewBox="0 0 24 24" width={width * 0.75} height={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>DeepSeek</title>
      <path d="M23.748 4.482c-.254-.124-.364.113-.512.234-.051.039-.094.09-.137.136-.372.397-.806.657-1.373.626-.829-.046-1.537.214-2.163.848-.133-.782-.575-1.248-1.247-1.548-.352-.156-.708-.311-.955-.65-.172-.241-.219-.51-.305-.774-.055-.16-.11-.323-.293-.35-.2-.031-.278.136-.356.276-.313.572-.434 1.202-.422 1.84.027 1.436.633 2.58 1.838 3.393.137.093.172.187.129.323-.082.28-.18.552-.266.833-.055.179-.137.217-.329.14a5.526 5.526 0 01-1.736-1.18c-.857-.828-1.631-1.742-2.597-2.458a11.365 11.365 0 00-.689-.471c-.985-.957.13-1.743.388-1.836.27-.098.093-.432-.779-.428-.872.004-1.67.295-2.687.684a3.055 3.055 0 01-.465.137 9.597 9.597 0 00-2.883-.102c-1.885.21-3.39 1.102-4.497 2.623C.082 8.606-.231 10.684.152 12.85c.403 2.284 1.569 4.175 3.36 5.653 1.858 1.533 3.997 2.284 6.438 2.14 1.482-.085 3.133-.284 4.994-1.86.47.234.962.327 1.78.397.63.059 1.236-.03 1.705-.128.735-.156.684-.837.419-.961-2.155-1.004-1.682-.595-2.113-.926 1.096-1.296 2.746-2.642 3.392-7.003.05-.347.007-.565 0-.845-.004-.17.035-.237.23-.256a4.173 4.173 0 001.545-.475c1.396-.763 1.96-2.015 2.093-3.517.02-.23-.004-.467-.247-.588zM11.581 18c-2.089-1.642-3.102-2.183-3.52-2.16-.392.024-.321.471-.235.763.09.288.207.486.371.739.114.167.192.416-.113.603-.673.416-1.842-.14-1.897-.167-1.361-.802-2.5-1.86-3.301-3.307-.774-1.393-1.224-2.887-1.298-4.482-.02-.386.093-.522.477-.592a4.696 4.696 0 011.529-.039c2.132.312 3.946 1.265 5.468 2.774.868.86 1.525 1.887 2.202 2.891.72 1.066 1.494 2.082 2.48 2.914.348.292.625.514.891.677-.802.09-2.14.11-3.054-.614zm1-6.44a.306.306 0 01.415-.287.302.302 0 01.2.288.306.306 0 01-.31.307.303.303 0 01-.304-.308zm3.11 1.596c-.2.081-.399.151-.59.16a1.245 1.245 0 01-.798-.254c-.274-.23-.47-.358-.552-.758a1.73 1.73 0 01.016-.588c.07-.327-.008-.537-.239-.727-.187-.156-.426-.199-.688-.199a.559.559 0 01-.254-.078c-.11-.054-.2-.19-.114-.358.028-.054.16-.186.192-.21.356-.202.767-.136 1.146.016.352.144.618.408 1.001.782.391.451.462.576.685.914.176.265.336.537.445.848.067.195-.019.354-.25.452z"></path>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/GeminiIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const GeminiIcon = ({ width = 64, height = 64, className }: Props) => (
  <div
    aria-label="Gemini"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundColor: 'rgb(255, 255, 255)',
      color: 'rgb(255, 255, 255)',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg height={width * 0.75} viewBox="0 0 24 24" width={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>Gemini</title>
      <path
        d="M20.616 10.835a14.147 14.147 0 01-4.45-3.001 14.111 14.111 0 01-3.678-6.452.503.503 0 00-.975 0 14.134 14.134 0 01-3.679 6.452 14.155 14.155 0 01-4.45 3.001c-.65.28-1.318.505-2.002.678a.502.502 0 000 .975c.684.172 1.35.397 2.002.677a14.147 14.147 0 014.45 3.001 14.112 14.112 0 013.679 6.453.502.502 0 00.975 0c.172-.685.397-1.351.677-2.003a14.145 14.145 0 013.001-4.45 14.113 14.113 0 016.453-3.678.503.503 0 000-.975 13.245 13.245 0 01-2.003-.678z"
        fill="#3186FF"
      ></path>
      <path
        d="M20.616 10.835a14.147 14.147 0 01-4.45-3.001 14.111 14.111 0 01-3.678-6.452.503.503 0 00-.975 0 14.134 14.134 0 01-3.679 6.452 14.155 14.155 0 01-4.45 3.001c-.65.28-1.318.505-2.002.678a.502.502 0 000 .975c.684.172 1.35.397 2.002.677a14.147 14.147 0 014.45 3.001 14.112 14.112 0 013.679 6.453.502.502 0 00.975 0c.172-.685.397-1.351.677-2.003a14.145 14.145 0 013.001-4.45 14.113 14.113 0 016.453-3.678.503.503 0 000-.975 13.245 13.245 0 01-2.003-.678z"
        fill="url(#lobe-icons-gemini-fill-0)"
      ></path>
      <path
        d="M20.616 10.835a14.147 14.147 0 01-4.45-3.001 14.111 14.111 0 01-3.678-6.452.503.503 0 00-.975 0 14.134 14.134 0 01-3.679 6.452 14.155 14.155 0 01-4.45 3.001c-.65.28-1.318.505-2.002.678a.502.502 0 000 .975c.684.172 1.35.397 2.002.677a14.147 14.147 0 014.45 3.001 14.112 14.112 0 013.679 6.453.502.502 0 00.975 0c.172-.685.397-1.351.677-2.003a14.145 14.145 0 013.001-4.45 14.113 14.113 0 016.453-3.678.503.503 0 000-.975 13.245 13.245 0 01-2.003-.678z"
        fill="url(#lobe-icons-gemini-fill-1)"
      ></path>
      <path
        d="M20.616 10.835a14.147 14.147 0 01-4.45-3.001 14.111 14.111 0 01-3.678-6.452.503.503 0 00-.975 0 14.134 14.134 0 01-3.679 6.452 14.155 14.155 0 01-4.45 3.001c-.65.28-1.318.505-2.002.678a.502.502 0 000 .975c.684.172 1.35.397 2.002.677a14.147 14.147 0 014.45 3.001 14.112 14.112 0 013.679 6.453.502.502 0 00.975 0c.172-.685.397-1.351.677-2.003a14.145 14.145 0 013.001-4.45 14.113 14.113 0 016.453-3.678.503.503 0 000-.975 13.245 13.245 0 01-2.003-.678z"
        fill="url(#lobe-icons-gemini-fill-2)"
      ></path>
      <defs>
        <linearGradient gradientUnits="userSpaceOnUse" id="lobe-icons-gemini-fill-0" x1="7" x2="11" y1="15.5" y2="12">
          <stop stopColor="#08B962"></stop>
          <stop offset="1" stopColor="#08B962" stopOpacity="0"></stop>
        </linearGradient>
        <linearGradient gradientUnits="userSpaceOnUse" id="lobe-icons-gemini-fill-1" x1="8" x2="11.5" y1="5.5" y2="11">
          <stop stopColor="#F94543"></stop>
          <stop offset="1" stopColor="#F94543" stopOpacity="0"></stop>
        </linearGradient>
        <linearGradient gradientUnits="userSpaceOnUse" id="lobe-icons-gemini-fill-2" x1="3.5" x2="17.5" y1="13.5" y2="12">
          <stop stopColor="#FABC12"></stop>
          <stop offset=".46" stopColor="#FABC12" stopOpacity="0"></stop>
        </linearGradient>
      </defs>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/GroqIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const GroqIcon = ({ width = 64, height = 64, className }: Props) => (
  <div
    aria-label="Groq"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundColor: 'rgb(245, 80, 54)',
      color: 'rgb(255, 255, 255)',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg fill="currentColor" fillRule="evenodd" viewBox="0 0 24 24" width={width * 0.75} height={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>Groq</title>
      <path d="M12.036 2c-3.853-.035-7 3-7.036 6.781-.035 3.782 3.055 6.872 6.908 6.907h2.42v-2.566h-2.292c-2.407.028-4.38-1.866-4.408-4.23-.029-2.362 1.901-4.298 4.308-4.326h.1c2.407 0 4.358 1.915 4.365 4.278v6.305c0 2.342-1.944 4.25-4.323 4.279a4.375 4.375 0 01-3.033-1.252l-1.851 1.818A7 7 0 0012.029 22h.092c3.803-.056 6.858-3.083 6.879-6.816v-6.5C18.907 4.963 15.817 2 12.036 2z"></path>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/index.ts
================


================
File: src/renderer/src/icons/LmStudioIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const LmStudioIcon = ({ width = 64, height = 64, className }: Props) => (
  <div
    aria-label="LM Studio"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundImage: 'linear-gradient(135deg, rgb(108, 120, 239), rgb(79, 20, 190))',
      color: 'rgb(255, 255, 255)',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg fill="currentColor" fillRule="evenodd" viewBox="0 0 24 24" width={width * 0.75} height={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>LM Studio</title>
      <path
        d="M2.84 2a1.273 1.273 0 100 2.547h14.107a1.273 1.273 0 100-2.547H2.84zM7.935 5.33a1.273 1.273 0 000 2.548H22.04a1.274 1.274 0 000-2.547H7.935zM3.624 9.935c0-.704.57-1.274 1.274-1.274h14.106a1.274 1.274 0 010 2.547H4.898c-.703 0-1.274-.57-1.274-1.273zM1.273 12.188a1.273 1.273 0 100 2.547H15.38a1.274 1.274 0 000-2.547H1.273zM3.624 16.792c0-.704.57-1.274 1.274-1.274h14.106a1.273 1.273 0 110 2.547H4.898c-.703 0-1.274-.57-1.274-1.273zM13.029 18.849a1.273 1.273 0 100 2.547h9.698a1.273 1.273 0 100-2.547h-9.698z"
        fillOpacity=".3"
      ></path>
      <path d="M2.84 2a1.273 1.273 0 100 2.547h10.287a1.274 1.274 0 000-2.547H2.84zM7.935 5.33a1.273 1.273 0 000 2.548H18.22a1.274 1.274 0 000-2.547H7.935zM3.624 9.935c0-.704.57-1.274 1.274-1.274h10.286a1.273 1.273 0 010 2.547H4.898c-.703 0-1.274-.57-1.274-1.273zM1.273 12.188a1.273 1.273 0 100 2.547H11.56a1.274 1.274 0 000-2.547H1.273zM3.624 16.792c0-.704.57-1.274 1.274-1.274h10.286a1.273 1.273 0 110 2.547H4.898c-.703 0-1.274-.57-1.274-1.273zM13.029 18.849a1.273 1.273 0 100 2.547h5.78a1.273 1.273 0 100-2.547h-5.78z"></path>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/OllamaIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const OllamaIcon = ({ width = 64, height = 64, className }: Props) => (
  <div
    aria-label="Ollama"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundColor: 'rgb(255, 255, 255)',
      color: 'rgb(0, 0, 0)',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg fill="currentColor" fillRule="evenodd" viewBox="0 0 24 24" width={width * 0.75} height={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>Ollama</title>
      <path d="M7.905 1.09c.216.085.411.225.588.41.295.306.544.744.734 1.263.191.522.315 1.1.362 1.68a5.054 5.054 0 012.049-.636l.051-.004c.87-.07 1.73.087 2.48.474.101.053.2.11.297.17.05-.569.172-1.134.36-1.644.19-.52.439-.957.733-1.264a1.67 1.67 0 01.589-.41c.257-.1.53-.118.796-.042.401.114.745.368 1.016.737.248.337.434.769.561 1.287.23.934.27 2.163.115 3.645l.053.04.026.019c.757.576 1.284 1.397 1.563 2.35.435 1.487.216 3.155-.534 4.088l-.018.021.002.003c.417.762.67 1.567.724 2.4l.002.03c.064 1.065-.2 2.137-.814 3.19l-.007.01.01.024c.472 1.157.62 2.322.438 3.486l-.006.039a.651.651 0 01-.747.536.648.648 0 01-.54-.742c.167-1.033.01-2.069-.48-3.123a.643.643 0 01.04-.617l.004-.006c.604-.924.854-1.83.8-2.72-.046-.779-.325-1.544-.8-2.273a.644.644 0 01.18-.886l.009-.006c.243-.159.467-.565.58-1.12a4.229 4.229 0 00-.095-1.974c-.205-.7-.58-1.284-1.105-1.683-.595-.454-1.383-.673-2.38-.61a.653.653 0 01-.632-.371c-.314-.665-.772-1.141-1.343-1.436a3.288 3.288 0 00-1.772-.332c-1.245.099-2.343.801-2.67 1.686a.652.652 0 01-.61.425c-1.067.002-1.893.252-2.497.703-.522.39-.878.935-1.066 1.588a4.07 4.07 0 00-.068 1.886c.112.558.331 1.02.582 1.269l.008.007c.212.207.257.53.109.785-.36.622-.629 1.549-.673 2.44-.05 1.018.186 1.902.719 2.536l.016.019a.643.643 0 01.095.69c-.576 1.236-.753 2.252-.562 3.052a.652.652 0 01-1.269.298c-.243-1.018-.078-2.184.473-3.498l.014-.035-.008-.012a4.339 4.339 0 01-.598-1.309l-.005-.019a5.764 5.764 0 01-.177-1.785c.044-.91.278-1.842.622-2.59l.012-.026-.002-.002c-.293-.418-.51-.953-.63-1.545l-.005-.024a5.352 5.352 0 01.093-2.49c.262-.915.777-1.701 1.536-2.269.06-.045.123-.09.186-.132-.159-1.493-.119-2.73.112-3.67.127-.518.314-.95.562-1.287.27-.368.614-.622 1.015-.737.266-.076.54-.059.797.042zm4.116 9.09c.936 0 1.8.313 2.446.855.63.527 1.005 1.235 1.005 1.94 0 .888-.406 1.58-1.133 2.022-.62.375-1.451.557-2.403.557-1.009 0-1.871-.259-2.493-.734-.617-.47-.963-1.13-.963-1.845 0-.707.398-1.417 1.056-1.946.668-.537 1.55-.849 2.485-.849zm0 .896a3.07 3.07 0 00-1.916.65c-.461.37-.722.835-.722 1.25 0 .428.21.829.61 1.134.455.347 1.124.548 1.943.548.799 0 1.473-.147 1.932-.426.463-.28.7-.686.7-1.257 0-.423-.246-.89-.683-1.256-.484-.405-1.14-.643-1.864-.643zm.662 1.21l.004.004c.12.151.095.37-.056.49l-.292.23v.446a.375.375 0 01-.376.373.375.375 0 01-.376-.373v-.46l-.271-.218a.347.347 0 01-.052-.49.353.353 0 01.494-.051l.215.172.22-.174a.353.353 0 01.49.051zm-5.04-1.919c.478 0 .867.39.867.871a.87.87 0 01-.868.871.87.87 0 01-.867-.87.87.87 0 01.867-.872zm8.706 0c.48 0 .868.39.868.871a.87.87 0 01-.868.871.87.87 0 01-.867-.87.87.87 0 01.867-.872zM7.44 2.3l-.003.002a.659.659 0 00-.285.238l-.005.006c-.138.189-.258.467-.348.832-.17.692-.216 1.631-.124 2.782.43-.128.899-.208 1.404-.237l.01-.001.019-.034c.046-.082.095-.161.148-.239.123-.771.022-1.692-.253-2.444-.134-.364-.297-.65-.453-.813a.628.628 0 00-.107-.09L7.44 2.3zm9.174.04l-.002.001a.628.628 0 00-.107.09c-.156.163-.32.45-.453.814-.29.794-.387 1.776-.23 2.572l.058.097.008.014h.03a5.184 5.184 0 011.466.212c.086-1.124.038-2.043-.128-2.722-.09-.365-.21-.643-.349-.832l-.004-.006a.659.659 0 00-.285-.239h-.004z"></path>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/OpenAiCompatibleIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};

================
File: src/renderer/src/icons/OpenAiIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const OpenAiIcon = ({ width = 64, height = 64, className }: Props) => (
  <div
    aria-label="OpenAI"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundColor: 'rgb(0, 0, 0)',
      boxShadow: 'rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset',
      color: 'rgb(255, 255, 255)',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg fill="currentColor" fillRule="evenodd" viewBox="0 0 24 24" width={width * 0.75} height={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>OpenAI</title>
      <path d="M21.55 10.004a5.416 5.416 0 00-.478-4.501c-1.217-2.09-3.662-3.166-6.05-2.66A5.59 5.59 0 0010.831 1C8.39.995 6.224 2.546 5.473 4.838A5.553 5.553 0 001.76 7.496a5.487 5.487 0 00.691 6.5 5.416 5.416 0 00.477 4.502c1.217 2.09 3.662 3.165 6.05 2.66A5.586 5.586 0 0013.168 23c2.443.006 4.61-1.546 5.361-3.84a5.553 5.553 0 003.715-2.66 5.488 5.488 0 00-.693-6.497v.001zm-8.381 11.558a4.199 4.199 0 01-2.675-.954c.034-.018.093-.05.132-.074l4.44-2.53a.71.71 0 00.364-.623v-6.176l1.877 1.069c.02.01.033.029.036.05v5.115c-.003 2.274-1.87 4.118-4.174 4.123zM4.192 17.78a4.059 4.059 0 01-.498-2.763c.032.02.09.055.131.078l4.44 2.53c.225.13.504.13.73 0l5.42-3.088v2.138a.068.068 0 01-.027.057L9.9 19.288c-1.999 1.136-4.552.46-5.707-1.51h-.001zM3.023 8.216A4.15 4.15 0 015.198 6.41l-.002.151v5.06a.711.711 0 00.364.624l5.42 3.087-1.876 1.07a.067.067 0 01-.063.005l-4.489-2.559c-1.995-1.14-2.679-3.658-1.53-5.63h.001zm15.417 3.54l-5.42-3.088L14.896 7.6a.067.067 0 01.063-.006l4.489 2.557c1.998 1.14 2.683 3.662 1.529 5.633a4.163 4.163 0 01-2.174 1.807V12.38a.71.71 0 00-.363-.623zm1.867-2.773a6.04 6.04 0 00-.132-.078l-4.44-2.53a.731.731 0 00-.729 0l-5.42 3.088V7.325a.068.068 0 01.027-.057L14.1 4.713c2-1.137 4.555-.46 5.707 1.513.487.833.664 1.809.499 2.757h.001zm-11.741 3.81l-1.877-1.068a.065.065 0 01-.036-.051V6.559c.001-2.277 1.873-4.122 4.181-4.12.976 0 1.92.338 2.671.954-.034.018-.092.05-.131.073l-4.44 2.53a.71.71 0 00-.365.623l-.003 6.173v.002zm1.02-2.168L12 9.25l2.414 1.375v2.75L12 14.75l-2.415-1.375v-2.75z"></path>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/OpenRouterIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const OpenRouterIcon = ({ width = 64, height = 64, className }: Props) => (
  <div
    aria-label="OpenRouter"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundColor: 'rgb(101, 102, 241)',
      color: 'rgb(255, 255, 255)',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg fill="currentColor" fillRule="evenodd" viewBox="0 0 24 24" width={width * 0.75} height={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>OpenRouter</title>
      <path d="M16.804 1.957l7.22 4.105v.087L16.73 10.21l.017-2.117-.821-.03c-1.059-.028-1.611.002-2.268.11-1.064.175-2.038.577-3.147 1.352L8.345 11.03c-.284.195-.495.336-.68.455l-.515.322-.397.234.385.23.53.338c.476.314 1.17.796 2.701 1.866 1.11.775 2.083 1.177 3.147 1.352l.3.045c.694.091 1.375.094 2.825.033l.022-2.159 7.22 4.105v.087L16.589 22l.014-1.862-.635.022c-1.386.042-2.137.002-3.138-.162-1.694-.28-3.26-.926-4.881-2.059l-2.158-1.5a21.997 21.997 0 00-.755-.498l-.467-.28a55.927 55.927 0 00-.76-.43C2.908 14.73.563 14.116 0 14.116V9.888l.14.004c.564-.007 2.91-.622 3.809-1.124l1.016-.58.438-.274c.428-.28 1.072-.726 2.686-1.853 1.621-1.133 3.186-1.78 4.881-2.059 1.152-.19 1.974-.213 3.814-.138l.02-1.907z"></path>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/RequestyIcon.tsx
================
import requestyIcon from './requesty.png';
⋮----
type Props = {
  width?: number;
  height?: number;
  className?: string;
};

================
File: src/renderer/src/icons/VertexAiIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};
⋮----
export const VertexAiIcon = ({ width = 64, height = 64, className }: Props) => (
  <div
    aria-label="VertexAI"
    className={`flex items-center justify-center rounded-md ${className || ''}`}
    style={{
      backgroundColor: 'rgb(66, 133, 244)',
      color: 'rgb(255, 255, 255)',
      height: `${height}px`,
      width: `${width}px`,
    }}
  >
    <svg fill="currentColor" fillRule="evenodd" viewBox="0 0 24 24" width={width * 0.75} height={height * 0.75} xmlns="http://www.w3.org/2000/svg">
      <title>VertexAI</title>
      <path d="M11.995 20.216a1.892 1.892 0 100 3.785 1.892 1.892 0 000-3.785zm0 2.806a.927.927 0 11.927-.914.914.914 0 01-.927.914z"></path>
      <path
        clipRule="evenodd"
        d="M21.687 14.144c.237.038.452.16.605.344a.978.978 0 01-.18 1.3l-8.24 6.082a1.892 1.892 0 00-1.147-1.508l8.28-6.08a.991.991 0 01.682-.138z"
      ></path>
      <path clipRule="evenodd" d="M10.122 21.842l-8.217-6.066a.952.952 0 01-.206-1.287.978.978 0 011.287-.206l8.28 6.08a1.893 1.893 0 00-1.144 1.479z"></path>
      <path d="M4.273 4.475a.978.978 0 01-.965-.965V1.09a.978.978 0 111.943 0v2.42a.978.978 0 01-.978.965zM4.247 13.034a.978.978 0 100-1.956.978.978 0 000 1.956zM4.247 10.19a.978.978 0 100-1.956.978.978 0 000 1.956zM4.247 7.332a.978.978 0 100-1.956.978.978 0 000 1.956z"></path>
      <path d="M19.718 7.307a.978.978 0 01-.965-.979v-2.42a.965.965 0 011.93 0v2.42a.964.964 0 01-.965.979zM19.743 13.047a.978.978 0 100-1.956.978.978 0 000 1.956zM19.743 10.151a.978.978 0 100-1.956.978.978 0 000 1.956zM19.743 2.068a.978.978 0 100-1.956.978.978 0 000 1.956z"></path>
      <path d="M11.995 15.917a.978.978 0 01-.965-.965v-2.459a.978.978 0 011.943 0v2.433a.976.976 0 01-.978.991zM11.995 18.762a.978.978 0 100-1.956.978.978 0 000 1.956zM11.995 10.64a.978.978 0 100-1.956.978.978 0 000 1.956zM11.995 7.783a.978.978 0 100-1.956.978.978 0 000 1.956z"></path>
      <path d="M15.856 10.177a.978.978 0 01-.965-.965v-2.42a.977.977 0 011.702-.763.979.979 0 01.241.763v2.42a.978.978 0 01-.978.965zM15.869 4.913a.978.978 0 100-1.956.978.978 0 000 1.956zM15.869 15.853a.978.978 0 100-1.956.978.978 0 000 1.956zM15.869 12.996a.978.978 0 100-1.956.978.978 0 000 1.956z"></path>
      <path d="M8.121 15.853a.978.978 0 100-1.956.978.978 0 000 1.956zM8.121 7.783a.978.978 0 100-1.956.978.978 0 000 1.956zM8.121 4.913a.978.978 0 100-1.957.978.978 0 000 1.957zM8.134 12.996a.978.978 0 01-.978-.94V9.611a.965.965 0 011.93 0v2.445a.966.966 0 01-.952.94z"></path>
    </svg>
  </div>
);

================
File: src/renderer/src/icons/ZaiPlanIcon.tsx
================
type Props = {
  width?: number;
  height?: number;
  className?: string;
};

================
File: src/renderer/src/pages/Home.tsx
================
import { ProjectData } from '@common/types';
import { useCallback, useEffect, useState } from 'react';
import { MdBarChart, MdSettings, MdUpload } from 'react-icons/md';
import { PiNotebookFill } from 'react-icons/pi';
import { useTranslation } from 'react-i18next';
⋮----
import { UsageDashboard } from '@/components/usage/UsageDashboard';
import { IconButton } from '@/components/common/IconButton';
import { NoProjectsOpen } from '@/components/project/NoProjectsOpen';
import { OpenProjectDialog } from '@/components/project/OpenProjectDialog';
import { ProjectTabs } from '@/components/project/ProjectTabs';
import { ProjectView } from '@/components/project/ProjectView';
import { SettingsDialog } from '@/components/settings/SettingsDialog';
import { useVersions } from '@/hooks/useVersions';
import { HtmlInfoDialog } from '@/components/common/HtmlInfoDialog';
import { ProjectSettingsProvider } from '@/context/ProjectSettingsContext';
import { TelemetryInfoDialog } from '@/components/TelemetryInfoDialog';
import { showInfoNotification } from '@/utils/notifications';
import { useApi } from '@/context/ApiContext';
import { ModelLibrary } from '@/components/ModelLibrary';
⋮----
const handleReorderProjects = async (reorderedProjects: ProjectData[]) =>
⋮----
const loadProjects = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleOpenSettings = (tabIndex: number) =>
⋮----
const checkReleaseNotes = async () =>
⋮----
// First TAB press - switch to previous tab
⋮----
// Subsequent TAB presses - cycle through tabs
⋮----
const handleAddProject = async (baseDir: string) =>
⋮----
const handleCloseProject = async (projectBaseDir: string) =>
⋮----
const handleCloseOtherProjects = async (baseDir: string) =>
⋮----
const handleCloseAllProjects = async () =>
⋮----
if (versions?.aiderDeskNewVersionReady)
return t('settings.about.newAiderDeskVersionReady');
⋮----
return ''; // Should not happen if showUpdateIcon is true

================
File: src/renderer/src/pages/Onboarding.tsx
================
import { useCallback, useEffect, useState } from 'react';
import { HiArrowRight, HiArrowLeft } from 'react-icons/hi2';
import { useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { SettingsData } from '@common/types';
⋮----
import { useSettings } from '@/context/SettingsContext';
import { AiderSettings } from '@/components/settings/AiderSettings';
import { LanguageSelector } from '@/components/settings/LanguageSelector';
import { OnboardingProviderSetup } from '@/components/onboarding/OnboardingProviderSetup';
import { AgentSettings } from '@/components/settings/agent/AgentSettings';
import { Button } from '@/components/common/Button';
import { OnboardingStepper } from '@/components/onboarding/OnboardingStepper';
import { ROUTES } from '@/utils/routes';
import { showErrorNotification, showInfoNotification } from '@/utils/notifications';
⋮----
const handleNext = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleBack = () =>
⋮----
// eslint-disable-next-line no-console
⋮----
const handleFinish = async () =>
⋮----
// eslint-disable-next-line no-console
⋮----
{/* Language Selector in top-right corner */}
⋮----
<p className="text-text-tertiary text-sm">{t('onboarding.getStarted')}</p>
          </div>
        );
⋮----
{/* Stepper */}
⋮----
{/* Step Content */}
⋮----
{/* Navigation Buttons */}

================
File: src/renderer/src/pages/Settings.tsx
================
import { Font, SettingsData, Theme } from '@common/types';
import { Tab, TabGroup, TabList, TabPanel, TabPanels } from '@headlessui/react';
import { ReactNode, useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { LlmProviderName } from '@common/agent';
⋮----
import { useApi } from '@/context/ApiContext';
import { AiderSettings } from '@/components/settings/AiderSettings';
import { GeneralSettings } from '@/components/settings/GeneralSettings';
import { AgentSettings } from '@/components/settings/agent/AgentSettings';
import { AboutSettings } from '@/components/settings/AboutSettings';
import { ServerSettings } from '@/components/settings/ServerSettings';
⋮----
type Props = {
  settings: SettingsData;
  updateSettings: (settings: SettingsData) => void;
  onLanguageChange: (language: string) => void;
  onZoomChange: (zoomLevel: number) => void;
  onThemeChange: (theme: Theme) => void;
  onFontChange: (fontName: Font) => void;
  onFontSizeChange: (fontSize: number) => void;
  initialTab?: number;
  initialAgentProfileId?: string;
  initialAgentProvider?: LlmProviderName;
};

================
File: src/renderer/src/themes/theme-aurora.scss
================
.theme-aurora {

  --color-bg-primary: #0B1426;
  --color-bg-primary-light: #132038;
  --color-bg-primary-light-strong: #13203880;
  --color-bg-secondary: #1A2C4A;
  --color-bg-secondary-light: #22385C;
  --color-bg-secondary-light-strongest: #22385Cf2;
  --color-bg-tertiary: #2A446E;
  --color-bg-tertiary-emphasis: #D4A57440;
  --color-bg-tertiary-strong: #D4A57460;
  --color-bg-fourth: #345080;
  --color-bg-fourth-muted: #7BC4C433;
  --color-bg-fourth-emphasis: #7BC4C44C;
  --color-bg-fifth: #3E5C92;
  --color-bg-selection: #D4A57450;
  --color-bg-code-block: #08101C;

  --color-bg-diff-viewer-old-primary: #4A2A2A;
  --color-bg-diff-viewer-old-secondary: #3A1F1F;
  --color-bg-diff-viewer-new-primary: #2A4A3A;
  --color-bg-diff-viewer-new-secondary: #1F3A2A;

  --color-text-primary: #F8FBFF;
  --color-text-secondary: #E8F4FF;
  --color-text-tertiary: #D8EDFF;
  --color-text-muted-light: #C8E6FF;
  --color-text-muted: #7BC4C4;
  --color-text-muted-dark: #3E5C92;
  --color-text-dark: #2A446E;

  --color-border-dark: #1A2C4A;
  --color-border-dark-light: #22385C;
  --color-border-dark-light-strong: #22385C80;
  --color-border-default-dark: #2A446E;
  --color-border-default: #345080;
  --color-border-accent: #D4A574;
  --color-border-light: #7BC4C4;

  --color-accent-primary: #D4A574;
  --color-accent-secondary: #7BC4C4;
  --color-accent-light: #E8F4FF;

  --color-success: #7BC4C4;
  --color-success-light: #9DD4D4;
  --color-success-subtle: #7BC4C41a;
  --color-success-muted: #7BC4C433;
  --color-success-emphasis: #7BC4C44c;

  --color-warning: #D4A574;
  --color-warning-subtle: #D4A57419;
  --color-warning-emphasis: #D4A5744c;
  --color-warning-light: #E4B584;
  --color-warning-text: #0B1426;

  --color-error: #E07B7B;
  --color-error-dark: #C06565;
  --color-error-subtle: #E07B7B1a;
  --color-error-muted: #E07B7B26;
  --color-error-emphasis: #E07B7B4c;
  --color-error-strong: #E07B7B80;
  --color-error-light: #E89B9B;
  --color-error-lighter: #F0BBBB;
  --color-error-lightest: #F8DBDB;

  --color-info: #5A8BC4;
  --color-info-light: #7AA5D4;
  --color-info-lighter: #9ABFE4;
  --color-info-lightest: #BAD9F4;
  --color-info-subtle: #5A8BC41a;
  --color-info-light-muted: #5A8BC433;
  --color-info-light-emphasis: #5A8BC44c;

  // Button-specific colors
  --color-button-primary: #D4A574;
  --color-button-primary-light: #E4B584;
  --color-button-primary-subtle: #D4A57419;
  --color-button-primary-emphasis: #D4A5744c;
  --color-button-primary-text: #0B1426;

  --color-button-secondary: #5A8BC4;
  --color-button-secondary-light: #7AA5D4;
  --color-button-secondary-subtle: #5A8BC41a;
  --color-button-secondary-emphasis: #5A8BC44c;
  --color-button-secondary-text: #F8FBFF;

  --color-button-danger: #E07B7B;
  --color-button-danger-light: #E89B9B;
  --color-button-danger-subtle: #E07B7B1a;
  --color-button-danger-emphasis: #E07B7B4c;
  --color-button-danger-text: #F8FBFF;

  --color-input-bg: #132038;
  --color-input-border: #D4A574;
  --color-input-text: #F8FBFF;

  --color-agent-auto-approve: #7BC4C4;
  --color-agent-aider-tools: #D4A574;
  --color-agent-power-tools: #B47BC4;
  --color-agent-todo-tools: #5A8BC4;
  --color-agent-context-files: #E4B584;
  --color-agent-repo-map: #9DD4D4;
  --color-agent-ai-request: #E07B7B;
  --color-agent-sub-agent: #7B9DE0;
}

================
File: src/renderer/src/themes/theme-bw.scss
================
.theme-bw {

  --color-bg-primary: #ffffff;
  --color-bg-primary-light: #f8f8f8;
  --color-bg-primary-light-strong: #f8f8f880;
  --color-bg-secondary: #e0e0e0;
  --color-bg-secondary-light: #d0d0d0;
  --color-bg-secondary-light-strongest: #d0d0d0f2;
  --color-bg-tertiary: #b0b0b0;
  --color-bg-tertiary-emphasis: #b0b0b04c;
  --color-bg-tertiary-strong: #b0b0b07f;
  --color-bg-fourth: #808080;
  --color-bg-fourth-muted: #80808033;
  --color-bg-fourth-emphasis: #8080804c;
  --color-bg-fifth: #404040;
  --color-bg-selection: #b0b0b0;
  --color-bg-code-block: #f0f0f0;

  --color-bg-diff-viewer-old-primary: #e0e0e0;
  --color-bg-diff-viewer-old-secondary: #d0d0d0;
  --color-bg-diff-viewer-new-primary: #f0f0f0;
  --color-bg-diff-viewer-new-secondary: #e8e8e8;

  --color-text-primary: #000000;
  --color-text-secondary: #202020;
  --color-text-tertiary: #404040;
  --color-text-muted-light: #606060;
  --color-text-muted: #808080;
  --color-text-muted-dark: #a0a0a0;
  --color-text-dark: #000000;

  --color-border-dark: #e0e0e0;
  --color-border-dark-light: #d0d0d0;
  --color-border-dark-light-strong: #d0d0d080;
  --color-border-default-dark: #b0b0b0;
  --color-border-default: #808080;
  --color-border-accent: #404040;
  --color-border-light: #000000;

  --color-accent-primary: #404040;
  --color-accent-secondary: #808080;
  --color-accent-light: #000000;

  --color-success: #808080;
  --color-success-light: #a0a0a0;
  --color-success-subtle: #8080801a;
  --color-success-muted: #80808033;
  --color-success-emphasis: #8080804c;

  --color-warning: #606060;
  --color-warning-subtle: #60606019;
  --color-warning-emphasis: #6060604c;
  --color-warning-light: #707070;
  --color-warning-text: #ffffff;

  --color-error: #000000;
  --color-error-dark: #000000;
  --color-error-subtle: #0000001a;
  --color-error-muted: #00000026;
  --color-error-emphasis: #0000004c;
  --color-error-strong: #00000080;
  --color-error-light: #202020;
  --color-error-lighter: #404040;
  --color-error-lightest: #606060;

  --color-info: #404040;
  --color-info-light: #606060;
  --color-info-lighter: #808080;
  --color-info-lightest: #a0a0a0;
  --color-info-subtle: #4040401a;
  --color-info-light-muted: #40404033;
  --color-info-light-emphasis: #4040404c;

  // Button-specific colors
  --color-button-primary: #606060;
  --color-button-primary-light: #707070;
  --color-button-primary-subtle: #60606019;
  --color-button-primary-emphasis: #6060604c;
  --color-button-primary-text: #ffffff;

  --color-button-secondary: #404040;
  --color-button-secondary-light: #606060;
  --color-button-secondary-subtle: #4040401a;
  --color-button-secondary-emphasis: #4040404c;
  --color-button-secondary-text: #000000;

  --color-button-danger: #000000;
  --color-button-danger-light: #202020;
  --color-button-danger-subtle: #0000001a;
  --color-button-danger-emphasis: #0000004c;
  --color-button-danger-text: #000000;

  --color-input-bg: #f8f8f8;
  --color-input-border: #808080;
  --color-input-text: #000000;

  --color-agent-auto-approve: #a0a0a0;
  --color-agent-aider-tools: #808080;
  --color-agent-power-tools: #606060;
  --color-agent-todo-tools: #404040;
  --color-agent-context-files: #202020;
  --color-agent-repo-map: #000000;
  --color-agent-ai-request: #505050;
  --color-agent-sub-agent: #303030;
}

================
File: src/renderer/src/themes/theme-cappuccino.scss
================
.theme-cappuccino {

  --color-bg-primary: #ede4d3;
  --color-bg-primary-light: #f0e7d6;
  --color-bg-primary-light-strong: #f0e7d680;
  --color-bg-secondary: #e6d7c3;
  --color-bg-secondary-light: #e9dac6;
  --color-bg-secondary-light-strongest: #e9dac6f2;
  --color-bg-tertiary: #dcc9b0;
  --color-bg-tertiary-emphasis: #dcc9b04c;
  --color-bg-tertiary-strong: #dcc9b07f;
  --color-bg-fourth: #d2bb9d;
  --color-bg-fourth-muted: #d2bb9d33;
  --color-bg-fourth-emphasis: #d2bb9d4c;
  --color-bg-fifth: #c4a882;
  --color-bg-selection: #dcc9b0;
  --color-bg-code-block: #f2e9dc;

  --color-bg-diff-viewer-old-primary: #fee2e2;
  --color-bg-diff-viewer-old-secondary: #fecaca;
  --color-bg-diff-viewer-new-primary: #dcfce7;
  --color-bg-diff-viewer-new-secondary: #bbf7d0;

  --color-text-primary: #2d1f16;
  --color-text-secondary: #4a3426;
  --color-text-tertiary: #5d4a36;
  --color-text-muted-light: #8d7a64;
  --color-text-muted: #9d8a74;
  --color-text-muted-dark: #caa590;
  --color-text-dark: #2d1f16;

  --color-border-dark: #dcc9b0;
  --color-border-dark-light: #d2bb9d;
  --color-border-dark-light-strong: #c4a88280;
  --color-border-default-dark: #c4a882;
  --color-border-default: #937865;
  --color-border-accent: #5d4a36;
  --color-border-light: #4a3426;

  --color-accent-primary: #8b4513;
  --color-accent-secondary: #c4a882;
  --color-accent-light: #4a3426;

  --color-success: #22c55e;
  --color-success-light: #4ade80;
  --color-success-subtle: #22c55e1a;
  --color-success-muted: #22c55e33;
  --color-success-emphasis: #22c55e4c;

  --color-warning: #d97706;
  --color-warning-subtle: #d9770619;
  --color-warning-emphasis: #d977064c;
  --color-warning-light: #f59e0b;
  --color-warning-text: #ede4d3;

  --color-error: #ef4444;
  --color-error-dark: #991b1b;
  --color-error-subtle: #ef44441a;
  --color-error-muted: #ef444426;
  --color-error-emphasis: #ef44444c;
  --color-error-strong: #ef444480;
  --color-error-light: #f87171;
  --color-error-lighter: #fca5a5;
  --color-error-lightest: #fecaca;

  --color-info: #2563eb;
  --color-info-light: #3b82f6;
  --color-info-lighter: #60a5fa;
  --color-info-lightest: #93c5fd;
  --color-info-subtle: #2563eb1a;
  --color-info-light-muted: #2563eb33;
  --color-info-light-emphasis: #2563eb4c;

  // Button-specific colors
  --color-button-primary: #8b4513;
  --color-button-primary-light: #9f664f;
  --color-button-primary-subtle: #d9770619;
  --color-button-primary-emphasis: #d977064c;
  --color-button-primary-text: #ede4d3;

  --color-button-secondary: #2563eb;
  --color-button-secondary-light: #3b82f6;
  --color-button-secondary-subtle: #2563eb1a;
  --color-button-secondary-emphasis: #2563eb4c;
  --color-button-secondary-text: #ede4d3;

  --color-button-danger: #ef4444;
  --color-button-danger-light: #f87171;
  --color-button-danger-subtle: #ef44441a;
  --color-button-danger-emphasis: #ef44444c;
  --color-button-danger-text: #ede4d3;

  --color-input-bg: #f2e9dc;
  --color-input-border: #c4a882;
  --color-input-text: #2d1f16;

  --color-agent-auto-approve: #4ade80;
  --color-agent-aider-tools: #fb923c;
  --color-agent-power-tools: #c084fc;
  --color-agent-todo-tools: #38bdf8;
  --color-agent-context-files: #facc15;
  --color-agent-repo-map: #60a5fa;
  --color-agent-ai-request: #d97706;
  --color-agent-sub-agent: #7c3aed;
}

================
File: src/renderer/src/themes/theme-charcoal.scss
================
.theme-charcoal {
  
  --color-bg-primary: #1a1a1a; 
  --color-bg-primary-light: #242424; 
  --color-bg-primary-light-strong: #24242480;
  --color-bg-secondary: #2d2d2d; 
  --color-bg-secondary-light: #363636; 
  --color-bg-secondary-light-strongest: #363636f2;
  --color-bg-tertiary: #404040; 
  --color-bg-tertiary-emphasis: #4040404c;
  --color-bg-tertiary-strong: #4040407f;
  --color-bg-fourth: #4a4a4a; 
  --color-bg-fourth-muted: #4a4a4a33;
  --color-bg-fourth-emphasis: #4a4a4a4c;
  --color-bg-fifth: #545454; 
  --color-bg-selection: #404040;
  --color-bg-code-block: #141414; 

  --color-bg-diff-viewer-old-primary: #3f1d25;
  --color-bg-diff-viewer-old-secondary: #2c141a;
  --color-bg-diff-viewer-new-primary: #022c22;
  --color-bg-diff-viewer-new-secondary: #011f19;

  --color-text-primary: #ffffff; 
  --color-text-secondary: #e8e8e8; 
  --color-text-tertiary: #cccccc; 
  --color-text-muted-light: #a8a8a8; 
  --color-text-muted: #808080; 
  --color-text-muted-dark: #666666; 
  --color-text-dark: #404040; 

  --color-border-dark: #2d2d2d;
  --color-border-dark-light: #363636;
  --color-border-dark-light-strong: #36363680;
  --color-border-default-dark: #404040;
  --color-border-default: #4a4a4a;
  --color-border-accent: #545454;
  --color-border-light: #808080;

  --color-accent-primary: #d4af37; 
  --color-accent-secondary: #c0c0c0; 
  --color-accent-light: #e8e8e8; 

  --color-success: #4ade80; 
  --color-success-light: #86efac;
  --color-success-subtle: #4ade801a;
  --color-success-muted: #4ade8033;
  --color-success-emphasis: #4ade804c;

  --color-warning: #fbbf24; 
  --color-warning-subtle: #fbbf2419;
  --color-warning-emphasis: #fbbf244c;
  --color-warning-light: #fcd34d;
  --color-warning-text: #1a1a1a;

  --color-error: #f87171; 
  --color-error-dark: #dc2626;
  --color-error-subtle: #f871711a;
  --color-error-muted: #f8717126;
  --color-error-emphasis: #f871714c;
  --color-error-strong: #f8717180;
  --color-error-light: #fca5a5;
  --color-error-lighter: #fecaca;
  --color-error-lightest: #fee2e2;

  --color-info: #60a5fa;
  --color-info-light: #93c5fd;
  --color-info-lighter: #bfdbfe;
  --color-info-lightest: #dbeafe;
  --color-info-subtle: #60a5fa1a;
  --color-info-light-muted: #60a5fa33;
  --color-info-light-emphasis: #60a5fa4c;

  // Button-specific colors
  --color-button-primary: #fbbf24;
  --color-button-primary-light: #fcd34d;
  --color-button-primary-subtle: #fbbf2419;
  --color-button-primary-emphasis: #fbbf244c;
  --color-button-primary-text: #1a1a1a;

  --color-button-secondary: #60a5fa;
  --color-button-secondary-light: #93c5fd;
  --color-button-secondary-subtle: #60a5fa1a;
  --color-button-secondary-emphasis: #60a5fa4c;
  --color-button-secondary-text: #ffffff;

  --color-button-danger: #f87171;
  --color-button-danger-light: #fca5a5;
  --color-button-danger-subtle: #f871711a;
  --color-button-danger-emphasis: #f871714c;
  --color-button-danger-text: #ffffff;

  --color-input-bg: #242424;
  --color-input-border: #4a4a4a;
  --color-input-text: #ffffff;

  --color-agent-auto-approve: #4ade80;
  --color-agent-aider-tools: #fb923c;
  --color-agent-power-tools: #c084fc;
  --color-agent-todo-tools: #60a5fa;
  --color-agent-context-files: #facc15;
  --color-agent-repo-map: #93c5fd;
  --color-agent-ai-request: #ef4444;
  --color-agent-sub-agent: #3b82f6;
}

================
File: src/renderer/src/themes/theme-dark.scss
================
.theme-dark {

  --color-bg-primary: #141417;
  --color-bg-primary-light: #191a22;
  --color-bg-primary-light-strong: #191a2280;
  --color-bg-secondary: #222431;
  --color-bg-secondary-light: #2a2c3f;
  --color-bg-secondary-light-strongest: #2a2c3ff2;
  --color-bg-tertiary: #333652;
  --color-bg-tertiary-emphasis: #3336524C;
  --color-bg-tertiary-strong: #3336527F;
  --color-bg-fourth: #3d4166;
  --color-bg-fourth-muted: #3d416633;
  --color-bg-fourth-emphasis: #3d41664c;
  --color-bg-fifth: #585c75;
  --color-bg-selection: #5d5f6e;
  --color-bg-code-block: #171718;

  --color-bg-diff-viewer-old-primary: #3f1d25;
  --color-bg-diff-viewer-old-secondary: #2c141a;
  --color-bg-diff-viewer-new-primary: #022c22;
  --color-bg-diff-viewer-new-secondary: #011f19;

  --color-text-primary: #f1f3f5;
  --color-text-secondary: #999ba3;
  --color-text-tertiary: #8c8e95;
  --color-text-muted-light: #7b7d86;
  --color-text-muted: #585c75;
  --color-text-muted-dark: #3d4166;
  --color-text-dark: #333652;

  --color-border-dark: #222431;
  --color-border-dark-light: #2a2c3f;
  --color-border-dark-light-strong: #2a2c3f80;
  --color-border-default-dark: #333652;
  --color-border-default: #3d4166;
  --color-border-accent: #585c75;
  --color-border-light: #999ba3;

  --color-accent-primary: #585c75;
  --color-accent-secondary: #7b7d86;
  --color-accent-light: #999ba3;

  --color-success: #22c55e;
  --color-success-light: #4ade80;
  --color-success-subtle: #22c55e1a;
  --color-success-muted: #22c55e33;
  --color-success-emphasis: #22c55e4c;

  --color-warning: #d97706;
  --color-warning-subtle: #d9770619;
  --color-warning-emphasis: #d977064c;
  --color-warning-light: #f59e0b;
  --color-warning-text: #1a1a1a;

  --color-error: #ef4444;
  --color-error-dark: #991b1b;
  --color-error-subtle: #ef44441a;
  --color-error-muted: #ef444426;
  --color-error-emphasis: #ef44444c;
  --color-error-strong: #ef444480;
  --color-error-light: #f87171;
  --color-error-lighter: #fca5a5;
  --color-error-lightest: #fecaca;

  --color-info: #2563eb;
  --color-info-light: #3b82f6;
  --color-info-lighter: #60a5fa;
  --color-info-lightest: #93c5fd;
  --color-info-subtle: #2563eb1a;
  --color-info-light-muted: #2563eb33;
  --color-info-light-emphasis: #2563eb4c;

  // Button-specific colors
  --color-button-primary: #d97706;
  --color-button-primary-light: #f59e0b;
  --color-button-primary-subtle: #d9770619;
  --color-button-primary-emphasis: #d977064c;
  --color-button-primary-text: #1a1a1a;

  --color-button-secondary: #2563eb;
  --color-button-secondary-light: #3b82f6;
  --color-button-secondary-subtle: #2563eb1a;
  --color-button-secondary-emphasis: #2563eb4c;
  --color-button-secondary-text: #f1f3f5;

  --color-button-danger: #ef4444;
  --color-button-danger-light: #f87171;
  --color-button-danger-subtle: #ef44441a;
  --color-button-danger-emphasis: #ef44444c;
  --color-button-danger-text: #f1f3f5;

  --color-input-bg: #191a22;
  --color-input-border: #3d4166;
  --color-input-text: #f1f3f5;

  --color-agent-auto-approve: #4ade80;
  --color-agent-aider-tools: #fb923c;
  --color-agent-power-tools: #c084fc;
  --color-agent-todo-tools: #38bdf8;
  --color-agent-context-files: #facc15;
  --color-agent-repo-map: #60a5fa;
  --color-agent-ai-request: #884239;
  --color-agent-sub-agent: #3368a8;
}

================
File: src/renderer/src/themes/theme-forest.scss
================
.theme-forest {
  
  --color-bg-primary: #0f2419; 
  --color-bg-primary-light: #1a4d2e; 
  --color-bg-primary-light-strong: #1a4d2e80;
  --color-bg-secondary: #2d5a3d; 
  --color-bg-secondary-light: #3d6b4d; 
  --color-bg-secondary-light-strongest: #3d6b4df2;
  --color-bg-tertiary: #4a7c59; 
  --color-bg-tertiary-emphasis: #4a7c594c;
  --color-bg-tertiary-strong: #4a7c597f;
  --color-bg-fourth: #5d8a6a; 
  --color-bg-fourth-muted: #5d8a6a33;
  --color-bg-fourth-emphasis: #5d8a6a4c;
  --color-bg-fifth: #7fb069; 
  --color-bg-selection: #4a7c59;
  --color-bg-code-block: #0a1f14; 

  --color-bg-diff-viewer-old-primary: #4d2a1a; 
  --color-bg-diff-viewer-old-secondary: #3d1f0f; 
  --color-bg-diff-viewer-new-primary: #1a4d2a; 
  --color-bg-diff-viewer-new-secondary: #0f3d1f; 

  --color-text-primary: #f0f7f0; 
  --color-text-secondary: #d4e6d4; 
  --color-text-tertiary: #b8d4b8; 
  --color-text-muted-light: #9cc29c; 
  --color-text-muted: #7fb069; 
  --color-text-muted-dark: #5d8a6a; 
  --color-text-dark: #4a7c59; 

  --color-border-dark: #2d5a3d;
  --color-border-dark-light: #3d6b4d;
  --color-border-dark-light-strong: #3d6b4d80;
  --color-border-default-dark: #4a7c59;
  --color-border-default: #5d8a6a;
  --color-border-accent: #7fb069;
  --color-border-light: #9cc29c;

  --color-accent-primary: #7fb069; 
  --color-accent-secondary: #9cc29c; 
  --color-accent-light: #b8d4b8; 

  --color-success: #4a7c59; 
  --color-success-light: #5d8a6a;
  --color-success-subtle: #4a7c591a;
  --color-success-muted: #4a7c5933;
  --color-success-emphasis: #4a7c594c;

  --color-warning: #8b9a46; 
  --color-warning-subtle: #8b9a4619;
  --color-warning-emphasis: #8b9a464c;
  --color-warning-light: #a6b85c;
  --color-warning-text: #f0f7f0;

  --color-error: #c85a5a; 
  --color-error-dark: #a04040;
  --color-error-subtle: #c85a5a1a;
  --color-error-muted: #c85a5a26;
  --color-error-emphasis: #c85a5a4c;
  --color-error-strong: #c85a5a80;
  --color-error-light: #d47474;
  --color-error-lighter: #e09999;
  --color-error-lightest: #ecbfbf;

  --color-info: #4a7a9a;
  --color-info-light: #5d8fb0;
  --color-info-lighter: #7aa3c2;
  --color-info-lightest: #97b8d4;
  --color-info-subtle: #4a7a9a1a;
  --color-info-light-muted: #4a7a9a33;
  --color-info-light-emphasis: #4a7a9a4c;

  // Button-specific colors
  --color-button-primary: #7fb069;
  --color-button-primary-light: #8fc279;
  --color-button-primary-subtle: #7fb06919;
  --color-button-primary-emphasis: #7fb0694c;
  --color-button-primary-text: #0f2419;

  --color-button-secondary: #4a7a9a;
  --color-button-secondary-light: #5d8fb0;
  --color-button-secondary-subtle: #4a7a9a1a;
  --color-button-secondary-emphasis: #4a7a9a4c;
  --color-button-secondary-text: #f0f7f0;

  --color-button-danger: #c85a5a;
  --color-button-danger-light: #d47474;
  --color-button-danger-subtle: #c85a5a1a;
  --color-button-danger-emphasis: #c85a5a4c;
  --color-button-danger-text: #f0f7f0;

  --color-input-bg: #1a4d2e;
  --color-input-border: #5d8a6a;
  --color-input-text: #f0f7f0;

  --color-agent-auto-approve: #5d8a6a;
  --color-agent-aider-tools: #b8854a;
  --color-agent-power-tools: #8a6a9a;
  --color-agent-todo-tools: #4a7a9a;
  --color-agent-context-files: #9a8a4a;
  --color-agent-repo-map: #6a8a9a;
  --color-agent-ai-request: #9a4a4a;
  --color-agent-sub-agent: #4a6a9a;
}

================
File: src/renderer/src/themes/theme-lavender.scss
================
.theme-lavender {
  
  --color-bg-primary: #2d1b4e; 
  --color-bg-primary-light: #3d2a5f; 
  --color-bg-primary-light-strong: #3d2a5f80;
  --color-bg-secondary: #4c3970; 
  --color-bg-secondary-light: #5b4881; 
  --color-bg-secondary-light-strongest: #5b4881f2;
  --color-bg-tertiary: #6a5792; 
  --color-bg-tertiary-emphasis: #6a57924c;
  --color-bg-tertiary-strong: #6a57927f;
  --color-bg-fourth: #7966a3; 
  --color-bg-fourth-muted: #7966a333;
  --color-bg-fourth-emphasis: #7966a34c;
  --color-bg-fifth: #8875b4; 
  --color-bg-selection: #6a5792;
  --color-bg-code-block: #1f0d3a; 

  --color-bg-diff-viewer-old-primary: #5d2a3d; 
  --color-bg-diff-viewer-old-secondary: #4a1f2e; 
  --color-bg-diff-viewer-new-primary: #2a4d3d; 
  --color-bg-diff-viewer-new-secondary: #1f3a2e; 

  --color-text-primary: #faf7ff; 
  --color-text-secondary: #e6d9ff; 
  --color-text-tertiary: #d1bbff; 
  --color-text-muted-light: #bc9dff; 
  --color-text-muted: #8875b4; 
  --color-text-muted-dark: #6a5792; 
  --color-text-dark: #4c3970; 

  --color-border-dark: #4c3970;
  --color-border-dark-light: #5b4881;
  --color-border-dark-light-strong: #5b488180;
  --color-border-default-dark: #6a5792;
  --color-border-default: #7966a3;
  --color-border-accent: #8875b4;
  --color-border-light: #bc9dff;

  --color-accent-primary: #8875b4; 
  --color-accent-secondary: #bc9dff; 
  --color-accent-light: #d1bbff; 

  --color-success: #6b8e5a; 
  --color-success-light: #7fa068;
  --color-success-subtle: #6b8e5a1a;
  --color-success-muted: #6b8e5a33;
  --color-success-emphasis: #6b8e5a4c;

  --color-warning: #b8864a; 
  --color-warning-subtle: #b8864a19;
  --color-warning-emphasis: #b8864a4c;
  --color-warning-light: #c9975c;
  --color-warning-text: #faf7ff;

  --color-error: #c85a7a; 
  --color-error-dark: #a04060;
  --color-error-subtle: #c85a7a1a;
  --color-error-muted: #c85a7a26;
  --color-error-emphasis: #c85a7a4c;
  --color-error-strong: #c85a7a80;
  --color-error-light: #d47490;
  --color-error-lighter: #e099b0;
  --color-error-lightest: #ecbfcf;

  --color-info: #5a7ac8;
  --color-info-light: #6c8cd4;
  --color-info-lighter: #8fa5e0;
  --color-info-lightest: #b2bdec;
  --color-info-subtle: #5a7ac81a;
  --color-info-light-muted: #5a7ac833;
  --color-info-light-emphasis: #5a7ac84c;

  // Button-specific colors
  --color-button-primary: #8875b4;
  --color-button-primary-light: #9a87c4;
  --color-button-primary-subtle: #8875b419;
  --color-button-primary-emphasis: #8875b44c;
  --color-button-primary-text: #faf7ff;

  --color-button-secondary: #5a7ac8;
  --color-button-secondary-light: #6c8cd4;
  --color-button-secondary-subtle: #5a7ac81a;
  --color-button-secondary-emphasis: #5a7ac84c;
  --color-button-secondary-text: #faf7ff;

  --color-button-danger: #c85a7a;
  --color-button-danger-light: #d47490;
  --color-button-danger-subtle: #c85a7a1a;
  --color-button-danger-emphasis: #c85a7a4c;
  --color-button-danger-text: #faf7ff;

  --color-input-bg: #3d2a5f;
  --color-input-border: #7966a3;
  --color-input-text: #faf7ff;

  --color-agent-auto-approve: #7fa068;
  --color-agent-aider-tools: #b8864a;
  --color-agent-power-tools: #8875b4;
  --color-agent-todo-tools: #5a7ac8;
  --color-agent-context-files: #a68b4a;
  --color-agent-repo-map: #6c8cd4;
  --color-agent-ai-request: #c85a7a;
  --color-agent-sub-agent: #5a7ac8;
}

================
File: src/renderer/src/themes/theme-light.scss
================
.theme-light {
  
  --color-bg-primary: #ffffff;
  --color-bg-primary-light: #f8f9fa;
  --color-bg-primary-light-strong: #f8f9fa80;
  --color-bg-secondary: #e9ecef;
  --color-bg-secondary-light: #dee2e6;
  --color-bg-secondary-light-strongest: #dee2e6f2;
  --color-bg-tertiary: #ced4da;
  --color-bg-tertiary-emphasis: #ced4da4c;
  --color-bg-tertiary-strong: #ced4da7f;
  --color-bg-fourth: #adb5bd;
  --color-bg-fourth-muted: #adb5bd33;
  --color-bg-fourth-emphasis: #adb5bd4c;
  --color-bg-fifth: #6c757d;
  --color-bg-selection: #ced4da;
  --color-bg-code-block: #f8f9fa;

  --color-bg-diff-viewer-old-primary: #fee2e2;
  --color-bg-diff-viewer-old-secondary: #fecaca;
  --color-bg-diff-viewer-new-primary: #dcfce7;
  --color-bg-diff-viewer-new-secondary: #bbf7d0;

  --color-text-primary: #212529;
  --color-text-secondary: #495057;
  --color-text-tertiary: #6c757d;
  --color-text-muted-light: #adb5bd;
  --color-text-muted: #6c757d;
  --color-text-muted-dark: #495057;
  --color-text-dark: #343a40;

  --color-border-dark: #e9ecef;
  --color-border-dark-light: #dee2e6;
  --color-border-dark-light-strong: #dee2e680;
  --color-border-default-dark: #ced4da;
  --color-border-default: #adb5bd;
  --color-border-accent: #6c757d;
  --color-border-light: #495057;

  --color-accent-primary: #6c757d;
  --color-accent-secondary: #adb5bd;
  --color-accent-light: #495057;

  --color-success: #22c55e;
  --color-success-light: #4ade80;
  --color-success-subtle: #22c55e1a;
  --color-success-muted: #22c55e33;
  --color-success-emphasis: #22c55e4c;

  --color-warning: #0ea5e9;
  --color-warning-subtle: #0ea5e919;
  --color-warning-emphasis: #0ea5e94c;
  --color-warning-light: #38bdf8;
  --color-warning-text: #ffffff;

  --color-error: #ef4444;
  --color-error-dark: #991b1b;
  --color-error-subtle: #ef44441a;
  --color-error-muted: #ef444426;
  --color-error-emphasis: #ef44444c;
  --color-error-strong: #ef444480;
  --color-error-light: #f87171;
  --color-error-lighter: #fca5a5;
  --color-error-lightest: #fecaca;

  --color-info: #2563eb;
  --color-info-light: #3b82f6;
  --color-info-lighter: #60a5fa;
  --color-info-lightest: #93c5fd;
  --color-info-subtle: #2563eb1a;
  --color-info-light-muted: #2563eb33;
  --color-info-light-emphasis: #2563eb4c;

  // Button-specific colors
  --color-button-primary: #0ea5e9;
  --color-button-primary-light: #38bdf8;
  --color-button-primary-subtle: #0ea5e919;
  --color-button-primary-emphasis: #0ea5e94c;
  --color-button-primary-text: #ffffff;

  --color-button-secondary: #2563eb;
  --color-button-secondary-light: #3b82f6;
  --color-button-secondary-subtle: #2563eb1a;
  --color-button-secondary-emphasis: #2563eb4c;
  --color-button-secondary-text: #ffffff;

  --color-button-danger: #ef4444;
  --color-button-danger-light: #f87171;
  --color-button-danger-subtle: #ef44441a;
  --color-button-danger-emphasis: #ef44444c;
  --color-button-danger-text: #ffffff;

  --color-input-bg: #f8f9fa;
  --color-input-border: #adb5bd;
  --color-input-text: #212529;

  --color-agent-auto-approve: #4ade80;
  --color-agent-aider-tools: #fb923c;
  --color-agent-power-tools: #c084fc;
  --color-agent-todo-tools: #38bdf8;
  --color-agent-context-files: #facc15;
  --color-agent-repo-map: #60a5fa;
  --color-agent-ai-request: #dc2626;
  --color-agent-sub-agent: #2563eb;
}

================
File: src/renderer/src/themes/theme-midnight.scss
================
.theme-midnight {
  
  --color-bg-primary: #000000;
  --color-bg-primary-light: #080808;
  --color-bg-primary-light-strong: #08080880;
  --color-bg-secondary: #101010;
  --color-bg-secondary-light: #181818;
  --color-bg-secondary-light-strongest: #181818f2;
  --color-bg-tertiary: #202020;
  --color-bg-tertiary-emphasis: #2020204c;
  --color-bg-tertiary-strong: #2020207f;
  --color-bg-fourth: #282828;
  --color-bg-fourth-muted: #28282833;
  --color-bg-fourth-emphasis: #2828284c;
  --color-bg-fifth: #303030;
  --color-bg-selection: #303030;
  --color-bg-code-block: #000000;

  --color-bg-diff-viewer-old-primary: #200000;
  --color-bg-diff-viewer-old-secondary: #100000;
  --color-bg-diff-viewer-new-primary: #002000;
  --color-bg-diff-viewer-new-secondary: #001000;

  --color-text-primary: #ffffff;
  --color-text-secondary: #e0e0e0;
  --color-text-tertiary: #c0c0c0;
  --color-text-muted-light: #a0a0a0;
  --color-text-muted: #808080;
  --color-text-muted-dark: #606060;
  --color-text-dark: #404040;

  --color-border-dark: #101010;
  --color-border-dark-light: #181818;
  --color-border-dark-light-strong: #18181880;
  --color-border-default-dark: #202020;
  --color-border-default: #282828;
  --color-border-accent: #303030;
  --color-border-light: #404040;

  --color-accent-primary: #303030;
  --color-accent-secondary: #282828;
  --color-accent-light: #404040;

  --color-success: #00ff00;
  --color-success-light: #40ff40;
  --color-success-subtle: #00ff001a;
  --color-success-muted: #00ff0033;
  --color-success-emphasis: #00ff004c;

  --color-warning: #ffff00;
  --color-warning-subtle: #ffff0019;
  --color-warning-emphasis: #ffff004c;
  --color-warning-light: #ffff40;
  --color-warning-text: #707020;

  --color-error: #ff0000;
  --color-error-dark: #800000;
  --color-error-subtle: #ff00001a;
  --color-error-muted: #ff000026;
  --color-error-emphasis: #ff00004c;
  --color-error-strong: #ff000080;
  --color-error-light: #ff4040;
  --color-error-lighter: #ff8080;
  --color-error-lightest: #ffc0c0;

  --color-info: #0000ff;
  --color-info-light: #4040ff;
  --color-info-lighter: #8080ff;
  --color-info-lightest: #c0c0ff;
  --color-info-subtle: #0000ff1a;
  --color-info-light-muted: #0000ff33;
  --color-info-light-emphasis: #0000ff4c;

  // Button-specific colors
  --color-button-primary: #ffff00;
  --color-button-primary-light: #ffff40;
  --color-button-primary-subtle: #ffff0019;
  --color-button-primary-emphasis: #ffff004c;
  --color-button-primary-text: #000000;

  --color-button-secondary: #0000ff;
  --color-button-secondary-light: #4040ff;
  --color-button-secondary-subtle: #0000ff1a;
  --color-button-secondary-emphasis: #0000ff4c;
  --color-button-secondary-text: #ffffff;

  --color-button-danger: #ff0000;
  --color-button-danger-light: #ff4040;
  --color-button-danger-subtle: #ff00001a;
  --color-button-danger-emphasis: #ff00004c;
  --color-button-danger-text: #ffffff;

  --color-input-bg: #080808;
  --color-input-border: #282828;
  --color-input-text: #ffffff;

  --color-agent-auto-approve: #00ff00;
  --color-agent-aider-tools: #ff8000;
  --color-agent-power-tools: #ff00ff;
  --color-agent-todo-tools: #00ffff;
  --color-agent-context-files: #ffff00;
  --color-agent-repo-map: #0080ff;
  --color-agent-ai-request: #ff0000;
  --color-agent-sub-agent: #0000ff;
}

================
File: src/renderer/src/themes/theme-neon.scss
================
.theme-neon {
  
  --color-bg-primary: #0d1117;
  --color-bg-primary-light: #161b22;
  --color-bg-primary-light-strong: #161b2280;
  --color-bg-secondary: #21262d;
  --color-bg-secondary-light: #30363d;
  --color-bg-secondary-light-strongest: #30363df2;
  --color-bg-tertiary: #484f58;
  --color-bg-tertiary-emphasis: #ff006680;
  --color-bg-tertiary-strong: #ff006640;
  --color-bg-fourth: #6e7681;
  --color-bg-fourth-muted: #00ffff33;
  --color-bg-fourth-emphasis: #00ffff4c;
  --color-bg-fifth: #8b949e;
  --color-bg-selection: #ff006640;
  --color-bg-code-block: #0a0e14;

  --color-bg-diff-viewer-old-primary: #67060c;
  --color-bg-diff-viewer-old-secondary: #490202;
  --color-bg-diff-viewer-new-primary: #033a16;
  --color-bg-diff-viewer-new-secondary: #0f2419;

  --color-text-primary: #ffffff;
  --color-text-secondary: #00ffff;
  --color-text-tertiary: #ff6600;
  --color-text-muted-light: #ff0099;
  --color-text-muted: #484f58;
  --color-text-muted-dark: #30363d;
  --color-text-dark: #21262d;

  --color-border-dark: #21262d;
  --color-border-dark-light: #30363d;
  --color-border-dark-light-strong: #30363d80;
  --color-border-default-dark: #484f58;
  --color-border-default: #00ffff;
  --color-border-accent: #ff0066;
  --color-border-light: #ffff00;

  --color-accent-primary: #00ffff;
  --color-accent-secondary: #ff0066;
  --color-accent-light: #ffff00;

  --color-success: #00ff88;
  --color-success-light: #44ff99;
  --color-success-subtle: #00ff881a;
  --color-success-muted: #00ff8833;
  --color-success-emphasis: #00ff884c;

  --color-warning: #ffaa00;
  --color-warning-subtle: #ffaa0019;
  --color-warning-emphasis: #ffaa004c;
  --color-warning-light: #ffcc33;
  --color-warning-text: #0d1117;

  --color-error: #ff3366;
  --color-error-dark: #cc0044;
  --color-error-subtle: #ff33661a;
  --color-error-muted: #ff336626;
  --color-error-emphasis: #ff33664c;
  --color-error-strong: #ff336680;
  --color-error-light: #ff6699;
  --color-error-lighter: #ff99bb;
  --color-error-lightest: #ffccdd;

  --color-info: #3366ff;
  --color-info-light: #6699ff;
  --color-info-lighter: #99ccff;
  --color-info-lightest: #cce6ff;
  --color-info-subtle: #3366ff1a;
  --color-info-light-muted: #3366ff33;
  --color-info-light-emphasis: #3366ff4c;

  // Button-specific colors
  --color-button-primary: #00ffff;
  --color-button-primary-light: #33ffff;
  --color-button-primary-subtle: #00ffff19;
  --color-button-primary-emphasis: #00ffff4c;
  --color-button-primary-text: #0d1117;

  --color-button-secondary: #3366ff;
  --color-button-secondary-light: #6699ff;
  --color-button-secondary-subtle: #3366ff1a;
  --color-button-secondary-emphasis: #3366ff4c;
  --color-button-secondary-text: #ffffff;

  --color-button-danger: #ff3366;
  --color-button-danger-light: #ff6699;
  --color-button-danger-subtle: #ff33661a;
  --color-button-danger-emphasis: #ff33664c;
  --color-button-danger-text: #ffffff;

  --color-input-bg: #161b22;
  --color-input-border: #00ffff;
  --color-input-text: #ffffff;

  --color-agent-auto-approve: #00ff88;
  --color-agent-aider-tools: #ff9900;
  --color-agent-power-tools: #cc66ff;
  --color-agent-todo-tools: #3366ff;
  --color-agent-context-files: #ffcc00;
  --color-agent-repo-map: #00ccff;
  --color-agent-ai-request: #ff0066;
  --color-agent-sub-agent: #0099ff;
}

================
File: src/renderer/src/themes/theme-neopunk.scss
================
.theme-neopunk {
  
  --color-bg-primary: #0a0a0f; 
  --color-bg-primary-light: #14141e; 
  --color-bg-primary-light-strong: #14141e80;
  --color-bg-secondary: #1a1a2e; 
  --color-bg-secondary-light: #16213e; 
  --color-bg-secondary-light-strongest: #16213ef2;
  --color-bg-tertiary: #0f3460; 
  --color-bg-tertiary-emphasis: #ff00ff4c; 
  --color-bg-tertiary-strong: #ff00ff7f; 
  --color-bg-fourth: #16213e; 
  --color-bg-fourth-muted: #00ffff33; 
  --color-bg-fourth-emphasis: #00ffff4c; 
  --color-bg-fifth: #e94560; 
  --color-bg-selection: #ff00ff40; 
  --color-bg-code-block: #050508; 

  --color-bg-diff-viewer-old-primary: #4a0e0e; 
  --color-bg-diff-viewer-old-secondary: #2a0808; 
  --color-bg-diff-viewer-new-primary: #0a4a2a; 
  --color-bg-diff-viewer-new-secondary: #062a18; 

  --color-text-primary: #ffffff; 
  --color-text-secondary: #00ffff; 
  --color-text-tertiary: #ff00ff; 
  --color-text-muted-light: #00ff88; 
  --color-text-muted: #0f3460; 
  --color-text-muted-dark: #16213e; 
  --color-text-dark: #1a1a2e; 

  --color-border-dark: #1a1a2e;
  --color-border-dark-light: #16213e;
  --color-border-dark-light-strong: #16213e80;
  --color-border-default-dark: #0f3460;
  --color-border-default: #00ffff; 
  --color-border-accent: #ff00ff; 
  --color-border-light: #00ff88; 

  --color-accent-primary: #00ffff; 
  --color-accent-secondary: #ff00ff; 
  --color-accent-light: #00ff88; 

  --color-success: #00ff88; 
  --color-success-light: #44ff99;
  --color-success-subtle: #00ff881a;
  --color-success-muted: #00ff8833;
  --color-success-emphasis: #00ff884c;

  --color-warning: #ffaa00; 
  --color-warning-subtle: #ffaa0019;
  --color-warning-emphasis: #ffaa004c;
  --color-warning-light: #ffcc33;
  --color-warning-text: #0a0a0f;

  --color-error: #ff3366; 
  --color-error-dark: #cc0044;
  --color-error-subtle: #ff33661a;
  --color-error-muted: #ff336626;
  --color-error-emphasis: #ff33664c;
  --color-error-strong: #ff336680;
  --color-error-light: #ff6699;
  --color-error-lighter: #ff99bb;
  --color-error-lightest: #ffccdd;

  --color-info: #3366ff;
  --color-info-light: #6699ff;
  --color-info-lighter: #99ccff;
  --color-info-lightest: #cce6ff;
  --color-info-subtle: #3366ff1a;
  --color-info-light-muted: #3366ff33;
  --color-info-light-emphasis: #3366ff4c;

  // Button-specific colors
  --color-button-primary: #ffaa00;
  --color-button-primary-light: #ffcc33;
  --color-button-primary-subtle: #ffaa0019;
  --color-button-primary-emphasis: #ffaa004c;
  --color-button-primary-text: #0a0a0f;

  --color-button-secondary: #3366ff;
  --color-button-secondary-light: #6699ff;
  --color-button-secondary-subtle: #3366ff1a;
  --color-button-secondary-emphasis: #3366ff4c;
  --color-button-secondary-text: #ffffff;

  --color-button-danger: #ff3366;
  --color-button-danger-light: #ff6699;
  --color-button-danger-subtle: #ff33661a;
  --color-button-danger-emphasis: #ff33664c;
  --color-button-danger-text: #ffffff;

  --color-input-bg: #14141e;
  --color-input-border: #00ffff;
  --color-input-text: #ffffff;

  --color-agent-auto-approve: #00ff88;
  --color-agent-aider-tools: #ff6600;
  --color-agent-power-tools: #ff00ff;
  --color-agent-todo-tools: #00ccff;
  --color-agent-context-files: #ffff00;
  --color-agent-repo-map: #ff0099;
  --color-agent-ai-request: #ff3366;
  --color-agent-sub-agent: #3366ff;
}

================
File: src/renderer/src/themes/theme-ocean.scss
================
.theme-ocean {
  
  --color-bg-primary: #0c4a6e; 
  --color-bg-primary-light: #075985; 
  --color-bg-primary-light-strong: #07598580;
  --color-bg-secondary: #0369a1; 
  --color-bg-secondary-light: #0284c7; 
  --color-bg-secondary-light-strongest: #0284c7f2;
  --color-bg-tertiary: #0ea5e9; 
  --color-bg-tertiary-emphasis: #0ea5e94c;
  --color-bg-tertiary-strong: #0ea5e97f;
  --color-bg-fourth: #38bdf8; 
  --color-bg-fourth-muted: #38bdf833;
  --color-bg-fourth-emphasis: #38bdf84c;
  --color-bg-fifth: #7dd3fc; 
  --color-bg-selection: #0ea5e9;
  --color-bg-code-block: #082f49; 

  --color-bg-diff-viewer-old-primary: #7c2d12; 
  --color-bg-diff-viewer-old-secondary: #571c0c; 
  --color-bg-diff-viewer-new-primary: #134e4a; 
  --color-bg-diff-viewer-new-secondary: #0f3027; 

  --color-text-primary: #f0f9ff; 
  --color-text-secondary: #bae6fd; 
  --color-text-tertiary: #7dd3fc; 
  --color-text-muted-light: #38bdf8; 
  --color-text-muted: #0ea5e9; 
  --color-text-muted-dark: #0284c7; 
  --color-text-dark: #0369a1; 

  --color-border-dark: #0369a1;
  --color-border-dark-light: #0284c7;
  --color-border-dark-light-strong: #0284c780;
  --color-border-default-dark: #0ea5e9;
  --color-border-default: #38bdf8;
  --color-border-accent: #7dd3fc;
  --color-border-light: #bae6fd;

  --color-accent-primary: #7dd3fc; 
  --color-accent-secondary: #38bdf8; 
  --color-accent-light: #bae6fd; 

  --color-success: #06b6d4; 
  --color-success-light: #22d3ee; 
  --color-success-subtle: #06b6d41a;
  --color-success-muted: #06b6d433;
  --color-success-emphasis: #06b6d44c;

  --color-warning: #f59e0b; 
  --color-warning-subtle: #f59e0b19;
  --color-warning-emphasis: #f59e0b4c;
  --color-warning-light: #fbbf24; 
  --color-warning-text: #0c4a6e; 

  --color-error: #dc2626; 
  --color-error-dark: #991b1b;
  --color-error-subtle: #dc26261a;
  --color-error-muted: #dc262626;
  --color-error-emphasis: #dc26264c;
  --color-error-strong: #dc262680;
  --color-error-light: #ef4444;
  --color-error-lighter: #f87171;
  --color-error-lightest: #fecaca;

  --color-info: #0ea5e9;
  --color-info-light: #38bdf8;
  --color-info-lighter: #7dd3fc;
  --color-info-lightest: #bae6fd;
  --color-info-subtle: #0ea5e91a;
  --color-info-light-muted: #0ea5e933;
  --color-info-light-emphasis: #0ea5e94c;

  // Button-specific colors
  --color-button-primary: #7dd3fc;
  --color-button-primary-light: #bae6fd;
  --color-button-primary-subtle: #7dd3fc19;
  --color-button-primary-emphasis: #7dd3fc4c;
  --color-button-primary-text: #0c4a6e;

  --color-button-secondary: #0ea5e9;
  --color-button-secondary-light: #38bdf8;
  --color-button-secondary-subtle: #0ea5e91a;
  --color-button-secondary-emphasis: #0ea5e94c;
  --color-button-secondary-text: #f0f9ff;

  --color-button-danger: #dc2626;
  --color-button-danger-light: #ef4444;
  --color-button-danger-subtle: #dc26261a;
  --color-button-danger-emphasis: #dc26264c;
  --color-button-danger-text: #f0f9ff;

  --color-input-bg: #075985;
  --color-input-border: #38bdf8;
  --color-input-text: #f0f9ff;

  --color-agent-auto-approve: #22d3ee;
  --color-agent-aider-tools: #f59e0b;
  --color-agent-power-tools: #8b5cf6;
  --color-agent-todo-tools: #38bdf8;
  --color-agent-context-files: #06b6d4;
  --color-agent-repo-map: #60a5fa;
  --color-agent-ai-request: #dc2626;
  --color-agent-sub-agent: #1d4ed8;
}

================
File: src/renderer/src/themes/theme-serenity.scss
================
.theme-serenity {

  --color-bg-primary: #e8e6e3;
  --color-bg-primary-light: #e2e0dc;
  --color-bg-primary-light-strong: #e2e0dc80;
  --color-bg-secondary: #d9d6d1;
  --color-bg-secondary-light: #cfc9c2;
  --color-bg-secondary-light-strongest: #cfc9c2f2;
  --color-bg-tertiary: #c4bdb4;
  --color-bg-tertiary-emphasis: #c4bdb44c;
  --color-bg-tertiary-strong: #c4bdb47f;
  --color-bg-fourth: #b5aca0;
  --color-bg-fourth-muted: #b5aca033;
  --color-bg-fourth-emphasis: #b5aca04c;
  --color-bg-fifth: #9d9186;
  --color-bg-selection: #c4bdb4;
  --color-bg-code-block: #f8f3ee;

  --color-bg-diff-viewer-old-primary: #fee2e2;
  --color-bg-diff-viewer-old-secondary: #fecaca;
  --color-bg-diff-viewer-new-primary: #dcfce7;
  --color-bg-diff-viewer-new-secondary: #bbf7d0;

  --color-text-primary: #3a3530;
  --color-text-secondary: #4a453f;
  --color-text-tertiary: #5a544d;
  --color-text-muted-light: #8a7f73;
  --color-text-muted: #6a5f53;
  --color-text-muted-dark: #4a453f;
  --color-text-dark: #2a251f;

  --color-border-dark: #d9d6d1;
  --color-border-dark-light: #cfc9c2;
  --color-border-dark-light-strong: #cfc9c280;
  --color-border-default-dark: #c4bdb4;
  --color-border-default: #b5aca0;
  --color-border-accent: #9d9186;
  --color-border-light: #5a544d;

  --color-accent-primary: #7a6b5d;
  --color-accent-secondary: #9d8b7a;
  --color-accent-light: #b5a394;

  --color-success: #6b8e5a;
  --color-success-light: #8ba876;
  --color-success-subtle: #6b8e5a1a;
  --color-success-muted: #6b8e5a33;
  --color-success-emphasis: #6b8e5a4c;

  --color-warning: #b8956a;
  --color-warning-subtle: #b8956a19;
  --color-warning-emphasis: #b8956a4c;
  --color-warning-light: #d4b887;
  --color-warning-text: #ffffff;

  --color-error: #a66b5b;
  --color-error-dark: #8b5a4a;
  --color-error-subtle: #a66b5b1a;
  --color-error-muted: #a66b5b26;
  --color-error-emphasis: #a66b5b4c;
  --color-error-strong: #a66b5b80;
  --color-error-light: #c18a7a;
  --color-error-lighter: #d4a394;
  --color-error-lightest: #e8c4b8;

  --color-info: #7a8ba6;
  --color-info-light: #9aa8bd;
  --color-info-lighter: #b5c2d1;
  --color-info-lightest: #d1dae6;
  --color-info-subtle: #7a8ba61a;
  --color-info-light-muted: #7a8ba633;
  --color-info-light-emphasis: #7a8ba64c;

  // Button-specific colors
  --color-button-primary: #7a6b5d;
  --color-button-primary-light: #9d8b7a;
  --color-button-primary-subtle: #7a6b5d1a;
  --color-button-primary-emphasis: #7a6b5d4c;
  --color-button-primary-text: #f5f2ed;

  --color-button-secondary: #5a544d;
  --color-button-secondary-light: #6a5f53;
  --color-button-secondary-subtle: #5a544d1a;
  --color-button-secondary-emphasis: #5a544d4c;
  --color-button-secondary-text: #f5f2ed;

  --color-button-danger: #a66b5b;
  --color-button-danger-light: #c18a7a;
  --color-button-danger-subtle: #a66b5b1a;
  --color-button-danger-emphasis: #a66b5b4c;
  --color-button-danger-text: #f5f2ed;

  --color-input-bg: #ddd9d4;
  --color-input-border: #b5aca0;
  --color-input-text: #3a3530;

  --color-agent-auto-approve: #8ba876;
  --color-agent-aider-tools: #d4b887;
  --color-agent-power-tools: #b5a394;
  --color-agent-todo-tools: #9aa8bd;
  --color-agent-context-files: #c9b896;
  --color-agent-repo-map: #b5c2d1;
  --color-agent-ai-request: #a66b5b;
  --color-agent-sub-agent: #7a8ba6;
}

================
File: src/renderer/src/themes/themes.scss
================
@use 'theme-dark.scss';
@use 'theme-light.scss';
@use 'theme-bw.scss';
@use 'theme-midnight.scss';
@use 'theme-neon.scss';
@use 'theme-ocean.scss';
@use 'theme-forest.scss';
@use 'theme-charcoal.scss';
@use 'theme-lavender.scss';
@use 'theme-neopunk.scss';
@use 'theme-aurora.scss';
@use 'theme-serenity.scss';
@use 'theme-cappuccino.scss';

================
File: src/renderer/src/types/message.ts
================
import { Group, Mode, PromptContext, TokensInfoData, UsageReportData } from '@common/types';
⋮----
export interface Message {
  id: string;
  type: 'user' | 'response' | 'loading' | 'reflected-message' | 'command-output' | 'log' | 'tokens-info' | 'tool' | 'group';
  content: string;
  promptContext?: PromptContext;
  children?: Message[];
}
⋮----
export interface UserMessage extends Message {
  type: 'user';
  mode?: Mode;
}
⋮----
export interface ResponseMessage extends Message {
  type: 'response';
  processing: boolean;
  usageReport?: UsageReportData;
}
⋮----
export interface ReflectedMessage extends Message {
  type: 'reflected-message';
  responseMessageId: string;
}
⋮----
export interface LogMessage extends Message {
  type: 'log';
  level: 'info' | 'warning' | 'error';
}
⋮----
export interface LoadingMessage extends Message {
  type: 'loading';
}
⋮----
export interface CommandOutputMessage extends Message {
  type: 'command-output';
  command: string;
}
⋮----
export interface TokensInfoMessage extends Message {
  type: 'tokens-info';
  info: TokensInfoData;
}
⋮----
export interface ToolMessage extends Message {
  type: 'tool';
  serverName: string;
  toolName: string;
  args: Record<string, unknown>;
  content: string; // Empty while executing, contains result when complete
  usageReport?: UsageReportData;
}
⋮----
content: string; // Empty while executing, contains result when complete
⋮----
export const isUserMessage = (message: Message): message is UserMessage =>
⋮----
export const isResponseMessage = (message: Message): message is ResponseMessage =>
⋮----
export const isLogMessage = (message: Message): message is LogMessage =>
⋮----
export const isLoadingMessage = (message: Message): message is LoadingMessage =>
⋮----
export const isReflectedMessage = (message: Message): message is ReflectedMessage =>
⋮----
export const isCommandOutputMessage = (message: Message): message is CommandOutputMessage =>
⋮----
export const isTokensInfoMessage = (message: Message): message is TokensInfoMessage =>
⋮----
export const isToolMessage = (message: Message): message is ToolMessage =>
⋮----
export interface GroupMessage extends Message {
  type: 'group';
  group: Group;
  children: Message[];
}
⋮----
export const isGroupMessage = (message: Message): message is GroupMessage =>

================
File: src/renderer/src/utils/notifications.ts
================
import { toast } from 'react-toastify';
⋮----
import type { ToastOptions } from 'react-toastify';
⋮----
const getOptions = (): ToastOptions => (
⋮----
export const showSuccessNotification = (message: string) =>
⋮----
export const showErrorNotification = (message: string) =>
⋮----
export const showInfoNotification = (message: string) =>
⋮----
export const showWarningNotification = (message: string) =>

================
File: src/renderer/src/utils/routes.ts
================


================
File: src/renderer/src/utils/string-utils.ts
================
import type { TFunction } from 'i18next';
⋮----
export const formatHumanReadable = (t: TFunction, value: number): string =>

================
File: src/renderer/src/App.tsx
================
import { AnimatePresence, motion } from 'framer-motion';
import { useEffect, useState } from 'react';
import { HashRouter as Router, Navigate, Route, Routes, useLocation } from 'react-router-dom';
import { ToastContainer } from 'react-toastify';
import { useTranslation } from 'react-i18next';
import { THEMES } from '@common/types';
⋮----
import { useResponsive } from '@/hooks/useResponsive';
import { Onboarding } from '@/pages/Onboarding';
import { Home } from '@/pages/Home';
import { ContextMenuProvider, useContextMenu } from '@/context/ContextMenuContext';
import { SettingsProvider, useSettings } from '@/context/SettingsContext';
⋮----
import { ROUTES } from '@/utils/routes';
⋮----
import { StyledTooltip } from '@/components/common/StyledTooltip';
import { ApiProvider } from '@/context/ApiContext';
import { ModelProviderProvider } from '@/contexts/ModelProviderContext';
⋮----
const ThemeAndFontManager = () =>
⋮----
// Remove all theme classes first
⋮----
// Add the current theme class, default to dark
⋮----
const App = () =>
⋮----
useEffect(() =>

================
File: src/renderer/src/env.d.ts
================
/// <reference types="vite/client" />

================
File: src/renderer/src/fonts.css
================
@font-face {

================
File: src/renderer/src/main.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;
⋮----
.react-resizable {
⋮----
.react-resizable-handle {
⋮----
.react-resizable-handle::before {
⋮----
@layer base {
⋮----
html {
⋮----
:root {
⋮----
body {
⋮----
* {
⋮----
code {
⋮----
.cm-fat-cursor {
⋮----
.cm-placeholder {
⋮----
.cm-line {
⋮----
.cm-tooltip-autocomplete {
⋮----
.cm-tooltip-autocomplete > ul {
⋮----
.cm-tooltip-autocomplete > ul > li {
⋮----
.cm-tooltip-autocomplete-detail {
⋮----
.cm-tooltip-autocomplete-chip {
⋮----
.cm-tooltip-autocomplete > ul > li:hover {
⋮----
.cm-tooltip-autocomplete > ul > li[aria-selected] {
⋮----
/* Scrollbar styles for Webkit browsers */
.cm-tooltip-autocomplete::-webkit-scrollbar {
⋮----
.cm-tooltip-autocomplete::-webkit-scrollbar-track {
⋮----
.cm-tooltip-autocomplete::-webkit-scrollbar-thumb {
⋮----
.cm-tooltip-autocomplete::-webkit-scrollbar-thumb:hover {
⋮----
::selection {

================
File: src/renderer/src/main.tsx
================
import ReactDOM from 'react-dom/client';
⋮----
import App from './App';

================
File: src/renderer/index.html
================
<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <title>AiderDesk</title>
    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com; img-src 'self' data: file:; font-src 'self' https://fonts.gstatic.com; connect-src 'self' http: https: ws: wss:;"
    />
    <link rel="stylesheet" href="/src/fonts.css">
  </head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: src/renderer/progress.html
================
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Starting AiderDesk...</title>
  <style>
    body {
      margin: 0;
      padding: 20px;
      background-color: #222431;
      color: #f1f3f5;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      display: flex;
      flex-direction: column;
      height: 100vh;
      box-sizing: border-box;
    }
    .text {
      font-size: 14px;
      font-weight: bold;
      margin-bottom: 8px;
    }
    .subtitle {
      font-size: 11px;
      color: #999ba3;
      margin-bottom: 4px;
      display: none;
    }

    .detail {
      font-size: 12px;
      color: #999ba3;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .spinner {
      width: 14px;
      height: 14px;
      border: 2px solid rgba(88, 92, 117, 0.3);
      border-top-color: #585c75;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      flex-shrink: 0;
      display: none;
    }
    @keyframes spin {
      to { transform: rotate(360deg); }
    }
    .progress-container {
      height: 16px;
      background-color: #191a22;
      border-radius: 2px;
      overflow: hidden;
      margin-bottom: 8px;
    }
    .progress-bar {
      height: 100%;
      width: 0;
      background-color: #3d4166;
      border-radius: 2px;
      transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1), background-color 0.3s ease;
    }
    .completed .progress-bar {
      width: 100% !important;
      background-color: #3b82f6;
    }
  </style>
</head>
<body>
  <div class="text" id="text">Starting AiderDesk...</div>
  <div class="detail" id="detail">
    <span id="detail-text">Initializing...</span>
    <div class="spinner" id="spinner"></div>
  </div>
  <div class="subtitle" id="subtitle">This may take a while...</div>
  <div class="progress-container">
    <div class="progress-bar" id="progress-bar"></div>
  </div>

  <script>
    const { ipcRenderer } = require('electron');

    ipcRenderer.on('set-title', (_, title) => {
      document.getElementById('text').textContent = title;
    });

    ipcRenderer.on('set-detail', (_, value, subtitle) => {
      const messageEl = document.getElementById('detail-text');
      const spinnerEl = document.getElementById('spinner');
      const infoEl = document.getElementById('subtitle');

      messageEl.textContent = value;
      const showSpinner = /installing|package|aider|connector|requirements|python|uv|venv/i.test(value.toLowerCase());
      spinnerEl.style.display = showSpinner ? 'block' : 'none';

      infoEl.textContent = subtitle || '';
      infoEl.style.display = subtitle ? 'block' : 'none';
    });

    ipcRenderer.on('set-completed', () => {
      document.body.classList.add('completed');
    });

    const progressBar = document.getElementById('progress-bar');

    ipcRenderer.on('set-progress', (_, progress) => {
      progressBar.style.width = `${Math.min(100, Math.max(0, progress))}%`;
    });
  </script>
</body>
</html>

================
File: electron-builder.yml
================
appId: com.hotovo.aider-desk
productName: aider-desk
directories:
  buildResources: build
files:
  - '!**/.vscode/*'
  - '!src/*'
  - '!electron.vite.config.{js,ts,mjs,cjs}'
  - '!{.eslintignore,.eslintrc.cjs,.prettierignore,.prettierrc.yaml,dev-app-update.yml,CHANGELOG.md,README.md}'
  - '!{.env,.env.*,.npmrc,pnpm-lock.yaml}'
  - '!{tsconfig.json,tsconfig.node.json,tsconfig.web.json}'
extraResources:
  - from: ./resources/connector
    to: connector
    filter:
      - '**/*'
  - from: ./out/mcp-server
    to: mcp-server
    filter:
      - '**/*'
beforePack: scripts/before-pack.js
win:
  executableName: aider-desk
  icon: resources/icon.png
  extraResources:
    - from: ./resources/win
      to: win
      filter:
        - '**/*'
nsis:
  artifactName: ${name}-${version}-setup.${ext}
  shortcutName: ${productName}
  uninstallDisplayName: ${productName}
  createDesktopShortcut: always
mac:
  category: public.app-category.developer-tools
  target:
    - target: default
  artifactName: ${productName}-${version}-macos-${arch}.${ext}
  type: distribution
  hardenedRuntime: true
  entitlements: build/entitlements.mac.plist
  entitlementsInherit: build/entitlements.mac.plist
  extendInfo:
    - NSMicrophoneUsageDescription: Application requests access to the device's microphone.
  gatekeeperAssess: false
  notarize: true
  extraResources:
    - from: ./resources/macos
      to: macos
      filter:
        - '**/*'
dmg:
  artifactName: ${name}-${version}-macos-${arch}.${ext}
linux:
  target:
    - AppImage
    - deb
    - rpm
  maintainer: Hotovo
  category: Utility
  extraResources:
    - from: ./resources/linux
      to: linux
      filter:
        - '**/*'
appImage:
  artifactName: ${name}-${version}.${ext}
deb:
  compression: 'gz'
npmRebuild: true
publish:
  provider: github
  releaseType: draft
  vPrefixedTagName: true
  publishAutoUpdate: true

================
File: electron.vite.config.ts
================
import { resolve } from 'path';
⋮----
import { defineConfig, externalizeDepsPlugin } from 'electron-vite';
import react from '@vitejs/plugin-react';
import tsconfigPaths from 'vite-tsconfig-paths';
import prism from 'vite-plugin-prismjs';

================
File: package.json
================
{
  "name": "aider-desk",
  "version": "0.34.0-dev",
  "description": "Aider desktop application wrapper",
  "main": "./out/main/index.js",
  "author": "Hotovo",
  "homepage": "https://aiderdesk.hotovo.com",
  "repository": {
    "type": "git",
    "url": "https://github.com/hotovo/aider-desk.git"
  },
  "scripts": {
    "format": "prettier --write .",
    "lint": "eslint src --fix",
    "typecheck:node": "tsc --noEmit -p tsconfig.node.json --composite false",
    "typecheck:web": "tsc --noEmit -p tsconfig.web.json --composite false",
    "typecheck:mcp": "tsc --noEmit -p tsconfig.mcp-server.json --composite false",
    "typecheck": "npm run typecheck:node && npm run typecheck:web && npm run typecheck:mcp",
    "start": "electron-vite preview",
    "dev": "electron-vite dev",
    "dev:no-hmr": "NO_HMR=true electron-vite dev",
    "build:mcp": "esbuild src/mcp-server/aider-desk-mcp-server.ts --bundle --platform=node --outdir=out/mcp-server",
    "build": "npm run typecheck && electron-vite build && npm run build:mcp",
    "postinstall": "electron-builder install-app-deps && node scripts/download-uv.mjs && patch-package",
    "build:unpack": "npm run build && electron-builder --dir",
    "build:win": "npm run build && electron-builder --win",
    "build:mac": "npm run build && electron-builder --mac",
    "build:linux": "npm run build && electron-builder --linux",
    "prepare": "husky"
  },
  "dependencies": {
    "@ai-sdk/amazon-bedrock": "^2.2.12",
    "@ai-sdk/anthropic": "^1.2.12",
    "@ai-sdk/azure": "^1.3.25",
    "@ai-sdk/cerebras": "^0.2.16",
    "@ai-sdk/deepseek": "^0.2.16",
    "@ai-sdk/google": "^1.2.22",
    "@ai-sdk/google-vertex": "^2.2.27",
    "@ai-sdk/groq": "^1.2.9",
    "@ai-sdk/openai": "^1.3.24",
    "@aws-crypto/sha256-js": "^5.0.0",
    "@aws-sdk/client-bedrock": "^3.887.0",
    "@aws-sdk/credential-provider-node": "^3.772.0",
    "@aws-sdk/credential-providers": "^3.782.0",
    "@aws-sdk/types": "^3.540.0",
    "@buger/probe": "^0.6.0-rc53",
    "@codemirror/autocomplete": "^6.18.7",
    "@dnd-kit/core": "^6.3.1",
    "@dnd-kit/sortable": "^10.0.0",
    "@dotenvx/dotenvx": "^1.24.5",
    "@electron-toolkit/preload": "^3.0.2",
    "@electron-toolkit/utils": "^4.0.0",
    "@google-cloud/aiplatform": "^5.7.0",
    "@headlessui/react": "^2.2.0",
    "@homebridge/node-pty-prebuilt-multiarch": "^0.13.1",
    "@n8n/json-schema-to-zod": "^1.1.0",
    "@openrouter/ai-sdk-provider": "^0.7.5",
    "@opentelemetry/auto-instrumentations-node": "^0.62.0",
    "@opentelemetry/sdk-node": "^0.203.0",
    "@opentelemetry/sdk-trace-base": "^2.0.1",
    "@reactuses/core": "^6.0.6",
    "@replit/codemirror-vim": "^6.3.0",
    "@requesty/ai-sdk": "^0.0.9",
    "@smithy/eventstream-codec": "^2.0.0",
    "@smithy/protocol-http": "^3.3.0",
    "@smithy/signature-v4": "^2.0.0",
    "@smithy/util-utf8": "^2.0.0",
    "@tanstack/react-table": "^8.21.3",
    "@tanstack/react-virtual": "^3.13.12",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@uiw/codemirror-theme-github": "^4.23.12",
    "@uiw/react-codemirror": "4.25.1",
    "@uiw/react-color-sketch": "^2.8.0",
    "@xterm/addon-fit": "^0.10.0",
    "@xterm/addon-web-links": "^0.11.0",
    "@xterm/xterm": "^5.5.0",
    "ai": "^4.3.16",
    "axios": "^1.8.3",
    "babel-plugin-react-compiler": "^19.1.0-rc.3",
    "better-sqlite3": "^12.0.0",
    "cheerio": "^1.0.0",
    "chokidar": "^4.0.3",
    "cloudflared": "^0.7.1",
    "clsx": "^2.1.1",
    "cors": "^2.8.5",
    "electron-store": "^10.1.0",
    "electron-updater": "^6.6.2",
    "express": "^4.21.2",
    "file-type": "^21.0.0",
    "fix-path": "^4.0.0",
    "focus-trap-react": "^11.0.3",
    "framer-motion": "^11.18.2",
    "glob": "^11.0.2",
    "google-auth-library": "^10.3.0",
    "gpt-tokenizer": "^2.9.0",
    "html-to-image": "^1.11.13",
    "i18next": "^24.2.3",
    "i18next-browser-languagedetector": "^8.0.4",
    "istextorbinary": "^9.5.0",
    "js-tiktoken": "^1.0.20",
    "langfuse-vercel": "^3.38.4",
    "lodash": "^4.17.21",
    "mark.js": "^8.11.1",
    "match-sorter": "^8.0.0",
    "object-hash": "^3.0.0",
    "ollama-ai-provider": "^1.2.0",
    "os-name": "^6.0.0",
    "patch-package": "^8.0.0",
    "posthog-node": "^4.18.0",
    "prismjs": "^1.29.0",
    "react-compiler-runtime": "^19.1.0-rc.2",
    "react-complex-tree": "^2.4.5",
    "react-country-flag": "^3.1.0",
    "react-datepicker": "^8.4.0",
    "react-diff-view": "^3.3.1",
    "react-hotkeys-hook": "^4.6.2",
    "react-i18next": "^15.4.1",
    "react-icons": "^5.5.0",
    "react-markdown": "^10.1.0",
    "react-resizable": "^3.0.5",
    "react-router-dom": "^7.0.1",
    "react-textarea-autosize": "^8.5.6",
    "react-toastify": "^10.0.6",
    "react-tooltip": "^5.28.0",
    "recharts": "^3.0.2",
    "refractor": "^3.6.0",
    "rehype-autolink-headings": "^7.1.0",
    "rehype-slug": "^6.0.0",
    "remark-gfm": "^4.0.1",
    "simple-git": "^3.27.0",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1",
    "tailwind-merge": "^3.3.1",
    "textarea-caret": "^3.1.0",
    "tmp": "^0.2.3",
    "tree-kill": "^1.2.2",
    "turndown": "^7.2.1",
    "unidiff": "^1.0.4",
    "uuid": "^11.0.2",
    "vite-plugin-prismjs": "^0.0.11",
    "winston": "^3.17.0",
    "winston-daily-rotate-file": "^5.0.0",
    "ws": "^8.18.0",
    "yaml": "^2.8.0",
    "yaml-front-matter": "^4.1.1",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@electron-toolkit/tsconfig": "^1.0.1",
    "@electron/notarize": "^3.0.2",
    "@eslint/js": "^9.33.0",
    "@modelcontextprotocol/sdk": "^1.15.1",
    "@tailwindcss/typography": "^0.5.16",
    "@types/better-sqlite3": "^7.6.13",
    "@types/lodash": "^4.17.17",
    "@types/node": "^20.14.8",
    "@types/object-hash": "^3.0.6",
    "@types/prismjs": "^1.26.5",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@types/react-resizable": "^3.0.8",
    "@types/refractor": "^3.4.1",
    "@types/socket.io": "^3.0.1",
    "@types/textarea-caret": "^3.0.3",
    "@types/tmp": "^0.2.6",
    "@types/yaml-front-matter": "^4.1.3",
    "@vitejs/plugin-react": "^4.3.1",
    "adm-zip": "^0.5.16",
    "autoprefixer": "^10.4.20",
    "electron": "^37.6.0",
    "electron-builder": "^26.0.12",
    "electron-vite": "^4.0.0",
    "esbuild": "^0.25.9",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-import-resolver-typescript": "^3.7.0",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-prettier": "^5.2.1",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^6.0.0",
    "globals": "^15.9.0",
    "husky": "^9.1.7",
    "lint-staged": "^15.4.1",
    "node-fetch": "^3.3.2",
    "prettier": "^3.3.2",
    "react": "19.1.1",
    "react-dom": "19.1.1",
    "sass-embedded": "^1.89.0",
    "tailwind-scrollbar": "^3.1.0",
    "tailwindcss": "^3.4.14",
    "tar": "^7.4.3",
    "typescript": "^5.5.2",
    "typescript-eslint": "^8.21.0",
    "vite": "^5.4.19",
    "vite-tsconfig-paths": "^5.1.0"
  },
  "lint-staged": {
    "*.{ts,tsx}": "eslint --fix"
  }
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
⋮----
// Theme-based colors
⋮----
const extractColorVars = (colorObj, colorGroup = '') => {
return Object.keys(colorObj).reduce((vars, colorKey) => {
⋮----
: extractColorVars(value, `-${colorKey}`);
⋮----
addBase({
':root': extractColorVars(theme('colors')),





================================================================
End of Codebase
================================================================
