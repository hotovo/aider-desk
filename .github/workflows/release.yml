name: Release

on:
  workflow_dispatch: # Manual trigger

jobs:
  release-linux-x64:
    name: Release Linux x64 packages
    runs-on: ubuntu-latest
    container:
      image: electronuserland/builder
      env:
        TAR_OPTIONS: "--format=ustar"
        GH_TOKEN: ${{ secrets.GH_TOKEN }}

    steps:
      - uses: "actions/checkout@v1"

      - uses: "actions/setup-node@v4"
        with:
          node-version: '22.17.0'

      - run: npm install --arch=x64

      - name: Release Linux x64
        run: npm run build:linux -- --x64 -p always

      - name: Upload latest-linux.yml artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-linux-x64-yml
          path: dist/latest-linux.yml

  release-linux-arm64:
    name: Release Linux arm64 packages
    runs-on: ubuntu-latest-arm64

    steps:
      - uses: "actions/checkout@v1"

      - uses: "actions/setup-node@v4"
        with:
          node-version: '22.17.0'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev
          sudo gem install fpm

      - run: npm install --arch=arm64

      - name: Release Linux arm64
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build:linux -- --arm64 -p always

      - name: Upload latest-linux.yml artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-linux-arm64-yml
          path: dist/latest-linux.yml

  release-win-x64:
    name: Release Windows x64 packages
    runs-on: windows-latest

    steps:
      - name: Preserve $HOME set in the container
        run: echo HOME=/root >> "$GITHUB_ENV"

      - uses: "actions/checkout@v1"

      - uses: "actions/setup-node@v4"
        with:
          node-version: '22.17.0'

      - run: npm install --arch=x64

      - name: Release Windows x64
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build && npx electron-builder --win --x64 -p always

      - name: Upload latest.yml artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-win-x64-yml
          path: dist/latest.yml

  release-win-arm64:
    name: Release Windows arm64 packages
    runs-on: windows-latest

    steps:
      - name: Preserve $HOME set in the container
        run: echo HOME=/root >> "$GITHUB_ENV"

      - uses: "actions/checkout@v1"

      - uses: "actions/setup-node@v4"
        with:
          node-version: '22.17.0'

      - run: npm install --arch=arm64

      - name: Release Windows arm64
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run build && npx electron-builder --win --arm64 -p always

      - name: Upload latest.yml artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-win-arm64-yml
          path: dist/latest.yml

  release-macos-x64:
    name: Release macOS x64 packages
    runs-on: macos-latest

    steps:
      - uses: "actions/checkout@v1"

      - uses: "actions/setup-node@v4"
        with:
          node-version: '22.17.0'

      - run: npm install --arch=x64

      - name: Create certificate.p12
        run: echo "$encoded_p12" | base64 --decode > certificate.p12
        env:
          encoded_p12: ${{ secrets.CSC_BASE64 }}

      - name: Release macOS x64
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: "./certificate.p12"
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

        run: npm run build:mac -- --x64 -p always

      - name: Upload latest-mac.yml artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-mac-x64-yml
          path: dist/latest-mac.yml

  release-macos-arm64:
    name: Release macOS arm64 packages
    runs-on: macos-14

    steps:
      - uses: "actions/checkout@v1"

      - uses: "actions/setup-node@v4"
        with:
          node-version: '22.17.0'

      - run: npm install --arch=arm64

      - name: Create certificate.p12
        run: echo "$encoded_p12" | base64 --decode > certificate.p12
        env:
          encoded_p12: ${{ secrets.CSC_BASE64 }}

      - name: Release macOS arm64
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: "./certificate.p12"
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

        run: npm run build:mac -- --arm64 -p always

      - name: Upload latest-mac.yml artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-mac-arm64-yml
          path: dist/latest-mac.yml

  combine-yml-files:
    name: Combine yml files
    runs-on: ubuntu-latest
    needs: [release-linux-x64, release-linux-arm64, release-win-x64, release-win-arm64, release-macos-x64, release-macos-arm64]

    steps:
      - uses: "actions/checkout@v1"

      - uses: "actions/setup-node@v4"
        with:
          node-version: '22.17.0'

      - name: Download Linux x64 yml artifact
        uses: actions/download-artifact@v4
        with:
          name: latest-linux-x64-yml
          path: artifacts/linux-x64/

      - name: Download Linux arm64 yml artifact
        uses: actions/download-artifact@v4
        with:
          name: latest-linux-arm64-yml
          path: artifacts/linux-arm64/

      - name: Download Windows x64 yml artifact
        uses: actions/download-artifact@v4
        with:
          name: latest-win-x64-yml
          path: artifacts/win-x64/

      - name: Download Windows arm64 yml artifact
        uses: actions/download-artifact@v4
        with:
          name: latest-win-arm64-yml
          path: artifacts/win-arm64/

      - name: Download macOS x64 yml artifact
        uses: actions/download-artifact@v4
        with:
          name: latest-mac-x64-yml
          path: artifacts/mac-x64/

      - name: Download macOS arm64 yml artifact
        uses: actions/download-artifact@v4
        with:
          name: latest-mac-arm64-yml
          path: artifacts/mac-arm64/

      - name: Combine yml files
        run: |
          cat > combine-yml.js << 'EOF'
          const fs = require('fs');
          const yaml = require('js-yaml');

          // Read all yml files
          const linuxX64Content = fs.readFileSync('artifacts/linux-x64/latest-linux.yml', 'utf8');
          const linuxArm64Content = fs.readFileSync('artifacts/linux-arm64/latest-linux.yml', 'utf8');
          const winX64Content = fs.readFileSync('artifacts/win-x64/latest.yml', 'utf8');
          const winArm64Content = fs.readFileSync('artifacts/win-arm64/latest.yml', 'utf8');
          const macX64Content = fs.readFileSync('artifacts/mac-x64/latest-mac.yml', 'utf8');
          const macArm64Content = fs.readFileSync('artifacts/mac-arm64/latest-mac.yml', 'utf8');

          // Parse yml content
          const linuxX64Data = yaml.load(linuxX64Content);
          const linuxArm64Data = yaml.load(linuxArm64Content);
          const winX64Data = yaml.load(winX64Content);
          const winArm64Data = yaml.load(winArm64Content);
          const macX64Data = yaml.load(macX64Content);
          const macArm64Data = yaml.load(macArm64Content);

          // Combine files arrays for each OS
          const linuxCombined = {
            ...linuxArm64Data,
            files: [...linuxX64Data.files, ...linuxArm64Data.files]
          };

          const windowsCombined = {
            ...winArm64Data,
            files: [...winX64Data.files, ...winArm64Data.files]
          };

          const macCombined = {
            ...macArm64Data,
            files: [...macX64Data.files, ...macArm64Data.files]
          };

          // Write combined yml files
          fs.writeFileSync('latest-linux.yml', yaml.dump(linuxCombined));
          fs.writeFileSync('latest.yml', yaml.dump(windowsCombined));
          fs.writeFileSync('latest-mac.yml', yaml.dump(macCombined));
          console.log('Combined yml files created successfully');
          EOF

          npm install js-yaml
          node combine-yml.js

      - name: Find draft release tag
        id: find-release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Get the draft release tag
          RELEASE_TAG=$(gh release list --limit 1 --json tagName,isDraft --jq '.[] | select(.isDraft == true) | .tagName')
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

      - name: Upload combined yml files to release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Upload the combined yml files to the GitHub release
          gh release upload ${{ steps.find-release.outputs.release_tag }} latest.yml --clobber
          gh release upload ${{ steps.find-release.outputs.release_tag }} latest-linux.yml --clobber
          gh release upload ${{ steps.find-release.outputs.release_tag }} latest-mac.yml --clobber
